
ngat_uart_do_an.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f8  080073f8  00020268  2**0
                  CONTENTS
  4 .ARM          00000000  080073f8  080073f8  00020268  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f8  080073f8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08007400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000268  08007668  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08007668  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001134e  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002536  00000000  00000000  00031622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00033b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d64  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b8a  00000000  00000000  000359a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145a9  00000000  00000000  0004e52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009213e  00000000  00000000  00062ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ffc  00000000  00000000  000f4c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f9c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000268 	.word	0x20000268
 8000128:	00000000 	.word	0x00000000
 800012c:	08007158 	.word	0x08007158

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000026c 	.word	0x2000026c
 8000148:	08007158 	.word	0x08007158

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <send_data_to_server>:
char mat_khau_user[6] = {0,0,0,0,0,0};
int count_mat_khau=0;
int count_may_chu_nhap_vao=0;
int flag_di_qua_nhap_mat_khau =0;
int flag_timer4 =0;
void send_data_to_server (void) {
 8000170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000172:	b093      	sub	sp, #76	; 0x4c
 8000174:	af0c      	add	r7, sp, #48	; 0x30
	  flag_check_RX_PAYLOAD =0;
 8000176:	4b7d      	ldr	r3, [pc, #500]	; (800036c <send_data_to_server+0x1fc>)
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
	  flag_check_OK =1;
 800017c:	4b7c      	ldr	r3, [pc, #496]	; (8000370 <send_data_to_server+0x200>)
 800017e:	2201      	movs	r2, #1
 8000180:	601a      	str	r2, [r3, #0]
	  flag_pass = 0;
 8000182:	4b7c      	ldr	r3, [pc, #496]	; (8000374 <send_data_to_server+0x204>)
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM5, strlen(data_SIM5), 10);
 8000188:	487b      	ldr	r0, [pc, #492]	; (8000378 <send_data_to_server+0x208>)
 800018a:	f7ff ffe9 	bl	8000160 <strlen>
 800018e:	4603      	mov	r3, r0
 8000190:	b29a      	uxth	r2, r3
 8000192:	230a      	movs	r3, #10
 8000194:	4978      	ldr	r1, [pc, #480]	; (8000378 <send_data_to_server+0x208>)
 8000196:	4879      	ldr	r0, [pc, #484]	; (800037c <send_data_to_server+0x20c>)
 8000198:	f004 ff6c 	bl	8005074 <HAL_UART_Transmit>
	  HAL_Delay(300);
 800019c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001a0:	f002 fa56 	bl	8002650 <HAL_Delay>
	  update();
 80001a4:	f000 f9c2 	bl	800052c <update>
	  HAL_UART_Transmit(&huart1, data_SIM6, strlen(data_SIM6), 10);
 80001a8:	4875      	ldr	r0, [pc, #468]	; (8000380 <send_data_to_server+0x210>)
 80001aa:	f7ff ffd9 	bl	8000160 <strlen>
 80001ae:	4603      	mov	r3, r0
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	230a      	movs	r3, #10
 80001b4:	4972      	ldr	r1, [pc, #456]	; (8000380 <send_data_to_server+0x210>)
 80001b6:	4871      	ldr	r0, [pc, #452]	; (800037c <send_data_to_server+0x20c>)
 80001b8:	f004 ff5c 	bl	8005074 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80001bc:	2064      	movs	r0, #100	; 0x64
 80001be:	f002 fa47 	bl	8002650 <HAL_Delay>
//	  while(flag_pass==0);
	  ////////////////////// 5 6//////////////////
	  update();
 80001c2:	f000 f9b3 	bl	800052c <update>
	  flag_pass = 0;
 80001c6:	4b6b      	ldr	r3, [pc, #428]	; (8000374 <send_data_to_server+0x204>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM7, strlen(data_SIM7), 10);
 80001cc:	486d      	ldr	r0, [pc, #436]	; (8000384 <send_data_to_server+0x214>)
 80001ce:	f7ff ffc7 	bl	8000160 <strlen>
 80001d2:	4603      	mov	r3, r0
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	230a      	movs	r3, #10
 80001d8:	496a      	ldr	r1, [pc, #424]	; (8000384 <send_data_to_server+0x214>)
 80001da:	4868      	ldr	r0, [pc, #416]	; (800037c <send_data_to_server+0x20c>)
 80001dc:	f004 ff4a 	bl	8005074 <HAL_UART_Transmit>
	  HAL_Delay(300);
 80001e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001e4:	f002 fa34 	bl	8002650 <HAL_Delay>
	  update();
 80001e8:	f000 f9a0 	bl	800052c <update>
	   a = led%2;
 80001ec:	4b66      	ldr	r3, [pc, #408]	; (8000388 <send_data_to_server+0x218>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	bfb8      	it	lt
 80001f8:	425b      	neglt	r3, r3
 80001fa:	4a64      	ldr	r2, [pc, #400]	; (800038c <send_data_to_server+0x21c>)
 80001fc:	6013      	str	r3, [r2, #0]
	   b = quat%2;
 80001fe:	4b64      	ldr	r3, [pc, #400]	; (8000390 <send_data_to_server+0x220>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	f003 0301 	and.w	r3, r3, #1
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	4a61      	ldr	r2, [pc, #388]	; (8000394 <send_data_to_server+0x224>)
 800020e:	6013      	str	r3, [r2, #0]
	   c = bom%2;
 8000210:	4b61      	ldr	r3, [pc, #388]	; (8000398 <send_data_to_server+0x228>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	bfb8      	it	lt
 800021c:	425b      	neglt	r3, r3
 800021e:	4a5f      	ldr	r2, [pc, #380]	; (800039c <send_data_to_server+0x22c>)
 8000220:	6013      	str	r3, [r2, #0]
	   d = mode%2;
 8000222:	4b5f      	ldr	r3, [pc, #380]	; (80003a0 <send_data_to_server+0x230>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	bfb8      	it	lt
 800022e:	425b      	neglt	r3, r3
 8000230:	4a5c      	ldr	r2, [pc, #368]	; (80003a4 <send_data_to_server+0x234>)
 8000232:	6013      	str	r3, [r2, #0]
	   int check_led = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000238:	485b      	ldr	r0, [pc, #364]	; (80003a8 <send_data_to_server+0x238>)
 800023a:	f003 f8f5 	bl	8003428 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	617b      	str	r3, [r7, #20]
	   if(check_led ==1)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d102      	bne.n	800024e <send_data_to_server+0xde>
	   {
		   check_led =0;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	e001      	b.n	8000252 <send_data_to_server+0xe2>
	   } else {
		   check_led =1;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
	   }
	   int check_quat = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000256:	4855      	ldr	r0, [pc, #340]	; (80003ac <send_data_to_server+0x23c>)
 8000258:	f003 f8e6 	bl	8003428 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	613b      	str	r3, [r7, #16]
	   if(check_quat ==1)
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d102      	bne.n	800026c <send_data_to_server+0xfc>
	   {
		   check_quat =0;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
 800026a:	e001      	b.n	8000270 <send_data_to_server+0x100>
	   } else {
		   check_quat =1;
 800026c:	2301      	movs	r3, #1
 800026e:	613b      	str	r3, [r7, #16]
	   }
	   int check_bom = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000274:	484d      	ldr	r0, [pc, #308]	; (80003ac <send_data_to_server+0x23c>)
 8000276:	f003 f8d7 	bl	8003428 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	60fb      	str	r3, [r7, #12]
	   if(check_bom ==1)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d102      	bne.n	800028a <send_data_to_server+0x11a>
	   {
		   check_bom =0;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e001      	b.n	800028e <send_data_to_server+0x11e>
	   } else {
		   check_bom =1;
 800028a:	2301      	movs	r3, #1
 800028c:	60fb      	str	r3, [r7, #12]
	   }
	  sprintf(message_gui_server,"%d.%d %d.%d %d %d %d %d %d %d %d %d %d\n\n\n\n\n\n\n\n", data_dht11[2], data_dht11[3],data_dht11[0],data_dht11[1],adc_quang_tro,adc_do_am_dat,a,b,c,d,check_led,check_quat,check_bom);
 800028e:	4b48      	ldr	r3, [pc, #288]	; (80003b0 <send_data_to_server+0x240>)
 8000290:	789b      	ldrb	r3, [r3, #2]
 8000292:	469c      	mov	ip, r3
 8000294:	4b46      	ldr	r3, [pc, #280]	; (80003b0 <send_data_to_server+0x240>)
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	469e      	mov	lr, r3
 800029a:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <send_data_to_server+0x240>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	4b43      	ldr	r3, [pc, #268]	; (80003b0 <send_data_to_server+0x240>)
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	4b43      	ldr	r3, [pc, #268]	; (80003b4 <send_data_to_server+0x244>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a43      	ldr	r2, [pc, #268]	; (80003b8 <send_data_to_server+0x248>)
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	4937      	ldr	r1, [pc, #220]	; (800038c <send_data_to_server+0x21c>)
 80002b0:	6809      	ldr	r1, [r1, #0]
 80002b2:	4838      	ldr	r0, [pc, #224]	; (8000394 <send_data_to_server+0x224>)
 80002b4:	6800      	ldr	r0, [r0, #0]
 80002b6:	4c39      	ldr	r4, [pc, #228]	; (800039c <send_data_to_server+0x22c>)
 80002b8:	6824      	ldr	r4, [r4, #0]
 80002ba:	4d3a      	ldr	r5, [pc, #232]	; (80003a4 <send_data_to_server+0x234>)
 80002bc:	682d      	ldr	r5, [r5, #0]
 80002be:	68fe      	ldr	r6, [r7, #12]
 80002c0:	960a      	str	r6, [sp, #40]	; 0x28
 80002c2:	693e      	ldr	r6, [r7, #16]
 80002c4:	9609      	str	r6, [sp, #36]	; 0x24
 80002c6:	697e      	ldr	r6, [r7, #20]
 80002c8:	9608      	str	r6, [sp, #32]
 80002ca:	9507      	str	r5, [sp, #28]
 80002cc:	9406      	str	r4, [sp, #24]
 80002ce:	9005      	str	r0, [sp, #20]
 80002d0:	9104      	str	r1, [sp, #16]
 80002d2:	9203      	str	r2, [sp, #12]
 80002d4:	9302      	str	r3, [sp, #8]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	9201      	str	r2, [sp, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	4673      	mov	r3, lr
 80002e0:	4662      	mov	r2, ip
 80002e2:	4936      	ldr	r1, [pc, #216]	; (80003bc <send_data_to_server+0x24c>)
 80002e4:	4836      	ldr	r0, [pc, #216]	; (80003c0 <send_data_to_server+0x250>)
 80002e6:	f005 fdd5 	bl	8005e94 <siprintf>
UART10:	  HAL_UART_Transmit(&huart1, message_gui_server, strlen(message_gui_server), 500);
 80002ea:	4835      	ldr	r0, [pc, #212]	; (80003c0 <send_data_to_server+0x250>)
 80002ec:	f7ff ff38 	bl	8000160 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002f8:	4931      	ldr	r1, [pc, #196]	; (80003c0 <send_data_to_server+0x250>)
 80002fa:	4820      	ldr	r0, [pc, #128]	; (800037c <send_data_to_server+0x20c>)
 80002fc:	f004 feba 	bl	8005074 <HAL_UART_Transmit>

	  HAL_TIM_Base_Start_IT(&htim4);
 8000300:	4830      	ldr	r0, [pc, #192]	; (80003c4 <send_data_to_server+0x254>)
 8000302:	f004 fa8b 	bl	800481c <HAL_TIM_Base_Start_IT>
	  flag_timer4=0;
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <send_data_to_server+0x258>)
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <send_data_to_server+0x254>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2200      	movs	r2, #0
 8000312:	625a      	str	r2, [r3, #36]	; 0x24
	  while(flag_pass==0){
 8000314:	e004      	b.n	8000320 <send_data_to_server+0x1b0>
		  if(flag_timer4 ==1)
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <send_data_to_server+0x258>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d100      	bne.n	8000320 <send_data_to_server+0x1b0>
		  {
			  goto UART10;
 800031e:	e7e4      	b.n	80002ea <send_data_to_server+0x17a>
	  while(flag_pass==0){
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <send_data_to_server+0x204>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f6      	beq.n	8000316 <send_data_to_server+0x1a6>
		  }
	  }
	  //////////////////// 7 8//////////////////////////////
	  flag_pass = 0;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <send_data_to_server+0x204>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM9, strlen(data_SIM9), 10);
 800032e:	4827      	ldr	r0, [pc, #156]	; (80003cc <send_data_to_server+0x25c>)
 8000330:	f7ff ff16 	bl	8000160 <strlen>
 8000334:	4603      	mov	r3, r0
 8000336:	b29a      	uxth	r2, r3
 8000338:	230a      	movs	r3, #10
 800033a:	4924      	ldr	r1, [pc, #144]	; (80003cc <send_data_to_server+0x25c>)
 800033c:	480f      	ldr	r0, [pc, #60]	; (800037c <send_data_to_server+0x20c>)
 800033e:	f004 fe99 	bl	8005074 <HAL_UART_Transmit>
	  while(flag_pass==0);
 8000342:	bf00      	nop
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <send_data_to_server+0x204>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0fb      	beq.n	8000344 <send_data_to_server+0x1d4>
	  flag_check_RX_PAYLOAD =1;
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <send_data_to_server+0x1fc>)
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
	  flag_check_OK =0;
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <send_data_to_server+0x200>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]


	  memset(message_gui_server,0,sizeof(message_gui_server));
 8000358:	223c      	movs	r2, #60	; 0x3c
 800035a:	2100      	movs	r1, #0
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <send_data_to_server+0x250>)
 800035e:	f005 fde5 	bl	8005f2c <memset>

}
 8000362:	bf00      	nop
 8000364:	371c      	adds	r7, #28
 8000366:	46bd      	mov	sp, r7
 8000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036a:	bf00      	nop
 800036c:	200004d8 	.word	0x200004d8
 8000370:	200004cc 	.word	0x200004cc
 8000374:	200004dc 	.word	0x200004dc
 8000378:	200000f4 	.word	0x200000f4
 800037c:	20000458 	.word	0x20000458
 8000380:	2000011c 	.word	0x2000011c
 8000384:	20000144 	.word	0x20000144
 8000388:	20000520 	.word	0x20000520
 800038c:	2000056c 	.word	0x2000056c
 8000390:	20000524 	.word	0x20000524
 8000394:	20000570 	.word	0x20000570
 8000398:	20000528 	.word	0x20000528
 800039c:	20000574 	.word	0x20000574
 80003a0:	2000052c 	.word	0x2000052c
 80003a4:	20000578 	.word	0x20000578
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	200005ec 	.word	0x200005ec
 80003b4:	20000628 	.word	0x20000628
 80003b8:	2000062c 	.word	0x2000062c
 80003bc:	08007170 	.word	0x08007170
 80003c0:	20000640 	.word	0x20000640
 80003c4:	20000410 	.word	0x20000410
 80003c8:	20000690 	.word	0x20000690
 80003cc:	2000016c 	.word	0x2000016c

080003d0 <init_sim>:

void init_sim(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	  flag_check_RX_PAYLOAD =0;
 80003d4:	4b4a      	ldr	r3, [pc, #296]	; (8000500 <init_sim+0x130>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
	  flag_check_OK =1;
 80003da:	4b4a      	ldr	r3, [pc, #296]	; (8000504 <init_sim+0x134>)
 80003dc:	2201      	movs	r2, #1
 80003de:	601a      	str	r2, [r3, #0]

	  flag_pass = 0;
 80003e0:	4b49      	ldr	r3, [pc, #292]	; (8000508 <init_sim+0x138>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM1, strlen(data_SIM1), 10);
 80003e6:	4849      	ldr	r0, [pc, #292]	; (800050c <init_sim+0x13c>)
 80003e8:	f7ff feba 	bl	8000160 <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	230a      	movs	r3, #10
 80003f2:	4946      	ldr	r1, [pc, #280]	; (800050c <init_sim+0x13c>)
 80003f4:	4846      	ldr	r0, [pc, #280]	; (8000510 <init_sim+0x140>)
 80003f6:	f004 fe3d 	bl	8005074 <HAL_UART_Transmit>
	  while(flag_pass==0);
 80003fa:	bf00      	nop
 80003fc:	4b42      	ldr	r3, [pc, #264]	; (8000508 <init_sim+0x138>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0fb      	beq.n	80003fc <init_sim+0x2c>
	  //////////////1//////////////////
	  flag_pass = 0;
 8000404:	4b40      	ldr	r3, [pc, #256]	; (8000508 <init_sim+0x138>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM2, strlen(data_SIM2), 10);
 800040a:	4842      	ldr	r0, [pc, #264]	; (8000514 <init_sim+0x144>)
 800040c:	f7ff fea8 	bl	8000160 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	230a      	movs	r3, #10
 8000416:	493f      	ldr	r1, [pc, #252]	; (8000514 <init_sim+0x144>)
 8000418:	483d      	ldr	r0, [pc, #244]	; (8000510 <init_sim+0x140>)
 800041a:	f004 fe2b 	bl	8005074 <HAL_UART_Transmit>
	  while(flag_pass==0);
 800041e:	bf00      	nop
 8000420:	4b39      	ldr	r3, [pc, #228]	; (8000508 <init_sim+0x138>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0fb      	beq.n	8000420 <init_sim+0x50>
	  ////////////////2///////////////////
	  flag_pass = 0;
 8000428:	4b37      	ldr	r3, [pc, #220]	; (8000508 <init_sim+0x138>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM3, strlen(data_SIM3), 10);
 800042e:	483a      	ldr	r0, [pc, #232]	; (8000518 <init_sim+0x148>)
 8000430:	f7ff fe96 	bl	8000160 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	b29a      	uxth	r2, r3
 8000438:	230a      	movs	r3, #10
 800043a:	4937      	ldr	r1, [pc, #220]	; (8000518 <init_sim+0x148>)
 800043c:	4834      	ldr	r0, [pc, #208]	; (8000510 <init_sim+0x140>)
 800043e:	f004 fe19 	bl	8005074 <HAL_UART_Transmit>
	  while(flag_pass==0);
 8000442:	bf00      	nop
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <init_sim+0x138>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0fb      	beq.n	8000444 <init_sim+0x74>
	  ////////////////////////3/////////////////////
	  flag_pass = 0;
 800044c:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <init_sim+0x138>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM4, strlen(data_SIM4), 10);
 8000452:	4832      	ldr	r0, [pc, #200]	; (800051c <init_sim+0x14c>)
 8000454:	f7ff fe84 	bl	8000160 <strlen>
 8000458:	4603      	mov	r3, r0
 800045a:	b29a      	uxth	r2, r3
 800045c:	230a      	movs	r3, #10
 800045e:	492f      	ldr	r1, [pc, #188]	; (800051c <init_sim+0x14c>)
 8000460:	482b      	ldr	r0, [pc, #172]	; (8000510 <init_sim+0x140>)
 8000462:	f004 fe07 	bl	8005074 <HAL_UART_Transmit>
	  while(flag_pass==0);
 8000466:	bf00      	nop
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <init_sim+0x138>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0fb      	beq.n	8000468 <init_sim+0x98>
	  flag_pass = 0;
 8000470:	4b25      	ldr	r3, [pc, #148]	; (8000508 <init_sim+0x138>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM10, strlen(data_SIM10), 10);
 8000476:	482a      	ldr	r0, [pc, #168]	; (8000520 <init_sim+0x150>)
 8000478:	f7ff fe72 	bl	8000160 <strlen>
 800047c:	4603      	mov	r3, r0
 800047e:	b29a      	uxth	r2, r3
 8000480:	230a      	movs	r3, #10
 8000482:	4927      	ldr	r1, [pc, #156]	; (8000520 <init_sim+0x150>)
 8000484:	4822      	ldr	r0, [pc, #136]	; (8000510 <init_sim+0x140>)
 8000486:	f004 fdf5 	bl	8005074 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800048a:	2064      	movs	r0, #100	; 0x64
 800048c:	f002 f8e0 	bl	8002650 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, data_SIM11, strlen(data_SIM11), 10);
 8000490:	4824      	ldr	r0, [pc, #144]	; (8000524 <init_sim+0x154>)
 8000492:	f7ff fe65 	bl	8000160 <strlen>
 8000496:	4603      	mov	r3, r0
 8000498:	b29a      	uxth	r2, r3
 800049a:	230a      	movs	r3, #10
 800049c:	4921      	ldr	r1, [pc, #132]	; (8000524 <init_sim+0x154>)
 800049e:	481c      	ldr	r0, [pc, #112]	; (8000510 <init_sim+0x140>)
 80004a0:	f004 fde8 	bl	8005074 <HAL_UART_Transmit>
	  while(flag_pass==0);
 80004a4:	bf00      	nop
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <init_sim+0x138>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0fb      	beq.n	80004a6 <init_sim+0xd6>
	  flag_check_RX_PAYLOAD =1;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <init_sim+0x130>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	601a      	str	r2, [r3, #0]
	  flag_check_OK =0;
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <init_sim+0x134>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
	  flag_pass_all_RX_PAYLOAD = 0;
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <init_sim+0x158>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]


	  memset(data_SIM1,0,sizeof(data_SIM1));
 80004c0:	2228      	movs	r2, #40	; 0x28
 80004c2:	2100      	movs	r1, #0
 80004c4:	4811      	ldr	r0, [pc, #68]	; (800050c <init_sim+0x13c>)
 80004c6:	f005 fd31 	bl	8005f2c <memset>
	  memset(data_SIM1,0,sizeof(data_SIM2));
 80004ca:	2228      	movs	r2, #40	; 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <init_sim+0x13c>)
 80004d0:	f005 fd2c 	bl	8005f2c <memset>
	  memset(data_SIM1,0,sizeof(data_SIM3));
 80004d4:	2228      	movs	r2, #40	; 0x28
 80004d6:	2100      	movs	r1, #0
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <init_sim+0x13c>)
 80004da:	f005 fd27 	bl	8005f2c <memset>
	  memset(data_SIM1,0,sizeof(data_SIM4));
 80004de:	2246      	movs	r2, #70	; 0x46
 80004e0:	2100      	movs	r1, #0
 80004e2:	480a      	ldr	r0, [pc, #40]	; (800050c <init_sim+0x13c>)
 80004e4:	f005 fd22 	bl	8005f2c <memset>
	  memset(data_SIM1,0,sizeof(data_SIM10));
 80004e8:	2228      	movs	r2, #40	; 0x28
 80004ea:	2100      	movs	r1, #0
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <init_sim+0x13c>)
 80004ee:	f005 fd1d 	bl	8005f2c <memset>
	  memset(data_SIM1,0,sizeof(data_SIM11));
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <init_sim+0x13c>)
 80004f8:	f005 fd18 	bl	8005f2c <memset>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200004d8 	.word	0x200004d8
 8000504:	200004cc 	.word	0x200004cc
 8000508:	200004dc 	.word	0x200004dc
 800050c:	20000034 	.word	0x20000034
 8000510:	20000458 	.word	0x20000458
 8000514:	2000005c 	.word	0x2000005c
 8000518:	20000084 	.word	0x20000084
 800051c:	200000ac 	.word	0x200000ac
 8000520:	20000194 	.word	0x20000194
 8000524:	200001bc 	.word	0x200001bc
 8000528:	200004f0 	.word	0x200004f0

0800052c <update>:
void update(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	switch( mode % 2 ) {
 8000530:	4b55      	ldr	r3, [pc, #340]	; (8000688 <update+0x15c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	bfb8      	it	lt
 800053c:	425b      	neglt	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <update+0x1c>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d053      	beq.n	80005ee <update+0xc2>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
				  }
				  break;
			  }
		  }
}
 8000546:	e09d      	b.n	8000684 <update+0x158>
				  flag_mode_bang_tay =1;
 8000548:	4b50      	ldr	r3, [pc, #320]	; (800068c <update+0x160>)
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]
				  flag_mode_tu_dong =0;
 800054e:	4b50      	ldr	r3, [pc, #320]	; (8000690 <update+0x164>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	484e      	ldr	r0, [pc, #312]	; (8000694 <update+0x168>)
 800055c:	f002 ff7b 	bl	8003456 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	484b      	ldr	r0, [pc, #300]	; (8000694 <update+0x168>)
 8000568:	f002 ff75 	bl	8003456 <HAL_GPIO_WritePin>
				  if((led % 2) == 1)
 800056c:	4b4a      	ldr	r3, [pc, #296]	; (8000698 <update+0x16c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	bfb8      	it	lt
 8000578:	425b      	neglt	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d106      	bne.n	800058c <update+0x60>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	4845      	ldr	r0, [pc, #276]	; (800069c <update+0x170>)
 8000586:	f002 ff66 	bl	8003456 <HAL_GPIO_WritePin>
 800058a:	e005      	b.n	8000598 <update+0x6c>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000592:	4842      	ldr	r0, [pc, #264]	; (800069c <update+0x170>)
 8000594:	f002 ff5f 	bl	8003456 <HAL_GPIO_WritePin>
				  if((quat % 2) == 1)
 8000598:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <update+0x174>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	bfb8      	it	lt
 80005a4:	425b      	neglt	r3, r3
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d106      	bne.n	80005b8 <update+0x8c>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b0:	483a      	ldr	r0, [pc, #232]	; (800069c <update+0x170>)
 80005b2:	f002 ff50 	bl	8003456 <HAL_GPIO_WritePin>
 80005b6:	e005      	b.n	80005c4 <update+0x98>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4837      	ldr	r0, [pc, #220]	; (800069c <update+0x170>)
 80005c0:	f002 ff49 	bl	8003456 <HAL_GPIO_WritePin>
				  if((bom % 2) == 1)
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <update+0x178>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	bfb8      	it	lt
 80005d0:	425b      	neglt	r3, r3
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d105      	bne.n	80005e2 <update+0xb6>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2101      	movs	r1, #1
 80005da:	4830      	ldr	r0, [pc, #192]	; (800069c <update+0x170>)
 80005dc:	f002 ff3b 	bl	8003456 <HAL_GPIO_WritePin>
				  break;
 80005e0:	e050      	b.n	8000684 <update+0x158>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	482d      	ldr	r0, [pc, #180]	; (800069c <update+0x170>)
 80005e8:	f002 ff35 	bl	8003456 <HAL_GPIO_WritePin>
				  break;
 80005ec:	e04a      	b.n	8000684 <update+0x158>
				  flag_mode_tu_dong=1;
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <update+0x164>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
				  flag_mode_bang_tay =0;
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <update+0x160>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4824      	ldr	r0, [pc, #144]	; (8000694 <update+0x168>)
 8000602:	f002 ff28 	bl	8003456 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	4821      	ldr	r0, [pc, #132]	; (8000694 <update+0x168>)
 800060e:	f002 ff22 	bl	8003456 <HAL_GPIO_WritePin>
				  if( adc_quang_tro > nguong_adc_quang_tro)
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <update+0x17c>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <update+0x180>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	dd06      	ble.n	800062c <update+0x100>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000624:	481d      	ldr	r0, [pc, #116]	; (800069c <update+0x170>)
 8000626:	f002 ff16 	bl	8003456 <HAL_GPIO_WritePin>
 800062a:	e005      	b.n	8000638 <update+0x10c>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000632:	481a      	ldr	r0, [pc, #104]	; (800069c <update+0x170>)
 8000634:	f002 ff0f 	bl	8003456 <HAL_GPIO_WritePin>
				  if(data_dht11[3] > nguong_nhiet_do)
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <update+0x184>)
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	461a      	mov	r2, r3
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <update+0x188>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	dd06      	ble.n	8000654 <update+0x128>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <update+0x170>)
 800064e:	f002 ff02 	bl	8003456 <HAL_GPIO_WritePin>
 8000652:	e005      	b.n	8000660 <update+0x134>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <update+0x170>)
 800065c:	f002 fefb 	bl	8003456 <HAL_GPIO_WritePin>
				  if(adc_do_am_dat > nguong_adc_do_am_dat)
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <update+0x18c>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <update+0x190>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	dd05      	ble.n	8000678 <update+0x14c>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <update+0x170>)
 8000672:	f002 fef0 	bl	8003456 <HAL_GPIO_WritePin>
				  break;
 8000676:	e004      	b.n	8000682 <update+0x156>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <update+0x170>)
 800067e:	f002 feea 	bl	8003456 <HAL_GPIO_WritePin>
				  break;
 8000682:	bf00      	nop
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000052c 	.word	0x2000052c
 800068c:	200001f0 	.word	0x200001f0
 8000690:	20000530 	.word	0x20000530
 8000694:	40010c00 	.word	0x40010c00
 8000698:	20000520 	.word	0x20000520
 800069c:	40010800 	.word	0x40010800
 80006a0:	20000524 	.word	0x20000524
 80006a4:	20000528 	.word	0x20000528
 80006a8:	20000628 	.word	0x20000628
 80006ac:	200001e4 	.word	0x200001e4
 80006b0:	200005ec 	.word	0x200005ec
 80006b4:	200001ec 	.word	0x200001ec
 80006b8:	2000062c 	.word	0x2000062c
 80006bc:	200001e8 	.word	0x200001e8

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 ff61 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 fa81 	bl	8000bd0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(15000);
 80006ce:	f643 2098 	movw	r0, #15000	; 0x3a98
 80006d2:	f001 ffbd 	bl	8002650 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 fce5 	bl	80010a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fcb9 	bl	8001050 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80006de:	f000 fb7d 	bl	8000ddc <MX_TIM1_Init>
  MX_I2C1_Init();
 80006e2:	f000 fb4d 	bl	8000d80 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006e6:	f000 fbcb 	bl	8000e80 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ea:	f000 fc15 	bl	8000f18 <MX_TIM3_Init>
  MX_ADC1_Init();
 80006ee:	f000 facb 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006f2:	f000 fb07 	bl	8000d04 <MX_ADC2_Init>
  MX_TIM4_Init();
 80006f6:	f000 fc5d 	bl	8000fb4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80006fa:	2007      	movs	r0, #7
 80006fc:	f002 fc43 	bl	8002f86 <HAL_NVIC_DisableIRQ>
  HAL_TIM_Base_Stop_IT(&htim2);
 8000700:	48b0      	ldr	r0, [pc, #704]	; (80009c4 <main+0x304>)
 8000702:	f004 f8dd 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim3);
 8000706:	48b0      	ldr	r0, [pc, #704]	; (80009c8 <main+0x308>)
 8000708:	f004 f8da 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
  HAL_UART_Receive_IT(&huart1, dataRX, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	49af      	ldr	r1, [pc, #700]	; (80009cc <main+0x30c>)
 8000710:	48af      	ldr	r0, [pc, #700]	; (80009d0 <main+0x310>)
 8000712:	f004 fd32 	bl	800517a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000716:	48af      	ldr	r0, [pc, #700]	; (80009d4 <main+0x314>)
 8000718:	f004 f880 	bl	800481c <HAL_TIM_Base_Start_IT>
  lcd_init();
 800071c:	f005 fb68 	bl	8005df0 <lcd_init>
  lcd_clear();
 8000720:	f005 fb30 	bl	8005d84 <lcd_clear>
  lcd_put_cur(0,3);
 8000724:	2103      	movs	r1, #3
 8000726:	2000      	movs	r0, #0
 8000728:	f005 fb43 	bl	8005db2 <lcd_put_cur>
  lcd_send_string("HELLO LCD");
 800072c:	48aa      	ldr	r0, [pc, #680]	; (80009d8 <main+0x318>)
 800072e:	f005 fb9c 	bl	8005e6a <lcd_send_string>
  init_sim();
 8000732:	f7ff fe4d 	bl	80003d0 <init_sim>
//	  flag_check_OK =0;
//	  flag_pass_all_RX_PAYLOAD = 0;
//	  HAL_UART_Transmit(&huart1, data_SIM10, strlen(data_SIM10), 10);
//	  HAL_Delay(100);
//	  HAL_UART_Transmit(&huart1, data_SIM11, strlen(data_SIM11), 10);
	  update();
 8000736:	f7ff fef9 	bl	800052c <update>
		if ( flag_ngat_uart_xong_message )
 800073a:	4ba8      	ldr	r3, [pc, #672]	; (80009dc <main+0x31c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d010      	beq.n	8000764 <main+0xa4>
		{
			flag_ngat_uart_xong_message=0;
 8000742:	4ba6      	ldr	r3, [pc, #664]	; (80009dc <main+0x31c>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
			for(int i=0 ; i < sizeof(message); i++ )
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e007      	b.n	800075e <main+0x9e>
			{
				message[i] = 0;
 800074e:	4aa4      	ldr	r2, [pc, #656]	; (80009e0 <main+0x320>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			for(int i=0 ; i < sizeof(message); i++ )
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b27      	cmp	r3, #39	; 0x27
 8000762:	d9f4      	bls.n	800074e <main+0x8e>
			}
		}
		if(flag_ngat_timer1)
 8000764:	4b9f      	ldr	r3, [pc, #636]	; (80009e4 <main+0x324>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d05d      	beq.n	8000828 <main+0x168>
		{
			flag_ngat_timer1 =0;
 800076c:	4b9d      	ldr	r3, [pc, #628]	; (80009e4 <main+0x324>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
			doc_dht11();
 8000772:	f001 fc01 	bl	8001f78 <doc_dht11>
			HAL_Delay(10);
 8000776:	200a      	movs	r0, #10
 8000778:	f001 ff6a 	bl	8002650 <HAL_Delay>
			xu_ly_tick_dht11(tick,data_dht11);
 800077c:	499a      	ldr	r1, [pc, #616]	; (80009e8 <main+0x328>)
 800077e:	489b      	ldr	r0, [pc, #620]	; (80009ec <main+0x32c>)
 8000780:	f001 fba2 	bl	8001ec8 <xu_ly_tick_dht11>

			sprintf(nhiet_do,"Nhiet do: %d.%doC", data_dht11[2], data_dht11[3]);
 8000784:	4b98      	ldr	r3, [pc, #608]	; (80009e8 <main+0x328>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	461a      	mov	r2, r3
 800078a:	4b97      	ldr	r3, [pc, #604]	; (80009e8 <main+0x328>)
 800078c:	78db      	ldrb	r3, [r3, #3]
 800078e:	4998      	ldr	r1, [pc, #608]	; (80009f0 <main+0x330>)
 8000790:	4898      	ldr	r0, [pc, #608]	; (80009f4 <main+0x334>)
 8000792:	f005 fb7f 	bl	8005e94 <siprintf>
			sprintf(do_am, "Do am:  %d.%d ", data_dht11[0],data_dht11[1]);
 8000796:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <main+0x328>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	4b92      	ldr	r3, [pc, #584]	; (80009e8 <main+0x328>)
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	4995      	ldr	r1, [pc, #596]	; (80009f8 <main+0x338>)
 80007a2:	4896      	ldr	r0, [pc, #600]	; (80009fc <main+0x33c>)
 80007a4:	f005 fb76 	bl	8005e94 <siprintf>
			HAL_ADC_Start(&hadc1);
 80007a8:	4895      	ldr	r0, [pc, #596]	; (8000a00 <main+0x340>)
 80007aa:	f002 f84d 	bl	8002848 <HAL_ADC_Start>
			HAL_Delay(50);
 80007ae:	2032      	movs	r0, #50	; 0x32
 80007b0:	f001 ff4e 	bl	8002650 <HAL_Delay>
			HAL_ADC_Start(&hadc2);
 80007b4:	4893      	ldr	r0, [pc, #588]	; (8000a04 <main+0x344>)
 80007b6:	f002 f847 	bl	8002848 <HAL_ADC_Start>
			HAL_Delay(50);
 80007ba:	2032      	movs	r0, #50	; 0x32
 80007bc:	f001 ff48 	bl	8002650 <HAL_Delay>
			adc_quang_tro = HAL_ADC_GetValue(&hadc1);   // đ ?c adc quang trở
 80007c0:	488f      	ldr	r0, [pc, #572]	; (8000a00 <main+0x340>)
 80007c2:	f002 f91b 	bl	80029fc <HAL_ADC_GetValue>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b8f      	ldr	r3, [pc, #572]	; (8000a08 <main+0x348>)
 80007cc:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f001 ff3e 	bl	8002650 <HAL_Delay>
			adc_do_am_dat = HAL_ADC_GetValue(&hadc2);
 80007d4:	488b      	ldr	r0, [pc, #556]	; (8000a04 <main+0x344>)
 80007d6:	f002 f911 	bl	80029fc <HAL_ADC_GetValue>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b8b      	ldr	r3, [pc, #556]	; (8000a0c <main+0x34c>)
 80007e0:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 80007e2:	2032      	movs	r0, #50	; 0x32
 80007e4:	f001 ff34 	bl	8002650 <HAL_Delay>
			HAL_ADC_Stop(&hadc1);
 80007e8:	4885      	ldr	r0, [pc, #532]	; (8000a00 <main+0x340>)
 80007ea:	f002 f8db 	bl	80029a4 <HAL_ADC_Stop>
			HAL_ADC_Stop(&hadc2);
 80007ee:	4885      	ldr	r0, [pc, #532]	; (8000a04 <main+0x344>)
 80007f0:	f002 f8d8 	bl	80029a4 <HAL_ADC_Stop>
			HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f002 fbc6 	bl	8002f86 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80007fa:	2009      	movs	r0, #9
 80007fc:	f002 fbc3 	bl	8002f86 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000800:	200a      	movs	r0, #10
 8000802:	f002 fbc0 	bl	8002f86 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000806:	2017      	movs	r0, #23
 8000808:	f002 fbbd 	bl	8002f86 <HAL_NVIC_DisableIRQ>
			send_data_to_server();
 800080c:	f7ff fcb0 	bl	8000170 <send_data_to_server>
			HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000810:	2008      	movs	r0, #8
 8000812:	f002 fbaa 	bl	8002f6a <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000816:	2009      	movs	r0, #9
 8000818:	f002 fba7 	bl	8002f6a <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800081c:	200a      	movs	r0, #10
 800081e:	f002 fba4 	bl	8002f6a <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000822:	2017      	movs	r0, #23
 8000824:	f002 fba1 	bl	8002f6a <HAL_NVIC_EnableIRQ>
		}
		update();
 8000828:	f7ff fe80 	bl	800052c <update>
		if( flag_ngat_timer3 )
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <main+0x350>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d080      	beq.n	8000736 <main+0x76>
		{
			flag_ngat_timer3=0;
 8000834:	4b76      	ldr	r3, [pc, #472]	; (8000a10 <main+0x350>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
			switch(count_state_lcd%4)
 800083a:	4b76      	ldr	r3, [pc, #472]	; (8000a14 <main+0x354>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	425a      	negs	r2, r3
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	f002 0203 	and.w	r2, r2, #3
 8000848:	bf58      	it	pl
 800084a:	4253      	negpl	r3, r2
 800084c:	2b03      	cmp	r3, #3
 800084e:	f63f af72 	bhi.w	8000736 <main+0x76>
 8000852:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <main+0x198>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	08000869 	.word	0x08000869
 800085c:	0800088b 	.word	0x0800088b
 8000860:	08000adf 	.word	0x08000adf
 8000864:	08000b49 	.word	0x08000b49
					{
						case 0:
						{
								lcd_clear();
 8000868:	f005 fa8c 	bl	8005d84 <lcd_clear>
								lcd_put_cur(0,0);
 800086c:	2100      	movs	r1, #0
 800086e:	2000      	movs	r0, #0
 8000870:	f005 fa9f 	bl	8005db2 <lcd_put_cur>
								lcd_send_string(nhiet_do);
 8000874:	485f      	ldr	r0, [pc, #380]	; (80009f4 <main+0x334>)
 8000876:	f005 faf8 	bl	8005e6a <lcd_send_string>
								lcd_put_cur(1,0);
 800087a:	2100      	movs	r1, #0
 800087c:	2001      	movs	r0, #1
 800087e:	f005 fa98 	bl	8005db2 <lcd_put_cur>
								lcd_send_string(do_am);
 8000882:	485e      	ldr	r0, [pc, #376]	; (80009fc <main+0x33c>)
 8000884:	f005 faf1 	bl	8005e6a <lcd_send_string>
								break;
 8000888:	e17b      	b.n	8000b82 <main+0x4c2>
						}
						case 1:
						{

							if(flag_chuyen_lcd)
 800088a:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <main+0x358>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d019      	beq.n	80008c6 <main+0x206>
							{
								count_mat_khau=-1;
 8000892:	4b62      	ldr	r3, [pc, #392]	; (8000a1c <main+0x35c>)
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	601a      	str	r2, [r3, #0]
								count_may_chu_nhap_vao=0;
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <main+0x360>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
								flag_lan_dau_nhap_mat_khau =1;
 80008a0:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <main+0x364>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
								flag_chuyen_lcd=0;
 80008a6:	4b5c      	ldr	r3, [pc, #368]	; (8000a18 <main+0x358>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
								lcd_clear();
 80008ac:	f005 fa6a 	bl	8005d84 <lcd_clear>
								lcd_put_cur(0,1);
 80008b0:	2101      	movs	r1, #1
 80008b2:	2000      	movs	r0, #0
 80008b4:	f005 fa7d 	bl	8005db2 <lcd_put_cur>
								lcd_send_string("Nhap mat khau:");
 80008b8:	485b      	ldr	r0, [pc, #364]	; (8000a28 <main+0x368>)
 80008ba:	f005 fad6 	bl	8005e6a <lcd_send_string>
								lcd_put_cur(1,0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2001      	movs	r0, #1
 80008c2:	f005 fa76 	bl	8005db2 <lcd_put_cur>
							}
								count_mat_khau++;
 80008c6:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <main+0x35c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <main+0x35c>)
 80008ce:	6013      	str	r3, [r2, #0]
								count_may_chu_nhap_vao++;
 80008d0:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <main+0x360>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a52      	ldr	r2, [pc, #328]	; (8000a20 <main+0x360>)
 80008d8:	6013      	str	r3, [r2, #0]
							if(count_may_chu_nhap_vao>=2)
 80008da:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <main+0x360>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	f340 814d 	ble.w	8000b7e <main+0x4be>
							{
								if(count_may_chu_nhap_vao==2){
 80008e4:	4b4e      	ldr	r3, [pc, #312]	; (8000a20 <main+0x360>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d102      	bne.n	80008f2 <main+0x232>
									count_mat_khau=0;
 80008ec:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <main+0x35c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
								}
								if((flag_number <= 9) && (flag_number >=0))
 80008f2:	4b4e      	ldr	r3, [pc, #312]	; (8000a2c <main+0x36c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b09      	cmp	r3, #9
 80008f8:	dc0a      	bgt.n	8000910 <main+0x250>
 80008fa:	4b4c      	ldr	r3, [pc, #304]	; (8000a2c <main+0x36c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db06      	blt.n	8000910 <main+0x250>
								{
								mat_khau_user[count_mat_khau] = flag_number;
 8000902:	4b4a      	ldr	r3, [pc, #296]	; (8000a2c <main+0x36c>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <main+0x35c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	b2d1      	uxtb	r1, r2
 800090c:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <main+0x370>)
 800090e:	54d1      	strb	r1, [r2, r3]
								}
								switch(flag_number)
 8000910:	4b46      	ldr	r3, [pc, #280]	; (8000a2c <main+0x36c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b0b      	cmp	r3, #11
 8000916:	f200 80dd 	bhi.w	8000ad4 <main+0x414>
 800091a:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <main+0x260>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	08000999 	.word	0x08000999
 8000924:	08000951 	.word	0x08000951
 8000928:	08000959 	.word	0x08000959
 800092c:	08000961 	.word	0x08000961
 8000930:	08000969 	.word	0x08000969
 8000934:	08000971 	.word	0x08000971
 8000938:	08000979 	.word	0x08000979
 800093c:	08000981 	.word	0x08000981
 8000940:	08000989 	.word	0x08000989
 8000944:	08000991 	.word	0x08000991
 8000948:	08000ad5 	.word	0x08000ad5
 800094c:	080009a1 	.word	0x080009a1
								{
									case 1:
									{
										lcd_send_string("*");
 8000950:	4838      	ldr	r0, [pc, #224]	; (8000a34 <main+0x374>)
 8000952:	f005 fa8a 	bl	8005e6a <lcd_send_string>
										break;
 8000956:	e0c1      	b.n	8000adc <main+0x41c>
									}
									case 2:
									{
										lcd_send_string("*");
 8000958:	4836      	ldr	r0, [pc, #216]	; (8000a34 <main+0x374>)
 800095a:	f005 fa86 	bl	8005e6a <lcd_send_string>
										break;
 800095e:	e0bd      	b.n	8000adc <main+0x41c>
									}
									case 3:
									{
										lcd_send_string("*");
 8000960:	4834      	ldr	r0, [pc, #208]	; (8000a34 <main+0x374>)
 8000962:	f005 fa82 	bl	8005e6a <lcd_send_string>
										break;
 8000966:	e0b9      	b.n	8000adc <main+0x41c>
									}
									case 4:
									{
										lcd_send_string("*");
 8000968:	4832      	ldr	r0, [pc, #200]	; (8000a34 <main+0x374>)
 800096a:	f005 fa7e 	bl	8005e6a <lcd_send_string>
										break;
 800096e:	e0b5      	b.n	8000adc <main+0x41c>
									}
									case 5:
									{
										lcd_send_string("*");
 8000970:	4830      	ldr	r0, [pc, #192]	; (8000a34 <main+0x374>)
 8000972:	f005 fa7a 	bl	8005e6a <lcd_send_string>
										break;
 8000976:	e0b1      	b.n	8000adc <main+0x41c>
									}
									case 6:
									{
										lcd_send_string("*");
 8000978:	482e      	ldr	r0, [pc, #184]	; (8000a34 <main+0x374>)
 800097a:	f005 fa76 	bl	8005e6a <lcd_send_string>
										break;
 800097e:	e0ad      	b.n	8000adc <main+0x41c>
									}
									case 7:
									{
										lcd_send_string("*");
 8000980:	482c      	ldr	r0, [pc, #176]	; (8000a34 <main+0x374>)
 8000982:	f005 fa72 	bl	8005e6a <lcd_send_string>
										break;
 8000986:	e0a9      	b.n	8000adc <main+0x41c>
									}
									case 8:
									{
										lcd_send_string("*");
 8000988:	482a      	ldr	r0, [pc, #168]	; (8000a34 <main+0x374>)
 800098a:	f005 fa6e 	bl	8005e6a <lcd_send_string>
										break;
 800098e:	e0a5      	b.n	8000adc <main+0x41c>
									}
									case 9:
									{
										lcd_send_string("*");
 8000990:	4828      	ldr	r0, [pc, #160]	; (8000a34 <main+0x374>)
 8000992:	f005 fa6a 	bl	8005e6a <lcd_send_string>
										break;
 8000996:	e0a1      	b.n	8000adc <main+0x41c>
									}
									case 0:
									{
										lcd_send_string("*");
 8000998:	4826      	ldr	r0, [pc, #152]	; (8000a34 <main+0x374>)
 800099a:	f005 fa66 	bl	8005e6a <lcd_send_string>
										break;
 800099e:	e09d      	b.n	8000adc <main+0x41c>
									}
									case 11:
									{
										volatile int value_bang = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	603b      	str	r3, [r7, #0]
										for(int i=0 ;i < 6 ; i++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	e04b      	b.n	8000a42 <main+0x382>
										{
											if(mat_khau_user[i] != mat_khau_dung[i])
 80009aa:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <main+0x370>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	4921      	ldr	r1, [pc, #132]	; (8000a38 <main+0x378>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	440b      	add	r3, r1
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d03e      	beq.n	8000a3c <main+0x37c>
											{
												value_bang=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
												break;
 80009c2:	e041      	b.n	8000a48 <main+0x388>
 80009c4:	20000380 	.word	0x20000380
 80009c8:	200003c8 	.word	0x200003c8
 80009cc:	200004a0 	.word	0x200004a0
 80009d0:	20000458 	.word	0x20000458
 80009d4:	20000338 	.word	0x20000338
 80009d8:	080071a0 	.word	0x080071a0
 80009dc:	20000638 	.word	0x20000638
 80009e0:	200004f8 	.word	0x200004f8
 80009e4:	20000630 	.word	0x20000630
 80009e8:	200005ec 	.word	0x200005ec
 80009ec:	20000588 	.word	0x20000588
 80009f0:	080071ac 	.word	0x080071ac
 80009f4:	20000600 	.word	0x20000600
 80009f8:	080071c0 	.word	0x080071c0
 80009fc:	20000614 	.word	0x20000614
 8000a00:	20000284 	.word	0x20000284
 8000a04:	200002b4 	.word	0x200002b4
 8000a08:	20000628 	.word	0x20000628
 8000a0c:	2000062c 	.word	0x2000062c
 8000a10:	200001fc 	.word	0x200001fc
 8000a14:	200001f8 	.word	0x200001f8
 8000a18:	20000200 	.word	0x20000200
 8000a1c:	20000684 	.word	0x20000684
 8000a20:	20000688 	.word	0x20000688
 8000a24:	2000063c 	.word	0x2000063c
 8000a28:	080071d0 	.word	0x080071d0
 8000a2c:	20000634 	.word	0x20000634
 8000a30:	2000067c 	.word	0x2000067c
 8000a34:	080071e0 	.word	0x080071e0
 8000a38:	20000204 	.word	0x20000204
										for(int i=0 ;i < 6 ; i++)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	ddb0      	ble.n	80009aa <main+0x2ea>
											}
										}
										for(int i=0;i<6;i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	e007      	b.n	8000a5e <main+0x39e>
										{
											mat_khau_user[i] =0;
 8000a4e:	4a4d      	ldr	r2, [pc, #308]	; (8000b84 <main+0x4c4>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
										for(int i=0;i<6;i++)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	ddf4      	ble.n	8000a4e <main+0x38e>
										}
										if(value_bang) {
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d016      	beq.n	8000a98 <main+0x3d8>
											count_state_lcd =2;
 8000a6a:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <main+0x4c8>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	601a      	str	r2, [r3, #0]
											flag_ngat_timer3=1;
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <main+0x4cc>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
											lcd_clear();
 8000a76:	f005 f985 	bl	8005d84 <lcd_clear>
											lcd_put_cur(0,1);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f005 f998 	bl	8005db2 <lcd_put_cur>
											lcd_send_string("Mat khau dung ->>");
 8000a82:	4843      	ldr	r0, [pc, #268]	; (8000b90 <main+0x4d0>)
 8000a84:	f005 f9f1 	bl	8005e6a <lcd_send_string>
											flag_di_qua_nhap_mat_khau=1;
 8000a88:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <main+0x4d4>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
											HAL_Delay(2000);
 8000a8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a92:	f001 fddd 	bl	8002650 <HAL_Delay>
											lcd_send_string("Mat khau sai ");
											lcd_put_cur(1,1);
											lcd_send_string("Moi nhap lai  ");
											HAL_Delay(2000);
										}
										break;
 8000a96:	e021      	b.n	8000adc <main+0x41c>
											count_state_lcd =1;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <main+0x4c8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
											flag_chuyen_lcd=1;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <main+0x4d8>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
											flag_ngat_timer3=1;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <main+0x4cc>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]
											lcd_clear();
 8000aaa:	f005 f96b 	bl	8005d84 <lcd_clear>
											lcd_put_cur(0,1);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f005 f97e 	bl	8005db2 <lcd_put_cur>
											lcd_send_string("Mat khau sai ");
 8000ab6:	4839      	ldr	r0, [pc, #228]	; (8000b9c <main+0x4dc>)
 8000ab8:	f005 f9d7 	bl	8005e6a <lcd_send_string>
											lcd_put_cur(1,1);
 8000abc:	2101      	movs	r1, #1
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f005 f977 	bl	8005db2 <lcd_put_cur>
											lcd_send_string("Moi nhap lai  ");
 8000ac4:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <main+0x4e0>)
 8000ac6:	f005 f9d0 	bl	8005e6a <lcd_send_string>
											HAL_Delay(2000);
 8000aca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ace:	f001 fdbf 	bl	8002650 <HAL_Delay>
										break;
 8000ad2:	e003      	b.n	8000adc <main+0x41c>
									}
									default :
									{
										lcd_send_string("0");
 8000ad4:	4833      	ldr	r0, [pc, #204]	; (8000ba4 <main+0x4e4>)
 8000ad6:	f005 f9c8 	bl	8005e6a <lcd_send_string>
										break;
 8000ada:	bf00      	nop
									}

								}

							}
								break;
 8000adc:	e04f      	b.n	8000b7e <main+0x4be>
						}
						case 2:
						{
							 lcd_clear();
 8000ade:	f005 f951 	bl	8005d84 <lcd_clear>
							 lcd_put_cur(0,0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f005 f964 	bl	8005db2 <lcd_put_cur>
							 lcd_send_string("Den  Quat  Bom");
 8000aea:	482f      	ldr	r0, [pc, #188]	; (8000ba8 <main+0x4e8>)
 8000aec:	f005 f9bd 	bl	8005e6a <lcd_send_string>
							 lcd_put_cur(1,0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2001      	movs	r0, #1
 8000af4:	f005 f95d 	bl	8005db2 <lcd_put_cur>
							 if( led % 2)
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <main+0x4ec>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <main+0x44c>
							 {
								 lcd_send_string("Bat  ");
 8000b04:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <main+0x4f0>)
 8000b06:	f005 f9b0 	bl	8005e6a <lcd_send_string>
 8000b0a:	e002      	b.n	8000b12 <main+0x452>
							 } else {
								 lcd_send_string("Tat  ");
 8000b0c:	4829      	ldr	r0, [pc, #164]	; (8000bb4 <main+0x4f4>)
 8000b0e:	f005 f9ac 	bl	8005e6a <lcd_send_string>
							 }
							 if( quat % 2)
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <main+0x4f8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <main+0x466>
							 {
								 lcd_send_string("Bat  ");
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <main+0x4f0>)
 8000b20:	f005 f9a3 	bl	8005e6a <lcd_send_string>
 8000b24:	e002      	b.n	8000b2c <main+0x46c>
							 } else {
								 lcd_send_string("Tat  ");
 8000b26:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <main+0x4f4>)
 8000b28:	f005 f99f 	bl	8005e6a <lcd_send_string>
							 }
							 if( bom % 2)
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <main+0x4fc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <main+0x480>
							 {
								 lcd_send_string("Bat  ");
 8000b38:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <main+0x4f0>)
 8000b3a:	f005 f996 	bl	8005e6a <lcd_send_string>
							 } else {
								 lcd_send_string("Tat  ");
							 }
							 break;
 8000b3e:	e020      	b.n	8000b82 <main+0x4c2>
								 lcd_send_string("Tat  ");
 8000b40:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <main+0x4f4>)
 8000b42:	f005 f992 	bl	8005e6a <lcd_send_string>
							 break;
 8000b46:	e01c      	b.n	8000b82 <main+0x4c2>
						}
						case 3:
						{
							lcd_clear();
 8000b48:	f005 f91c 	bl	8005d84 <lcd_clear>
							 lcd_put_cur(0,5);
 8000b4c:	2105      	movs	r1, #5
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f005 f92f 	bl	8005db2 <lcd_put_cur>
							 lcd_send_string("Mode ");
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <main+0x500>)
 8000b56:	f005 f988 	bl	8005e6a <lcd_send_string>
							 lcd_put_cur(1,5);
 8000b5a:	2105      	movs	r1, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f005 f928 	bl	8005db2 <lcd_put_cur>
							 if( mode % 2)
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <main+0x504>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <main+0x4b6>
							 {
								 lcd_send_string("Tu Dong");
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <main+0x508>)
 8000b70:	f005 f97b 	bl	8005e6a <lcd_send_string>
							 } else {
								 lcd_send_string("Bang Tay");
							 }
							 break;
 8000b74:	e005      	b.n	8000b82 <main+0x4c2>
								 lcd_send_string("Bang Tay");
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <main+0x50c>)
 8000b78:	f005 f977 	bl	8005e6a <lcd_send_string>
							 break;
 8000b7c:	e001      	b.n	8000b82 <main+0x4c2>
								break;
 8000b7e:	bf00      	nop
 8000b80:	e5d9      	b.n	8000736 <main+0x76>
	  update();
 8000b82:	e5d8      	b.n	8000736 <main+0x76>
 8000b84:	2000067c 	.word	0x2000067c
 8000b88:	200001f8 	.word	0x200001f8
 8000b8c:	200001fc 	.word	0x200001fc
 8000b90:	080071e4 	.word	0x080071e4
 8000b94:	2000068c 	.word	0x2000068c
 8000b98:	20000200 	.word	0x20000200
 8000b9c:	080071f8 	.word	0x080071f8
 8000ba0:	08007208 	.word	0x08007208
 8000ba4:	08007218 	.word	0x08007218
 8000ba8:	0800721c 	.word	0x0800721c
 8000bac:	20000520 	.word	0x20000520
 8000bb0:	0800722c 	.word	0x0800722c
 8000bb4:	08007234 	.word	0x08007234
 8000bb8:	20000524 	.word	0x20000524
 8000bbc:	20000528 	.word	0x20000528
 8000bc0:	0800723c 	.word	0x0800723c
 8000bc4:	2000052c 	.word	0x2000052c
 8000bc8:	08007244 	.word	0x08007244
 8000bcc:	0800724c 	.word	0x0800724c

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	; 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2228      	movs	r2, #40	; 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 f9a4 	bl	8005f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c1c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 f8e2 	bl	8003df0 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c32:	f001 f9ff 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2102      	movs	r1, #2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fb4e 	bl	80042f4 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c5e:	f001 f9e9 	bl	8002034 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c62:	2302      	movs	r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000c66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 fcce 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c7a:	f001 f9db 	bl	8002034 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	; 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <MX_ADC1_Init+0x78>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000cb2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000cc6:	f001 fce7 	bl	8002698 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f001 f9b0 	bl	8002034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC1_Init+0x74>)
 8000ce6:	f001 fe95 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cf0:	f001 f9a0 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000284 	.word	0x20000284
 8000d00:	40012400 	.word	0x40012400

08000d04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <MX_ADC2_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d42:	f001 fca9 	bl	8002698 <HAL_ADC_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f001 f972 	bl	8002034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d50:	2307      	movs	r3, #7
 8000d52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_ADC2_Init+0x74>)
 8000d62:	f001 fe57 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000d6c:	f001 f962 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002b4 	.word	0x200002b4
 8000d7c:	40012800 	.word	0x40012800

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <MX_I2C1_Init+0x54>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <MX_I2C1_Init+0x58>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_I2C1_Init+0x50>)
 8000dbe:	f002 fb7b 	bl	80034b8 <HAL_I2C_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f001 f934 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200002e4 	.word	0x200002e4
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	000186a0 	.word	0x000186a0

08000ddc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_TIM1_Init+0xa0>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e00:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e28:	f003 fca8 	bl	800477c <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e32:	f001 f8ff 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e44:	f003 fe72 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e4e:	f001 f8f1 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_TIM1_Init+0x9c>)
 8000e60:	f004 f848 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e6a:	f001 f8e3 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000338 	.word	0x20000338
 8000e7c:	40012c00 	.word	0x40012c00

08000e80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ea6:	223f      	movs	r2, #63	; 0x3f
 8000ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ec6:	f003 fc59 	bl	800477c <HAL_TIM_Base_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ed0:	f001 f8b0 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ee2:	f003 fe23 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eec:	f001 f8a2 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000efe:	f003 fff9 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f08:	f001 f894 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000380 	.word	0x20000380

08000f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <MX_TIM3_Init+0x98>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f3c:	223f      	movs	r2, #63	; 0x3f
 8000f3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f5c:	f003 fc0e 	bl	800477c <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f66:	f001 f865 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f78:	f003 fdd8 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f001 f857 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f94:	f003 ffae 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f9e:	f001 f849 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200003c8 	.word	0x200003c8
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_TIM4_Init+0x94>)
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <MX_TIM4_Init+0x98>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_TIM4_Init+0x94>)
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_TIM4_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM4_Init+0x94>)
 8000fe4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000fe8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_TIM4_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM4_Init+0x94>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_TIM4_Init+0x94>)
 8000ff8:	f003 fbc0 	bl	800477c <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001002:	f001 f817 	bl	8002034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_TIM4_Init+0x94>)
 8001014:	f003 fd8a 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800101e:	f001 f809 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_TIM4_Init+0x94>)
 8001030:	f003 ff60 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800103a:	f000 fffb 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000410 	.word	0x20000410
 800104c:	40000800 	.word	0x40000800

08001050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_USART1_UART_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_USART1_UART_Init+0x4c>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART1_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART1_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001088:	f003 ffa4 	bl	8004fd4 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001092:	f000 ffcf 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000458 	.word	0x20000458
 80010a0:	40013800 	.word	0x40013800

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <MX_GPIO_Init+0x208>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a7b      	ldr	r2, [pc, #492]	; (80012ac <MX_GPIO_Init+0x208>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b79      	ldr	r3, [pc, #484]	; (80012ac <MX_GPIO_Init+0x208>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d0:	4b76      	ldr	r3, [pc, #472]	; (80012ac <MX_GPIO_Init+0x208>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a75      	ldr	r2, [pc, #468]	; (80012ac <MX_GPIO_Init+0x208>)
 80010d6:	f043 0320 	orr.w	r3, r3, #32
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b73      	ldr	r3, [pc, #460]	; (80012ac <MX_GPIO_Init+0x208>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b70      	ldr	r3, [pc, #448]	; (80012ac <MX_GPIO_Init+0x208>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <MX_GPIO_Init+0x208>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <MX_GPIO_Init+0x208>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <MX_GPIO_Init+0x208>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a69      	ldr	r2, [pc, #420]	; (80012ac <MX_GPIO_Init+0x208>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b67      	ldr	r3, [pc, #412]	; (80012ac <MX_GPIO_Init+0x208>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111e:	4864      	ldr	r0, [pc, #400]	; (80012b0 <MX_GPIO_Init+0x20c>)
 8001120:	f002 f999 	bl	8003456 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f649 0101 	movw	r1, #38913	; 0x9801
 800112a:	4862      	ldr	r0, [pc, #392]	; (80012b4 <MX_GPIO_Init+0x210>)
 800112c:	f002 f993 	bl	8003456 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001130:	2200      	movs	r2, #0
 8001132:	f643 7139 	movw	r1, #16185	; 0x3f39
 8001136:	4860      	ldr	r0, [pc, #384]	; (80012b8 <MX_GPIO_Init+0x214>)
 8001138:	f002 f98d 	bl	8003456 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2302      	movs	r3, #2
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	4856      	ldr	r0, [pc, #344]	; (80012b0 <MX_GPIO_Init+0x20c>)
 8001156:	f001 ffe3 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11;
 800115a:	f640 0301 	movw	r3, #2049	; 0x801
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4850      	ldr	r0, [pc, #320]	; (80012b4 <MX_GPIO_Init+0x210>)
 8001174:	f001 ffd4 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <MX_GPIO_Init+0x218>)
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	484a      	ldr	r0, [pc, #296]	; (80012b4 <MX_GPIO_Init+0x210>)
 800118c:	f001 ffc8 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001190:	233c      	movs	r3, #60	; 0x3c
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <MX_GPIO_Init+0x21c>)
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	4844      	ldr	r0, [pc, #272]	; (80012b4 <MX_GPIO_Init+0x210>)
 80011a4:	f001 ffbc 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB12 PB13
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 80011a8:	f243 7339 	movw	r3, #14137	; 0x3739
 80011ac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	483d      	ldr	r0, [pc, #244]	; (80012b8 <MX_GPIO_Init+0x214>)
 80011c2:	f001 ffad 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4836      	ldr	r0, [pc, #216]	; (80012b8 <MX_GPIO_Init+0x214>)
 80011e0:	f001 ff9e 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	482f      	ldr	r0, [pc, #188]	; (80012b8 <MX_GPIO_Init+0x214>)
 80011fa:	f001 ff91 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4828      	ldr	r0, [pc, #160]	; (80012b4 <MX_GPIO_Init+0x210>)
 8001214:	f001 ff84 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4820      	ldr	r0, [pc, #128]	; (80012b4 <MX_GPIO_Init+0x210>)
 8001232:	f001 ff75 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_GPIO_Init+0x210>)
 8001250:	f001 ff66 	bl	8003120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2102      	movs	r1, #2
 8001258:	2007      	movs	r0, #7
 800125a:	f001 fe6a 	bl	8002f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800125e:	2007      	movs	r0, #7
 8001260:	f001 fe83 	bl	8002f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 13, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	210d      	movs	r1, #13
 8001268:	2008      	movs	r0, #8
 800126a:	f001 fe62 	bl	8002f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800126e:	2008      	movs	r0, #8
 8001270:	f001 fe7b 	bl	8002f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 13, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	210d      	movs	r1, #13
 8001278:	2009      	movs	r0, #9
 800127a:	f001 fe5a 	bl	8002f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800127e:	2009      	movs	r0, #9
 8001280:	f001 fe73 	bl	8002f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 13, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	210d      	movs	r1, #13
 8001288:	200a      	movs	r0, #10
 800128a:	f001 fe52 	bl	8002f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800128e:	200a      	movs	r0, #10
 8001290:	f001 fe6b 	bl	8002f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 13, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	210d      	movs	r1, #13
 8001298:	2017      	movs	r0, #23
 800129a:	f001 fe4a 	bl	8002f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800129e:	2017      	movs	r0, #23
 80012a0:	f001 fe63 	bl	8002f6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40011000 	.word	0x40011000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	10310000 	.word	0x10310000
 80012c0:	10210000 	.word	0x10210000

080012c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t save_data_test[20];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af06      	add	r7, sp, #24
 80012ca:	6078      	str	r0, [r7, #4]
//		}
//		HAL_UART_Transmit(huart, dataTX, strlen(dataTX), 10);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_UART_Receive_IT(huart, dataRX, sizeof(dataRX));
//	}
	if(huart->Instance == huart1.Instance)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <HAL_UART_RxCpltCallback+0x244>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8113 	bne.w	8001500 <HAL_UART_RxCpltCallback+0x23c>
	{
		if(flag_check_OK)
 80012da:	4b8c      	ldr	r3, [pc, #560]	; (800150c <HAL_UART_RxCpltCallback+0x248>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01a      	beq.n	8001318 <HAL_UART_RxCpltCallback+0x54>
		{
			save_data_chuoi_OK[0] = save_data_chuoi_OK[1];
 80012e2:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <HAL_UART_RxCpltCallback+0x24c>)
 80012e4:	785a      	ldrb	r2, [r3, #1]
 80012e6:	4b8a      	ldr	r3, [pc, #552]	; (8001510 <HAL_UART_RxCpltCallback+0x24c>)
 80012e8:	701a      	strb	r2, [r3, #0]
			save_data_chuoi_OK[1]=*dataRX;
 80012ea:	4b8a      	ldr	r3, [pc, #552]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_UART_RxCpltCallback+0x24c>)
 80012f0:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(huart, dataRX, 1);
 80012f2:	2201      	movs	r2, #1
 80012f4:	4987      	ldr	r1, [pc, #540]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f003 ff3f 	bl	800517a <HAL_UART_Receive_IT>
//			for(int i=0; i < 19; i++){
//				save_data_test[i] = save_data_test[i+1];
//			}
//			save_data_test[19] = *dataRX;
			if(*dataRX == 'K') {
 80012fc:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b4b      	cmp	r3, #75	; 0x4b
 8001302:	d109      	bne.n	8001318 <HAL_UART_RxCpltCallback+0x54>
				if(strcmp(save_data_chuoi_OK,so_sanh_chuoi_OK)==0){
 8001304:	4984      	ldr	r1, [pc, #528]	; (8001518 <HAL_UART_RxCpltCallback+0x254>)
 8001306:	4882      	ldr	r0, [pc, #520]	; (8001510 <HAL_UART_RxCpltCallback+0x24c>)
 8001308:	f7fe ff20 	bl	800014c <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <HAL_UART_RxCpltCallback+0x54>
					flag_pass=1;
 8001312:	4b82      	ldr	r3, [pc, #520]	; (800151c <HAL_UART_RxCpltCallback+0x258>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
				}
			}
//			HAL_UART_Transmit(huart, dataTX, strlen(dataTX), 10);
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		}
		if(flag_check_CMQTT)
 8001318:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_UART_RxCpltCallback+0x25c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d02b      	beq.n	8001378 <HAL_UART_RxCpltCallback+0xb4>
		{
			for(int i=0; i < 4; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00b      	b.n	800133e <HAL_UART_RxCpltCallback+0x7a>
				save_data_chuoi_CMQTT[i] = save_data_chuoi_CMQTT[i+1];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	4a7e      	ldr	r2, [pc, #504]	; (8001524 <HAL_UART_RxCpltCallback+0x260>)
 800132c:	5cd1      	ldrb	r1, [r2, r3]
 800132e:	4a7d      	ldr	r2, [pc, #500]	; (8001524 <HAL_UART_RxCpltCallback+0x260>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	4413      	add	r3, r2
 8001334:	460a      	mov	r2, r1
 8001336:	701a      	strb	r2, [r3, #0]
			for(int i=0; i < 4; i++){
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b03      	cmp	r3, #3
 8001342:	ddf0      	ble.n	8001326 <HAL_UART_RxCpltCallback+0x62>
			}
			save_data_chuoi_CMQTT[4]=*dataRX;
 8001344:	4b73      	ldr	r3, [pc, #460]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_UART_RxCpltCallback+0x260>)
 800134a:	711a      	strb	r2, [r3, #4]
			if(strcmp(save_data_chuoi_CMQTT,so_sanh_chuoi_CMQTT)==0){
 800134c:	4976      	ldr	r1, [pc, #472]	; (8001528 <HAL_UART_RxCpltCallback+0x264>)
 800134e:	4875      	ldr	r0, [pc, #468]	; (8001524 <HAL_UART_RxCpltCallback+0x260>)
 8001350:	f7fe fefc 	bl	800014c <strcmp>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_UART_RxCpltCallback+0xaa>
				HAL_UART_Transmit(huart, dataTX1, strlen(dataTX1), 10);
 800135a:	4874      	ldr	r0, [pc, #464]	; (800152c <HAL_UART_RxCpltCallback+0x268>)
 800135c:	f7fe ff00 	bl	8000160 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	230a      	movs	r3, #10
 8001366:	4971      	ldr	r1, [pc, #452]	; (800152c <HAL_UART_RxCpltCallback+0x268>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 fe83 	bl	8005074 <HAL_UART_Transmit>
			}
//			HAL_UART_Transmit(huart, dataTX, strlen(dataTX), 10);
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_UART_Receive_IT(huart, dataRX, sizeof(dataRX));
 800136e:	2201      	movs	r2, #1
 8001370:	4968      	ldr	r1, [pc, #416]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f003 ff01 	bl	800517a <HAL_UART_Receive_IT>
		}
		if(flag_check_PB_DONE)
 8001378:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_UART_RxCpltCallback+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d02b      	beq.n	80013d8 <HAL_UART_RxCpltCallback+0x114>
		{
			for(int i=0; i < 6; i++){
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e00b      	b.n	800139e <HAL_UART_RxCpltCallback+0xda>
				save_data_chuoi_PB_DONE[i] = save_data_chuoi_PB_DONE[i+1];
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	3301      	adds	r3, #1
 800138a:	4a6a      	ldr	r2, [pc, #424]	; (8001534 <HAL_UART_RxCpltCallback+0x270>)
 800138c:	5cd1      	ldrb	r1, [r2, r3]
 800138e:	4a69      	ldr	r2, [pc, #420]	; (8001534 <HAL_UART_RxCpltCallback+0x270>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4413      	add	r3, r2
 8001394:	460a      	mov	r2, r1
 8001396:	701a      	strb	r2, [r3, #0]
			for(int i=0; i < 6; i++){
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	3301      	adds	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	ddf0      	ble.n	8001386 <HAL_UART_RxCpltCallback+0xc2>
			}
			save_data_chuoi_PB_DONE[6]=*dataRX;
 80013a4:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b62      	ldr	r3, [pc, #392]	; (8001534 <HAL_UART_RxCpltCallback+0x270>)
 80013aa:	719a      	strb	r2, [r3, #6]
			if(strcmp(save_data_chuoi_PB_DONE,so_sanh_chuoi_PB_DONE)==0){
 80013ac:	4962      	ldr	r1, [pc, #392]	; (8001538 <HAL_UART_RxCpltCallback+0x274>)
 80013ae:	4861      	ldr	r0, [pc, #388]	; (8001534 <HAL_UART_RxCpltCallback+0x270>)
 80013b0:	f7fe fecc 	bl	800014c <strcmp>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_UART_RxCpltCallback+0x10a>
				HAL_UART_Transmit(huart, dataTX1, strlen(dataTX1), 10);
 80013ba:	485c      	ldr	r0, [pc, #368]	; (800152c <HAL_UART_RxCpltCallback+0x268>)
 80013bc:	f7fe fed0 	bl	8000160 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	230a      	movs	r3, #10
 80013c6:	4959      	ldr	r1, [pc, #356]	; (800152c <HAL_UART_RxCpltCallback+0x268>)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f003 fe53 	bl	8005074 <HAL_UART_Transmit>
			}
			HAL_UART_Receive_IT(huart, dataRX, sizeof(dataRX));
 80013ce:	2201      	movs	r2, #1
 80013d0:	4950      	ldr	r1, [pc, #320]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f003 fed1 	bl	800517a <HAL_UART_Receive_IT>
		}
		if(flag_check_RX_PAYLOAD)
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_UART_RxCpltCallback+0x278>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 808f 	beq.w	8001500 <HAL_UART_RxCpltCallback+0x23c>
		{
			if(flag_pass_RX_PAYLOAD==0)
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_UART_RxCpltCallback+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11f      	bne.n	800142a <HAL_UART_RxCpltCallback+0x166>
			{
				for(int i=0; i < 14; i++){
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	e00b      	b.n	8001408 <HAL_UART_RxCpltCallback+0x144>
					save_data_chuoi_RX_PAYLOAD[i] = save_data_chuoi_RX_PAYLOAD[i+1];
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a53      	ldr	r2, [pc, #332]	; (8001544 <HAL_UART_RxCpltCallback+0x280>)
 80013f6:	5cd1      	ldrb	r1, [r2, r3]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_UART_RxCpltCallback+0x280>)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	460a      	mov	r2, r1
 8001400:	701a      	strb	r2, [r3, #0]
				for(int i=0; i < 14; i++){
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b0d      	cmp	r3, #13
 800140c:	ddf0      	ble.n	80013f0 <HAL_UART_RxCpltCallback+0x12c>
				}
				save_data_chuoi_RX_PAYLOAD[14]=*dataRX;
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_UART_RxCpltCallback+0x280>)
 8001414:	739a      	strb	r2, [r3, #14]
				if(strcmp(save_data_chuoi_RX_PAYLOAD,so_sanh_chuoi_RX_PAYLOAD)==0){
 8001416:	494c      	ldr	r1, [pc, #304]	; (8001548 <HAL_UART_RxCpltCallback+0x284>)
 8001418:	484a      	ldr	r0, [pc, #296]	; (8001544 <HAL_UART_RxCpltCallback+0x280>)
 800141a:	f7fe fe97 	bl	800014c <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <HAL_UART_RxCpltCallback+0x166>
					flag_pass_RX_PAYLOAD = 1;
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_UART_RxCpltCallback+0x27c>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
	//				HAL_UART_Transmit(huart, dataTX1, strlen(dataTX1), 10);
				}
			}
			if(flag_pass_RX_PAYLOAD) {
 800142a:	4b45      	ldr	r3, [pc, #276]	; (8001540 <HAL_UART_RxCpltCallback+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d05e      	beq.n	80014f0 <HAL_UART_RxCpltCallback+0x22c>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_UART_RxCpltCallback+0x288>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Stop_IT(&htim1);
 800143a:	4844      	ldr	r0, [pc, #272]	; (800154c <HAL_UART_RxCpltCallback+0x288>)
 800143c:	f003 fa40 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
				if(flag_pass_RX_PAYLOAD_next)
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_UART_RxCpltCallback+0x28c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d041      	beq.n	80014cc <HAL_UART_RxCpltCallback+0x208>
				{
					message[count_data_pass_RX_PAYLOAD] = *dataRX;
 8001448:	4b42      	ldr	r3, [pc, #264]	; (8001554 <HAL_UART_RxCpltCallback+0x290>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a31      	ldr	r2, [pc, #196]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 800144e:	7811      	ldrb	r1, [r2, #0]
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <HAL_UART_RxCpltCallback+0x294>)
 8001452:	54d1      	strb	r1, [r2, r3]
					count_data_pass_RX_PAYLOAD++;
 8001454:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_UART_RxCpltCallback+0x290>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <HAL_UART_RxCpltCallback+0x290>)
 800145c:	6013      	str	r3, [r2, #0]
					if(*dataRX == '\n'){
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d132      	bne.n	80014cc <HAL_UART_RxCpltCallback+0x208>
						count_data_pass_RX_PAYLOAD=0;
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_UART_RxCpltCallback+0x290>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
						flag_phan_biet_xuong_dong_data = 1;
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_UART_RxCpltCallback+0x298>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
						flag_pass_RX_PAYLOAD_next =0;
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_UART_RxCpltCallback+0x28c>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
						flag_pass_all_RX_PAYLOAD =1;
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_UART_RxCpltCallback+0x29c>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
						flag_pass_RX_PAYLOAD =0;
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_UART_RxCpltCallback+0x27c>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
						flag_ngat_uart_xong_message=1;
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_UART_RxCpltCallback+0x2a0>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
						sscanf(message, "%d %d %d %d %d %d %d", &led, &quat, &bom,&mode,&nguong_adc_quang_tro,&nguong_adc_do_am_dat,&nguong_nhiet_do);
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <HAL_UART_RxCpltCallback+0x2a4>)
 800148c:	9304      	str	r3, [sp, #16]
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <HAL_UART_RxCpltCallback+0x2a8>)
 8001490:	9303      	str	r3, [sp, #12]
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_UART_RxCpltCallback+0x2ac>)
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <HAL_UART_RxCpltCallback+0x2b0>)
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_UART_RxCpltCallback+0x2b4>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_UART_RxCpltCallback+0x2b8>)
 80014a0:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_UART_RxCpltCallback+0x2bc>)
 80014a2:	4938      	ldr	r1, [pc, #224]	; (8001584 <HAL_UART_RxCpltCallback+0x2c0>)
 80014a4:	482c      	ldr	r0, [pc, #176]	; (8001558 <HAL_UART_RxCpltCallback+0x294>)
 80014a6:	f004 fd15 	bl	8005ed4 <siscanf>
						for(int i=0 ; i < sizeof(message); i++ )
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	e007      	b.n	80014c0 <HAL_UART_RxCpltCallback+0x1fc>
						{
							message[i] = 0;
 80014b0:	4a29      	ldr	r2, [pc, #164]	; (8001558 <HAL_UART_RxCpltCallback+0x294>)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	4413      	add	r3, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
						for(int i=0 ; i < sizeof(message); i++ )
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3301      	adds	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b27      	cmp	r3, #39	; 0x27
 80014c4:	d9f4      	bls.n	80014b0 <HAL_UART_RxCpltCallback+0x1ec>
						}
						HAL_TIM_Base_Start_IT(&htim1);
 80014c6:	4821      	ldr	r0, [pc, #132]	; (800154c <HAL_UART_RxCpltCallback+0x288>)
 80014c8:	f003 f9a8 	bl	800481c <HAL_TIM_Base_Start_IT>

					}

				}
				save_data_chuoi_RX_PAYLOAD_DATA[0] = *dataRX;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_UART_RxCpltCallback+0x2c4>)
 80014d2:	701a      	strb	r2, [r3, #0]
				if(strcmp(save_data_chuoi_RX_PAYLOAD_DATA,so_sanh_chuoi_xuong_dong)==0)
 80014d4:	492d      	ldr	r1, [pc, #180]	; (800158c <HAL_UART_RxCpltCallback+0x2c8>)
 80014d6:	482c      	ldr	r0, [pc, #176]	; (8001588 <HAL_UART_RxCpltCallback+0x2c4>)
 80014d8:	f7fe fe38 	bl	800014c <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_UART_RxCpltCallback+0x22c>
				{
					if(!flag_phan_biet_xuong_dong_data) {
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_UART_RxCpltCallback+0x298>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_UART_RxCpltCallback+0x22c>
						flag_pass_RX_PAYLOAD_next =1;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_UART_RxCpltCallback+0x28c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
					}

				}
			}
			flag_phan_biet_xuong_dong_data = 0;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_UART_RxCpltCallback+0x298>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, dataRX, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <HAL_UART_RxCpltCallback+0x250>)
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f003 fe3d 	bl	800517a <HAL_UART_Receive_IT>
		}

	}
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000458 	.word	0x20000458
 800150c:	200004cc 	.word	0x200004cc
 8001510:	200004a4 	.word	0x200004a4
 8001514:	200004a0 	.word	0x200004a0
 8001518:	2000000c 	.word	0x2000000c
 800151c:	200004dc 	.word	0x200004dc
 8001520:	200004d0 	.word	0x200004d0
 8001524:	200004a8 	.word	0x200004a8
 8001528:	20000010 	.word	0x20000010
 800152c:	20000000 	.word	0x20000000
 8001530:	200004d4 	.word	0x200004d4
 8001534:	200004b0 	.word	0x200004b0
 8001538:	20000018 	.word	0x20000018
 800153c:	200004d8 	.word	0x200004d8
 8001540:	200004e0 	.word	0x200004e0
 8001544:	200004b8 	.word	0x200004b8
 8001548:	20000020 	.word	0x20000020
 800154c:	20000338 	.word	0x20000338
 8001550:	200004e8 	.word	0x200004e8
 8001554:	200004ec 	.word	0x200004ec
 8001558:	200004f8 	.word	0x200004f8
 800155c:	200004e4 	.word	0x200004e4
 8001560:	200004f0 	.word	0x200004f0
 8001564:	20000638 	.word	0x20000638
 8001568:	200001ec 	.word	0x200001ec
 800156c:	200001e8 	.word	0x200001e8
 8001570:	200001e4 	.word	0x200001e4
 8001574:	2000052c 	.word	0x2000052c
 8001578:	20000528 	.word	0x20000528
 800157c:	20000524 	.word	0x20000524
 8001580:	20000520 	.word	0x20000520
 8001584:	08007258 	.word	0x08007258
 8001588:	200004c8 	.word	0x200004c8
 800158c:	20000030 	.word	0x20000030

08001590 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d105      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
//		send_data_to_server();
		flag_ngat_timer1=1;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
		du_time_to_send_data=1;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b6:	d108      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x3a>
		{
			count++;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	1c54      	adds	r4, r2, #1
 80015c0:	f143 0500 	adc.w	r5, r3, #0
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80015c6:	e9c3 4500 	strd	r4, r5, [r3]
		}
	if(htim->Instance == TIM3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d105      	bne.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		flag_ngat_timer3=1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80015dc:	f003 f970 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
	}
	if(htim->Instance == TIM4)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d105      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		HAL_TIM_Base_Stop_IT(&htim4);
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015ec:	f003 f968 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
		flag_timer4=1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
	}
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	40012c00 	.word	0x40012c00
 8001604:	20000630 	.word	0x20000630
 8001608:	200004f4 	.word	0x200004f4
 800160c:	200005f8 	.word	0x200005f8
 8001610:	40000400 	.word	0x40000400
 8001614:	200001fc 	.word	0x200001fc
 8001618:	200003c8 	.word	0x200003c8
 800161c:	40000800 	.word	0x40000800
 8001620:	20000410 	.word	0x20000410
 8001624:	20000690 	.word	0x20000690

08001628 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	2b04      	cmp	r3, #4
 8001636:	f040 80df 	bne.w	80017f8 <HAL_GPIO_EXTI_Callback+0x1d0>
	{
		currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 800163a:	f000 ffff 	bl	800263c <HAL_GetTick>
 800163e:	4603      	mov	r3, r0
 8001640:	4aa5      	ldr	r2, [pc, #660]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001642:	6013      	str	r3, [r2, #0]
		if ((currentTime - lastDebounceTime) > debounceDelay)
 8001644:	4ba4      	ldr	r3, [pc, #656]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4ba4      	ldr	r3, [pc, #656]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1ad2      	subs	r2, r2, r3
 800164e:	4ba4      	ldr	r3, [pc, #656]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	f240 80d0 	bls.w	80017f8 <HAL_GPIO_EXTI_Callback+0x1d0>
		{
			// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8001658:	2104      	movs	r1, #4
 800165a:	48a2      	ldr	r0, [pc, #648]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800165c:	f001 fee4 	bl	8003428 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80c4 	bne.w	80017f0 <HAL_GPIO_EXTI_Callback+0x1c8>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166e:	489e      	ldr	r0, [pc, #632]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001670:	f001 fef1 	bl	8003456 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167a:	489b      	ldr	r0, [pc, #620]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800167c:	f001 feeb 	bl	8003456 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001686:	4898      	ldr	r0, [pc, #608]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001688:	f001 fee5 	bl	8003456 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 800168c:	2201      	movs	r2, #1
 800168e:	2101      	movs	r1, #1
 8001690:	4895      	ldr	r0, [pc, #596]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001692:	f001 fee0 	bl	8003456 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8001696:	2104      	movs	r1, #4
 8001698:	4892      	ldr	r0, [pc, #584]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800169a:	f001 fec5 	bl	8003428 <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10b      	bne.n	80016bc <HAL_GPIO_EXTI_Callback+0x94>
				{
					num1++;
 80016a4:	4b91      	ldr	r3, [pc, #580]	; (80018ec <HAL_GPIO_EXTI_Callback+0x2c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a90      	ldr	r2, [pc, #576]	; (80018ec <HAL_GPIO_EXTI_Callback+0x2c4>)
 80016ac:	6013      	str	r3, [r2, #0]
					flag_number=1;
 80016ae:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 80016b4:	488f      	ldr	r0, [pc, #572]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80016b6:	f003 f8b1 	bl	800481c <HAL_TIM_Base_Start_IT>
 80016ba:	e082      	b.n	80017c2 <HAL_GPIO_EXTI_Callback+0x19a>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c2:	4889      	ldr	r0, [pc, #548]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016c4:	f001 fec7 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ce:	4886      	ldr	r0, [pc, #536]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016d0:	f001 fec1 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016da:	4883      	ldr	r0, [pc, #524]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016dc:	f001 febb 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2101      	movs	r1, #1
 80016e4:	4880      	ldr	r0, [pc, #512]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80016e6:	f001 feb6 	bl	8003456 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 80016ea:	2104      	movs	r1, #4
 80016ec:	487d      	ldr	r0, [pc, #500]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80016ee:	f001 fe9b 	bl	8003428 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <HAL_GPIO_EXTI_Callback+0xe8>
					{
						num2++;
 80016f8:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a7e      	ldr	r2, [pc, #504]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001700:	6013      	str	r3, [r2, #0]
						flag_number=2;
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001704:	2202      	movs	r2, #2
 8001706:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 8001708:	487a      	ldr	r0, [pc, #488]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800170a:	f003 f887 	bl	800481c <HAL_TIM_Base_Start_IT>
 800170e:	e058      	b.n	80017c2 <HAL_GPIO_EXTI_Callback+0x19a>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001716:	4874      	ldr	r0, [pc, #464]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001718:	f001 fe9d 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001722:	4871      	ldr	r0, [pc, #452]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001724:	f001 fe97 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172e:	486e      	ldr	r0, [pc, #440]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001730:	f001 fe91 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001734:	2201      	movs	r2, #1
 8001736:	2101      	movs	r1, #1
 8001738:	486b      	ldr	r0, [pc, #428]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800173a:	f001 fe8c 	bl	8003456 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 800173e:	2104      	movs	r1, #4
 8001740:	4868      	ldr	r0, [pc, #416]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001742:	f001 fe71 	bl	8003428 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10b      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x13c>
						{
							num3++;
 800174c:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_GPIO_EXTI_Callback+0x2d4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001754:	6013      	str	r3, [r2, #0]
							flag_number=3;
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001758:	2203      	movs	r2, #3
 800175a:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 800175c:	4865      	ldr	r0, [pc, #404]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800175e:	f003 f85d 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001762:	e02e      	b.n	80017c2 <HAL_GPIO_EXTI_Callback+0x19a>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	485f      	ldr	r0, [pc, #380]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800176c:	f001 fe73 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001776:	485c      	ldr	r0, [pc, #368]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001778:	f001 fe6d 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001782:	4859      	ldr	r0, [pc, #356]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001784:	f001 fe67 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001788:	2200      	movs	r2, #0
 800178a:	2101      	movs	r1, #1
 800178c:	4856      	ldr	r0, [pc, #344]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800178e:	f001 fe62 	bl	8003456 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8001792:	2104      	movs	r1, #4
 8001794:	4853      	ldr	r0, [pc, #332]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001796:	f001 fe47 	bl	8003428 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d110      	bne.n	80017c2 <HAL_GPIO_EXTI_Callback+0x19a>
							{
								if( flag_di_qua_nhap_mat_khau )
 80017a0:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00c      	beq.n	80017c2 <HAL_GPIO_EXTI_Callback+0x19a>
								{
									led++;
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a55      	ldr	r2, [pc, #340]	; (8001904 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80017b0:	6013      	str	r3, [r2, #0]
									flag_number=10;
 80017b2:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80017b4:	220a      	movs	r2, #10
 80017b6:	601a      	str	r2, [r3, #0]
									HAL_TIM_Base_Start_IT(&htim3);
 80017b8:	484e      	ldr	r0, [pc, #312]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80017ba:	f003 f82f 	bl	800481c <HAL_TIM_Base_Start_IT>
									update();
 80017be:	f7fe feb5 	bl	800052c <update>
							}
						}
					}
				}

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	4847      	ldr	r0, [pc, #284]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80017ca:	f001 fe44 	bl	8003456 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d4:	4844      	ldr	r0, [pc, #272]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80017d6:	f001 fe3e 	bl	8003456 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e0:	4841      	ldr	r0, [pc, #260]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80017e2:	f001 fe38 	bl	8003456 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2101      	movs	r1, #1
 80017ea:	483f      	ldr	r0, [pc, #252]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80017ec:	f001 fe33 	bl	8003456 <HAL_GPIO_WritePin>
			}

			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a39      	ldr	r2, [pc, #228]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 80017f6:	6013      	str	r3, [r2, #0]
		}
	}


	if(GPIO_Pin == GPIO_PIN_3)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	f040 80fc 	bne.w	80019f8 <HAL_GPIO_EXTI_Callback+0x3d0>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001800:	f000 ff1c 	bl	800263c <HAL_GetTick>
 8001804:	4603      	mov	r3, r0
 8001806:	4a34      	ldr	r2, [pc, #208]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001808:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1ad2      	subs	r2, r2, r3
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	f240 80ed 	bls.w	80019f8 <HAL_GPIO_EXTI_Callback+0x3d0>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 800181e:	2108      	movs	r1, #8
 8001820:	4830      	ldr	r0, [pc, #192]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001822:	f001 fe01 	bl	8003428 <HAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 80e1 	bne.w	80019f0 <HAL_GPIO_EXTI_Callback+0x3c8>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001834:	482c      	ldr	r0, [pc, #176]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001836:	f001 fe0e 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001840:	4829      	ldr	r0, [pc, #164]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001842:	f001 fe08 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800184c:	4826      	ldr	r0, [pc, #152]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800184e:	f001 fe02 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001858:	f001 fdfd 	bl	8003456 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 800185c:	2108      	movs	r1, #8
 800185e:	4821      	ldr	r0, [pc, #132]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001860:	f001 fde2 	bl	8003428 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10b      	bne.n	8001882 <HAL_GPIO_EXTI_Callback+0x25a>
					{
						num4++;
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001872:	6013      	str	r3, [r2, #0]
						flag_number=4;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001876:	2204      	movs	r2, #4
 8001878:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 800187a:	481e      	ldr	r0, [pc, #120]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800187c:	f002 ffce 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001880:	e09f      	b.n	80019c2 <HAL_GPIO_EXTI_Callback+0x39a>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001888:	4817      	ldr	r0, [pc, #92]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800188a:	f001 fde4 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001894:	4814      	ldr	r0, [pc, #80]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001896:	f001 fdde 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018a2:	f001 fdd8 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	480f      	ldr	r0, [pc, #60]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018ac:	f001 fdd3 	bl	8003456 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80018b0:	2108      	movs	r1, #8
 80018b2:	480c      	ldr	r0, [pc, #48]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018b4:	f001 fdb8 	bl	8003428 <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d128      	bne.n	8001910 <HAL_GPIO_EXTI_Callback+0x2e8>
						{
							num5++;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80018c6:	6013      	str	r3, [r2, #0]
							flag_number=5;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80018ca:	2205      	movs	r2, #5
 80018cc:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 80018ce:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80018d0:	f002 ffa4 	bl	800481c <HAL_TIM_Base_Start_IT>
 80018d4:	e075      	b.n	80019c2 <HAL_GPIO_EXTI_Callback+0x39a>
 80018d6:	bf00      	nop
 80018d8:	20000538 	.word	0x20000538
 80018dc:	20000534 	.word	0x20000534
 80018e0:	200001f4 	.word	0x200001f4
 80018e4:	40010800 	.word	0x40010800
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	2000053c 	.word	0x2000053c
 80018f0:	20000634 	.word	0x20000634
 80018f4:	200003c8 	.word	0x200003c8
 80018f8:	20000540 	.word	0x20000540
 80018fc:	20000544 	.word	0x20000544
 8001900:	2000068c 	.word	0x2000068c
 8001904:	20000520 	.word	0x20000520
 8001908:	20000548 	.word	0x20000548
 800190c:	2000054c 	.word	0x2000054c
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	4885      	ldr	r0, [pc, #532]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001918:	f001 fd9d 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001922:	4882      	ldr	r0, [pc, #520]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001924:	f001 fd97 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192e:	487f      	ldr	r0, [pc, #508]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001930:	f001 fd91 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001934:	2201      	movs	r2, #1
 8001936:	2101      	movs	r1, #1
 8001938:	487c      	ldr	r0, [pc, #496]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 800193a:	f001 fd8c 	bl	8003456 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 800193e:	2108      	movs	r1, #8
 8001940:	487b      	ldr	r0, [pc, #492]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x508>)
 8001942:	f001 fd71 	bl	8003428 <HAL_GPIO_ReadPin>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10b      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x33c>
							{
								num6++;
 800194c:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x50c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a78      	ldr	r2, [pc, #480]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x50c>)
 8001954:	6013      	str	r3, [r2, #0]
								flag_number=6;
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x510>)
 8001958:	2206      	movs	r2, #6
 800195a:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 800195c:	4877      	ldr	r0, [pc, #476]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x514>)
 800195e:	f002 ff5d 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001962:	e02e      	b.n	80019c2 <HAL_GPIO_EXTI_Callback+0x39a>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	4870      	ldr	r0, [pc, #448]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 800196c:	f001 fd73 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001976:	486d      	ldr	r0, [pc, #436]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001978:	f001 fd6d 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001982:	486a      	ldr	r0, [pc, #424]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001984:	f001 fd67 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001988:	2200      	movs	r2, #0
 800198a:	2101      	movs	r1, #1
 800198c:	4867      	ldr	r0, [pc, #412]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 800198e:	f001 fd62 	bl	8003456 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 8001992:	2108      	movs	r1, #8
 8001994:	4866      	ldr	r0, [pc, #408]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x508>)
 8001996:	f001 fd47 	bl	8003428 <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d110      	bne.n	80019c2 <HAL_GPIO_EXTI_Callback+0x39a>
								{
									if( flag_di_qua_nhap_mat_khau )
 80019a0:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x518>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <HAL_GPIO_EXTI_Callback+0x39a>
									{
										quat++;
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x51c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x51c>)
 80019b0:	6013      	str	r3, [r2, #0]
										flag_number=10;
 80019b2:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x510>)
 80019b4:	220a      	movs	r2, #10
 80019b6:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 80019b8:	4860      	ldr	r0, [pc, #384]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x514>)
 80019ba:	f002 ff2f 	bl	800481c <HAL_TIM_Base_Start_IT>
										update();
 80019be:	f7fe fdb5 	bl	800052c <update>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c8:	4858      	ldr	r0, [pc, #352]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 80019ca:	f001 fd44 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d4:	4855      	ldr	r0, [pc, #340]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 80019d6:	f001 fd3e 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e0:	4852      	ldr	r0, [pc, #328]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 80019e2:	f001 fd38 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	4850      	ldr	r0, [pc, #320]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 80019ec:	f001 fd33 	bl	8003456 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x520>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a55      	ldr	r2, [pc, #340]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x524>)
 80019f6:	6013      	str	r3, [r2, #0]
			}
		}


	if(GPIO_Pin == GPIO_PIN_4)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	f040 80fa 	bne.w	8001bf4 <HAL_GPIO_EXTI_Callback+0x5cc>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001a00:	f000 fe1c 	bl	800263c <HAL_GetTick>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a50      	ldr	r2, [pc, #320]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x520>)
 8001a08:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001a0a:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x520>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b4f      	ldr	r3, [pc, #316]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x524>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1ad2      	subs	r2, r2, r3
 8001a14:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x528>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	f240 80eb 	bls.w	8001bf4 <HAL_GPIO_EXTI_Callback+0x5cc>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001a1e:	2110      	movs	r1, #16
 8001a20:	4843      	ldr	r0, [pc, #268]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x508>)
 8001a22:	f001 fd01 	bl	8003428 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 80df 	bne.w	8001bec <HAL_GPIO_EXTI_Callback+0x5c4>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	483d      	ldr	r0, [pc, #244]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001a36:	f001 fd0e 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	483a      	ldr	r0, [pc, #232]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001a42:	f001 fd08 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4c:	4837      	ldr	r0, [pc, #220]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001a4e:	f001 fd02 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2101      	movs	r1, #1
 8001a56:	4835      	ldr	r0, [pc, #212]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001a58:	f001 fcfd 	bl	8003456 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4834      	ldr	r0, [pc, #208]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x508>)
 8001a60:	f001 fce2 	bl	8003428 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10b      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x45a>
					{
						num7++;
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x52c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a38      	ldr	r2, [pc, #224]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x52c>)
 8001a72:	6013      	str	r3, [r2, #0]
						flag_number=7;
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x510>)
 8001a76:	2207      	movs	r2, #7
 8001a78:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 8001a7a:	4830      	ldr	r0, [pc, #192]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x514>)
 8001a7c:	f002 fece 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001a80:	e09d      	b.n	8001bbe <HAL_GPIO_EXTI_Callback+0x596>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a88:	4828      	ldr	r0, [pc, #160]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001a8a:	f001 fce4 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a94:	4825      	ldr	r0, [pc, #148]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001a96:	f001 fcde 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa0:	4822      	ldr	r0, [pc, #136]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001aa2:	f001 fcd8 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001aac:	f001 fcd3 	bl	8003456 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	481f      	ldr	r0, [pc, #124]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x508>)
 8001ab4:	f001 fcb8 	bl	8003428 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_GPIO_EXTI_Callback+0x4ae>
						{
							num8++;
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x530>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x530>)
 8001ac6:	6013      	str	r3, [r2, #0]
							flag_number=8;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x510>)
 8001aca:	2208      	movs	r2, #8
 8001acc:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8001ace:	481b      	ldr	r0, [pc, #108]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x514>)
 8001ad0:	f002 fea4 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001ad4:	e073      	b.n	8001bbe <HAL_GPIO_EXTI_Callback+0x596>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001ade:	f001 fcba 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae8:	4810      	ldr	r0, [pc, #64]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001aea:	f001 fcb4 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001af6:	f001 fcae 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	2101      	movs	r1, #1
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x504>)
 8001b00:	f001 fca9 	bl	8003456 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001b04:	2110      	movs	r1, #16
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x508>)
 8001b08:	f001 fc8e 	bl	8003428 <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d126      	bne.n	8001b60 <HAL_GPIO_EXTI_Callback+0x538>
							{
								num9++;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x534>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x534>)
 8001b1a:	6013      	str	r3, [r2, #0]
								flag_number=9;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x510>)
 8001b1e:	2209      	movs	r2, #9
 8001b20:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x514>)
 8001b24:	f002 fe7a 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001b28:	e049      	b.n	8001bbe <HAL_GPIO_EXTI_Callback+0x596>
 8001b2a:	bf00      	nop
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40010800 	.word	0x40010800
 8001b34:	20000550 	.word	0x20000550
 8001b38:	20000634 	.word	0x20000634
 8001b3c:	200003c8 	.word	0x200003c8
 8001b40:	2000068c 	.word	0x2000068c
 8001b44:	20000524 	.word	0x20000524
 8001b48:	20000538 	.word	0x20000538
 8001b4c:	20000534 	.word	0x20000534
 8001b50:	200001f4 	.word	0x200001f4
 8001b54:	20000554 	.word	0x20000554
 8001b58:	20000558 	.word	0x20000558
 8001b5c:	2000055c 	.word	0x2000055c
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b66:	4876      	ldr	r0, [pc, #472]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001b68:	f001 fc75 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b72:	4873      	ldr	r0, [pc, #460]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001b74:	f001 fc6f 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7e:	4870      	ldr	r0, [pc, #448]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001b80:	f001 fc69 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	486d      	ldr	r0, [pc, #436]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001b8a:	f001 fc64 	bl	8003456 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8001b8e:	2110      	movs	r1, #16
 8001b90:	486c      	ldr	r0, [pc, #432]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x71c>)
 8001b92:	f001 fc49 	bl	8003428 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d110      	bne.n	8001bbe <HAL_GPIO_EXTI_Callback+0x596>
								{
									if( flag_di_qua_nhap_mat_khau )
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x720>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <HAL_GPIO_EXTI_Callback+0x596>
									{
										bom++;
 8001ba4:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x724>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a68      	ldr	r2, [pc, #416]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x724>)
 8001bac:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8001bae:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x728>)
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8001bb4:	4867      	ldr	r0, [pc, #412]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x72c>)
 8001bb6:	f002 fe31 	bl	800481c <HAL_TIM_Base_Start_IT>
										update();
 8001bba:	f7fe fcb7 	bl	800052c <update>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc4:	485e      	ldr	r0, [pc, #376]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001bc6:	f001 fc46 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd0:	485b      	ldr	r0, [pc, #364]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001bd2:	f001 fc40 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bdc:	4858      	ldr	r0, [pc, #352]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001bde:	f001 fc3a 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2101      	movs	r1, #1
 8001be6:	4856      	ldr	r0, [pc, #344]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001be8:	f001 fc35 	bl	8003456 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001bec:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x730>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x734>)
 8001bf2:	6013      	str	r3, [r2, #0]
			}
		}



	if(GPIO_Pin == GPIO_PIN_5)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	f040 8108 	bne.w	8001e0c <HAL_GPIO_EXTI_Callback+0x7e4>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001bfc:	f000 fd1e 	bl	800263c <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x730>)
 8001c04:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x730>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x734>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x738>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f240 80f9 	bls.w	8001e0c <HAL_GPIO_EXTI_Callback+0x7e4>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001c1a:	2120      	movs	r1, #32
 8001c1c:	4849      	ldr	r0, [pc, #292]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x71c>)
 8001c1e:	f001 fc03 	bl	8003428 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 80ed 	bne.w	8001e04 <HAL_GPIO_EXTI_Callback+0x7dc>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c30:	4843      	ldr	r0, [pc, #268]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001c32:	f001 fc10 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3c:	4840      	ldr	r0, [pc, #256]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001c3e:	f001 fc0a 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c48:	483d      	ldr	r0, [pc, #244]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001c4a:	f001 fc04 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2101      	movs	r1, #1
 8001c52:	483b      	ldr	r0, [pc, #236]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001c54:	f001 fbff 	bl	8003456 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001c58:	2120      	movs	r1, #32
 8001c5a:	483a      	ldr	r0, [pc, #232]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x71c>)
 8001c5c:	f001 fbe4 	bl	8003428 <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x670>
					{
						if( flag_di_qua_nhap_mat_khau )
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x720>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80b3 	beq.w	8001dd6 <HAL_GPIO_EXTI_Callback+0x7ae>
						{
							num_sao++;
 8001c70:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x73c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x73c>)
 8001c78:	6013      	str	r3, [r2, #0]
							count_state_lcd ++;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x740>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x740>)
 8001c82:	6013      	str	r3, [r2, #0]
							flag_chuyen_lcd=1;
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x744>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
							flag_number=10;
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x728>)
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8001c90:	4830      	ldr	r0, [pc, #192]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x72c>)
 8001c92:	f002 fdc3 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001c96:	e09e      	b.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x7ae>
						}
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9e:	4828      	ldr	r0, [pc, #160]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001ca0:	f001 fbd9 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001caa:	4825      	ldr	r0, [pc, #148]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001cac:	f001 fbd3 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb6:	4822      	ldr	r0, [pc, #136]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001cb8:	f001 fbcd 	bl	8003456 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	481f      	ldr	r0, [pc, #124]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001cc2:	f001 fbc8 	bl	8003456 <HAL_GPIO_WritePin>
						if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	481e      	ldr	r0, [pc, #120]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x71c>)
 8001cca:	f001 fbad 	bl	8003428 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <HAL_GPIO_EXTI_Callback+0x6c4>
						{
							num0++;
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x748>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x748>)
 8001cdc:	6013      	str	r3, [r2, #0]
							flag_number=0;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x728>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim3);
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x72c>)
 8001ce6:	f002 fd99 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001cea:	e074      	b.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x7ae>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001cf4:	f001 fbaf 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfe:	4810      	ldr	r0, [pc, #64]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001d00:	f001 fba9 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001d0c:	f001 fba3 	bl	8003456 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2101      	movs	r1, #1
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x718>)
 8001d16:	f001 fb9e 	bl	8003456 <HAL_GPIO_WritePin>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x71c>)
 8001d1e:	f001 fb83 	bl	8003428 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d127      	bne.n	8001d78 <HAL_GPIO_EXTI_Callback+0x750>
							{
								num_thang++;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_GPIO_EXTI_Callback+0x74c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_GPIO_EXTI_Callback+0x74c>)
 8001d30:	6013      	str	r3, [r2, #0]
								flag_number=11;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x728>)
 8001d34:	220b      	movs	r2, #11
 8001d36:	601a      	str	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x72c>)
 8001d3a:	f002 fd6f 	bl	800481c <HAL_TIM_Base_Start_IT>
 8001d3e:	e04a      	b.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x7ae>
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40010800 	.word	0x40010800
 8001d48:	2000068c 	.word	0x2000068c
 8001d4c:	20000528 	.word	0x20000528
 8001d50:	20000634 	.word	0x20000634
 8001d54:	200003c8 	.word	0x200003c8
 8001d58:	20000538 	.word	0x20000538
 8001d5c:	20000534 	.word	0x20000534
 8001d60:	200001f4 	.word	0x200001f4
 8001d64:	20000564 	.word	0x20000564
 8001d68:	200001f8 	.word	0x200001f8
 8001d6c:	20000200 	.word	0x20000200
 8001d70:	20000560 	.word	0x20000560
 8001d74:	20000568 	.word	0x20000568
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7e:	4844      	ldr	r0, [pc, #272]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001d80:	f001 fb69 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8a:	4841      	ldr	r0, [pc, #260]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001d8c:	f001 fb63 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d96:	483e      	ldr	r0, [pc, #248]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001d98:	f001 fb5d 	bl	8003456 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	483b      	ldr	r0, [pc, #236]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001da2:	f001 fb58 	bl	8003456 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001da6:	2120      	movs	r1, #32
 8001da8:	483a      	ldr	r0, [pc, #232]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x86c>)
 8001daa:	f001 fb3d 	bl	8003428 <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d110      	bne.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x7ae>
								{
									if( flag_di_qua_nhap_mat_khau )
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x870>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x7ae>
									{
										mode++;
 8001dbc:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x874>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x874>)
 8001dc4:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x878>)
 8001dc8:	220a      	movs	r2, #10
 8001dca:	601a      	str	r2, [r3, #0]
										HAL_TIM_Base_Start_IT(&htim3);
 8001dcc:	4835      	ldr	r0, [pc, #212]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x87c>)
 8001dce:	f002 fd25 	bl	800481c <HAL_TIM_Base_Start_IT>
										update();
 8001dd2:	f7fe fbab 	bl	800052c <update>
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ddc:	482c      	ldr	r0, [pc, #176]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001dde:	f001 fb3a 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de8:	4829      	ldr	r0, [pc, #164]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001dea:	f001 fb34 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df4:	4826      	ldr	r0, [pc, #152]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001df6:	f001 fb2e 	bl	8003456 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	4824      	ldr	r0, [pc, #144]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x868>)
 8001e00:	f001 fb29 	bl	8003456 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x880>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_GPIO_EXTI_Callback+0x884>)
 8001e0a:	6013      	str	r3, [r2, #0]
			}
		}
	if(GPIO_Pin == GPIO_PIN_1)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d13a      	bne.n	8001e88 <HAL_GPIO_EXTI_Callback+0x860>
		{

				tick_hien_tai = __HAL_TIM_GET_COUNTER(&htim2);
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x888>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x88c>)
 8001e1a:	6013      	str	r3, [r2, #0]
				thoi_gian_tick = tick_hien_tai - tick_lan_truoc;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x88c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x894>)
 8001e28:	6013      	str	r3, [r2, #0]
				tick_lan_truoc = tick_hien_tai;
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x88c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e30:	6013      	str	r3, [r2, #0]
				tick[count_tick] = thoi_gian_tick;
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x894>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x898>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b2d1      	uxtb	r1, r2
 8001e3c:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x89c>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
				count_tick++;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x898>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x898>)
 8001e48:	6013      	str	r3, [r2, #0]
				if(count_tick >84)
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x898>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b54      	cmp	r3, #84	; 0x54
 8001e50:	dd1a      	ble.n	8001e88 <HAL_GPIO_EXTI_Callback+0x860>
				{
					  HAL_TIM_Base_Stop_IT(&htim2);
 8001e52:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x888>)
 8001e54:	f002 fd34 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
					  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001e58:	2007      	movs	r0, #7
 8001e5a:	f001 f894 	bl	8002f86 <HAL_NVIC_DisableIRQ>
					  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
					  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
					  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8001e70:	2301      	movs	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
					  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e74:	2302      	movs	r3, #2
 8001e76:	60bb      	str	r3, [r7, #8]
					  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	617b      	str	r3, [r7, #20]
					  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	4619      	mov	r1, r3
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x86c>)
 8001e84:	f001 f94c 	bl	8003120 <HAL_GPIO_Init>
				}
		}

}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40010c00 	.word	0x40010c00
 8001e94:	40010800 	.word	0x40010800
 8001e98:	2000068c 	.word	0x2000068c
 8001e9c:	2000052c 	.word	0x2000052c
 8001ea0:	20000634 	.word	0x20000634
 8001ea4:	200003c8 	.word	0x200003c8
 8001ea8:	20000538 	.word	0x20000538
 8001eac:	20000534 	.word	0x20000534
 8001eb0:	20000380 	.word	0x20000380
 8001eb4:	20000580 	.word	0x20000580
 8001eb8:	2000057c 	.word	0x2000057c
 8001ebc:	20000584 	.word	0x20000584
 8001ec0:	200005f0 	.word	0x200005f0
 8001ec4:	20000588 	.word	0x20000588

08001ec8 <xu_ly_tick_dht11>:


void xu_ly_tick_dht11(uint8_t* tick,uint8_t* data_dht11)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001ed2:	4828      	ldr	r0, [pc, #160]	; (8001f74 <xu_ly_tick_dht11+0xac>)
 8001ed4:	f002 fcf4 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001ed8:	2007      	movs	r0, #7
 8001eda:	f001 f854 	bl	8002f86 <HAL_NVIC_DisableIRQ>
	int count_data_dht11=0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	e03d      	b.n	8001f64 <xu_ly_tick_dht11+0x9c>
	{
			data_dht11[count_data_dht11/8] <<= 1;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da00      	bge.n	8001ef0 <xu_ly_tick_dht11+0x28>
 8001eee:	3307      	adds	r3, #7
 8001ef0:	10db      	asrs	r3, r3, #3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	440b      	add	r3, r1
 8001f00:	0052      	lsls	r2, r2, #1
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
			if( tick[i] > tick[i+1] ) {
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	440b      	add	r3, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d90d      	bls.n	8001f38 <xu_ly_tick_dht11+0x70>
				data_dht11[count_data_dht11/8] |= 0;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da00      	bge.n	8001f24 <xu_ly_tick_dht11+0x5c>
 8001f22:	3307      	adds	r3, #7
 8001f24:	10db      	asrs	r3, r3, #3
 8001f26:	4619      	mov	r1, r3
 8001f28:	460a      	mov	r2, r1
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	441a      	add	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	440b      	add	r3, r1
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
 8001f36:	e00f      	b.n	8001f58 <xu_ly_tick_dht11+0x90>
			}	else {

				data_dht11[count_data_dht11/8] |= 1;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da00      	bge.n	8001f40 <xu_ly_tick_dht11+0x78>
 8001f3e:	3307      	adds	r3, #7
 8001f40:	10db      	asrs	r3, r3, #3
 8001f42:	4619      	mov	r1, r3
 8001f44:	460a      	mov	r2, r1
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	440b      	add	r3, r1
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
			}
		count_data_dht11++;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3302      	adds	r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b52      	cmp	r3, #82	; 0x52
 8001f68:	ddbe      	ble.n	8001ee8 <xu_ly_tick_dht11+0x20>
	}

}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000380 	.word	0x20000380

08001f78 <doc_dht11>:


void doc_dht11(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001f7e:	4828      	ldr	r0, [pc, #160]	; (8002020 <doc_dht11+0xa8>)
 8001f80:	f002 fc4c 	bl	800481c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001f84:	2007      	movs	r0, #7
 8001f86:	f000 fffe 	bl	8002f86 <HAL_NVIC_DisableIRQ>
	count_tick =0;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <doc_dht11+0xac>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	463b      	mov	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	463b      	mov	r3, r7
 8001fae:	4619      	mov	r1, r3
 8001fb0:	481d      	ldr	r0, [pc, #116]	; (8002028 <doc_dht11+0xb0>)
 8001fb2:	f001 f8b5 	bl	8003120 <HAL_GPIO_Init>

	  HAL_Delay(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 fb4a 	bl	8002650 <HAL_Delay>

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4815      	ldr	r0, [pc, #84]	; (8002028 <doc_dht11+0xb0>)
 8001fd2:	f001 f8a5 	bl	8003120 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4813      	ldr	r0, [pc, #76]	; (8002028 <doc_dht11+0xb0>)
 8001fdc:	f001 fa3b 	bl	8003456 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8001fe0:	2014      	movs	r0, #20
 8001fe2:	f000 fb35 	bl	8002650 <HAL_Delay>
	if(count_tick ==0)
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <doc_dht11+0xac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <doc_dht11+0x84>
	{
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <doc_dht11+0xa8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
		tick_lan_truoc=0;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <doc_dht11+0xb4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
	}
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <doc_dht11+0xb8>)
 8002002:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002004:	2301      	movs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <doc_dht11+0xb0>)
 800200e:	f001 f887 	bl	8003120 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002012:	2007      	movs	r0, #7
 8002014:	f000 ffa9 	bl	8002f6a <HAL_NVIC_EnableIRQ>

}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000380 	.word	0x20000380
 8002024:	200005f0 	.word	0x200005f0
 8002028:	40010800 	.word	0x40010800
 800202c:	2000057c 	.word	0x2000057c
 8002030:	10310000 	.word	0x10310000

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	e7fe      	b.n	800203c <Error_Handler+0x8>
	...

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_MspInit+0x40>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_MspInit+0x40>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6193      	str	r3, [r2, #24]
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_MspInit+0x40>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_MspInit+0x40>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_MspInit+0x40>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_MspInit+0x40>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_ADC_MspInit+0xbc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d122      	bne.n	80020ea <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d4:	2340      	movs	r3, #64	; 0x40
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d8:	2303      	movs	r3, #3
 80020da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4819      	ldr	r0, [pc, #100]	; (8002148 <HAL_ADC_MspInit+0xc4>)
 80020e4:	f001 f81c 	bl	8003120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020e8:	e026      	b.n	8002138 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_ADC_MspInit+0xc8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d121      	bne.n	8002138 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_ADC_MspInit+0xc0>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002128:	2303      	movs	r3, #3
 800212a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <HAL_ADC_MspInit+0xc4>)
 8002134:	f000 fff4 	bl	8003120 <HAL_GPIO_Init>
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40012400 	.word	0x40012400
 8002144:	40021000 	.word	0x40021000
 8002148:	40010800 	.word	0x40010800
 800214c:	40012800 	.word	0x40012800

08002150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_I2C_MspInit+0x70>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d123      	bne.n	80021b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_I2C_MspInit+0x74>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_I2C_MspInit+0x74>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_I2C_MspInit+0x74>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002188:	23c0      	movs	r3, #192	; 0xc0
 800218a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218c:	2312      	movs	r3, #18
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	4619      	mov	r1, r3
 800219a:	480b      	ldr	r0, [pc, #44]	; (80021c8 <HAL_I2C_MspInit+0x78>)
 800219c:	f000 ffc0 	bl	8003120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_I2C_MspInit+0x74>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_I2C_MspInit+0x74>)
 80021a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021aa:	61d3      	str	r3, [r2, #28]
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_I2C_MspInit+0x74>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40005400 	.word	0x40005400
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010c00 	.word	0x40010c00

080021cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_TIM_Base_MspInit+0x110>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12c      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021de:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 80021e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e8:	6193      	str	r3, [r2, #24]
 80021ea:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 10, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210a      	movs	r1, #10
 80021fa:	2018      	movs	r0, #24
 80021fc:	f000 fe99 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002200:	2018      	movs	r0, #24
 8002202:	f000 feb2 	bl	8002f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 10, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	210a      	movs	r1, #10
 800220a:	2019      	movs	r0, #25
 800220c:	f000 fe91 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002210:	2019      	movs	r0, #25
 8002212:	f000 feaa 	bl	8002f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 10, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	210a      	movs	r1, #10
 800221a:	201a      	movs	r0, #26
 800221c:	f000 fe89 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002220:	201a      	movs	r0, #26
 8002222:	f000 fea2 	bl	8002f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 10, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	210a      	movs	r1, #10
 800222a:	201b      	movs	r0, #27
 800222c:	f000 fe81 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002230:	201b      	movs	r0, #27
 8002232:	f000 fe9a 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002236:	e04c      	b.n	80022d2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002240:	d114      	bne.n	800226c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	61d3      	str	r3, [r2, #28]
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2102      	movs	r1, #2
 800225e:	201c      	movs	r0, #28
 8002260:	f000 fe67 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002264:	201c      	movs	r0, #28
 8002266:	f000 fe80 	bl	8002f6a <HAL_NVIC_EnableIRQ>
}
 800226a:	e032      	b.n	80022d2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_TIM_Base_MspInit+0x118>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d114      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2107      	movs	r1, #7
 8002292:	201d      	movs	r0, #29
 8002294:	f000 fe4d 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002298:	201d      	movs	r0, #29
 800229a:	f000 fe66 	bl	8002f6a <HAL_NVIC_EnableIRQ>
}
 800229e:	e018      	b.n	80022d2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIM_Base_MspInit+0x11c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d113      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_TIM_Base_MspInit+0x114>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	201e      	movs	r0, #30
 80022c8:	f000 fe33 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022cc:	201e      	movs	r0, #30
 80022ce:	f000 fe4c 	bl	8002f6a <HAL_NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800

080022ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a20      	ldr	r2, [pc, #128]	; (8002388 <HAL_UART_MspInit+0x9c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d139      	bne.n	8002380 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_UART_MspInit+0xa0>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_UART_MspInit+0xa0>)
 8002312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_UART_MspInit+0xa0>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_UART_MspInit+0xa0>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_UART_MspInit+0xa0>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_UART_MspInit+0xa0>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0310 	add.w	r3, r7, #16
 800234e:	4619      	mov	r1, r3
 8002350:	480f      	ldr	r0, [pc, #60]	; (8002390 <HAL_UART_MspInit+0xa4>)
 8002352:	f000 fee5 	bl	8003120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800235a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4619      	mov	r1, r3
 800236a:	4809      	ldr	r0, [pc, #36]	; (8002390 <HAL_UART_MspInit+0xa4>)
 800236c:	f000 fed8 	bl	8003120 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2101      	movs	r1, #1
 8002374:	2025      	movs	r0, #37	; 0x25
 8002376:	f000 fddc 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800237a:	2025      	movs	r0, #37	; 0x25
 800237c:	f000 fdf5 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40013800 	.word	0x40013800
 800238c:	40021000 	.word	0x40021000
 8002390:	40010800 	.word	0x40010800

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023da:	f000 f91d 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023e6:	2002      	movs	r0, #2
 80023e8:	f001 f84e 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023f4:	2004      	movs	r0, #4
 80023f6:	f001 f847 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}

080023fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002402:	2008      	movs	r0, #8
 8002404:	f001 f840 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002410:	2010      	movs	r0, #16
 8002412:	f001 f839 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800241e:	2020      	movs	r0, #32
 8002420:	f001 f832 	bl	8003488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <TIM1_BRK_IRQHandler+0x10>)
 800242e:	f002 fa75 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000338 	.word	0x20000338

0800243c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <TIM1_UP_IRQHandler+0x10>)
 8002442:	f002 fa6b 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000338 	.word	0x20000338

08002450 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002456:	f002 fa61 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000338 	.word	0x20000338

08002464 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <TIM1_CC_IRQHandler+0x10>)
 800246a:	f002 fa57 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000338 	.word	0x20000338

08002478 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <TIM2_IRQHandler+0x10>)
 800247e:	f002 fa4d 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000380 	.word	0x20000380

0800248c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <TIM3_IRQHandler+0x10>)
 8002492:	f002 fa43 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200003c8 	.word	0x200003c8

080024a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TIM4_IRQHandler+0x10>)
 80024a6:	f002 fa39 	bl	800491c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000410 	.word	0x20000410

080024b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <USART1_IRQHandler+0x10>)
 80024ba:	f002 fe83 	bl	80051c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000458 	.word	0x20000458

080024c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <_sbrk+0x5c>)
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <_sbrk+0x60>)
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <_sbrk+0x64>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <_sbrk+0x68>)
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d207      	bcs.n	8002508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f8:	f003 fd20 	bl	8005f3c <__errno>
 80024fc:	4603      	mov	r3, r0
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e009      	b.n	800251c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <_sbrk+0x64>)
 8002518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20005000 	.word	0x20005000
 8002528:	00000400 	.word	0x00000400
 800252c:	20000694 	.word	0x20000694
 8002530:	200007e8 	.word	0x200007e8

08002534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002540:	f7ff fff8 	bl	8002534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480b      	ldr	r0, [pc, #44]	; (8002574 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002546:	490c      	ldr	r1, [pc, #48]	; (8002578 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <LoopFillZerobss+0x16>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800255c:	4c09      	ldr	r4, [pc, #36]	; (8002584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256a:	f003 fced 	bl	8005f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800256e:	f7fe f8a7 	bl	80006c0 <main>
  bx lr
 8002572:	4770      	bx	lr
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 800257c:	08007400 	.word	0x08007400
  ldr r2, =_sbss
 8002580:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002584:	200007e4 	.word	0x200007e4

08002588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <ADC1_2_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_Init+0x28>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_Init+0x28>)
 8002596:	f043 0310 	orr.w	r3, r3, #16
 800259a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f000 fcbd 	bl	8002f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	200f      	movs	r0, #15
 80025a4:	f000 f808 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fd4a 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x54>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fce3 	bl	8002fa2 <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d80a      	bhi.n	8002602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f000 fc9d 	bl	8002f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <HAL_InitTick+0x5c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000020c 	.word	0x2000020c
 8002610:	20000214 	.word	0x20000214
 8002614:	20000210 	.word	0x20000210

08002618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_IncTick+0x1c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_IncTick+0x20>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_IncTick+0x20>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	20000214 	.word	0x20000214
 8002638:	20000698 	.word	0x20000698

0800263c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b02      	ldr	r3, [pc, #8]	; (800264c <HAL_GetTick+0x10>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000698 	.word	0x20000698

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff fff0 	bl	800263c <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d005      	beq.n	8002676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_Delay+0x44>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002676:	bf00      	nop
 8002678:	f7ff ffe0 	bl	800263c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8f7      	bhi.n	8002678 <HAL_Delay+0x28>
  {
  }
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000214 	.word	0x20000214

08002698 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0be      	b.n	8002838 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fcd4 	bl	8002084 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 faeb 	bl	8002cb8 <ADC_ConversionStop_Disable>
 80026e2:	4603      	mov	r3, r0
 80026e4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 8099 	bne.w	8002826 <HAL_ADC_Init+0x18e>
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8095 	bne.w	8002826 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002704:	f023 0302 	bic.w	r3, r3, #2
 8002708:	f043 0202 	orr.w	r2, r3, #2
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002718:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002720:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4313      	orrs	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002730:	d003      	beq.n	800273a <HAL_ADC_Init+0xa2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <HAL_ADC_Init+0xa8>
 800273a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273e:	e000      	b.n	8002742 <HAL_ADC_Init+0xaa>
 8002740:	2300      	movs	r3, #0
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7d1b      	ldrb	r3, [r3, #20]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d119      	bne.n	8002784 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7b1b      	ldrb	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	3b01      	subs	r3, #1
 800275e:	035a      	lsls	r2, r3, #13
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e00b      	b.n	8002784 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	430a      	orrs	r2, r1
 8002796:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_ADC_Init+0x1a8>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d003      	beq.n	80027be <HAL_ADC_Init+0x126>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d104      	bne.n	80027c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	430a      	orrs	r2, r1
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_ADC_Init+0x1ac>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d10b      	bne.n	8002804 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002802:	e018      	b.n	8002836 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f023 0312 	bic.w	r3, r3, #18
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002824:	e007      	b.n	8002836 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	ffe1f7fd 	.word	0xffe1f7fd
 8002844:	ff1f0efe 	.word	0xff1f0efe

08002848 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_ADC_Start+0x1a>
 800285e:	2302      	movs	r3, #2
 8002860:	e098      	b.n	8002994 <HAL_ADC_Start+0x14c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f9ca 	bl	8002c04 <ADC_Enable>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 8087 	bne.w	800298a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a41      	ldr	r2, [pc, #260]	; (800299c <HAL_ADC_Start+0x154>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_Start+0x5e>
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_ADC_Start+0x158>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d026      	beq.n	800290e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028d0:	e01d      	b.n	800290e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2f      	ldr	r2, [pc, #188]	; (80029a0 <HAL_ADC_Start+0x158>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_Start+0xaa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2b      	ldr	r2, [pc, #172]	; (800299c <HAL_ADC_Start+0x154>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10d      	bne.n	800290e <HAL_ADC_Start+0xc6>
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_ADC_Start+0x158>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f023 0206 	bic.w	r2, r3, #6
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c
 8002926:	e002      	b.n	800292e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0202 	mvn.w	r2, #2
 800293e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800294a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800294e:	d113      	bne.n	8002978 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_ADC_Start+0x154>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d105      	bne.n	8002966 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_ADC_Start+0x158>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d108      	bne.n	8002978 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	e00c      	b.n	8002992 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e003      	b.n	8002992 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40012800 	.word	0x40012800
 80029a0:	40012400 	.word	0x40012400

080029a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Stop+0x1a>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e01a      	b.n	80029f4 <HAL_ADC_Stop+0x50>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f976 	bl	8002cb8 <ADC_ConversionStop_Disable>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0dc      	b.n	8002bee <HAL_ADC_ConfigChannel+0x1da>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d81c      	bhi.n	8002a7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	3b05      	subs	r3, #5
 8002a56:	221f      	movs	r2, #31
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4019      	ands	r1, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b05      	subs	r3, #5
 8002a70:	fa00 f203 	lsl.w	r2, r0, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7c:	e03c      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d81c      	bhi.n	8002ac0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	3b23      	subs	r3, #35	; 0x23
 8002a98:	221f      	movs	r2, #31
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	4019      	ands	r1, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b23      	subs	r3, #35	; 0x23
 8002ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
 8002abe:	e01b      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b41      	subs	r3, #65	; 0x41
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4019      	ands	r1, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b41      	subs	r3, #65	; 0x41
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	d91c      	bls.n	8002b3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68d9      	ldr	r1, [r3, #12]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b1e      	subs	r3, #30
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6898      	ldr	r0, [r3, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b1e      	subs	r3, #30
 8002b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	e019      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6919      	ldr	r1, [r3, #16]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4019      	ands	r1, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6898      	ldr	r0, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d003      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b7a:	2b11      	cmp	r3, #17
 8002b7c:	d132      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d125      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d126      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ba4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d11a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_ADC_ConfigChannel+0x1e8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9a      	lsrs	r2, r3, #18
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x1b2>
 8002bd2:	e007      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	40012400 	.word	0x40012400
 8002bfc:	2000020c 	.word	0x2000020c
 8002c00:	431bde83 	.word	0x431bde83

08002c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d040      	beq.n	8002ca4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <ADC_Enable+0xac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <ADC_Enable+0xb0>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c40:	e002      	b.n	8002c48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4e:	f7ff fcf5 	bl	800263c <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c54:	e01f      	b.n	8002c96 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c56:	f7ff fcf1 	bl	800263c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d918      	bls.n	8002c96 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d011      	beq.n	8002c96 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d1d8      	bne.n	8002c56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000020c 	.word	0x2000020c
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d12e      	bne.n	8002d30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce2:	f7ff fcab 	bl	800263c <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce8:	e01b      	b.n	8002d22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cea:	f7ff fca7 	bl	800263c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d914      	bls.n	8002d22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10d      	bne.n	8002d22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e007      	b.n	8002d32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d0dc      	beq.n	8002cea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <__NVIC_EnableIRQ+0x34>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db12      	blt.n	8002e10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	490a      	ldr	r1, [pc, #40]	; (8002e1c <__NVIC_DisableIRQ+0x44>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	3320      	adds	r3, #32
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e04:	f3bf 8f4f 	dsb	sy
}
 8002e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e0a:	f3bf 8f6f 	isb	sy
}
 8002e0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee8:	d301      	bcc.n	8002eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00f      	b.n	8002f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <SysTick_Config+0x40>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f7ff ff90 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SysTick_Config+0x40>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SysTick_Config+0x40>)
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff09 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f44:	f7ff ff1e 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff90 	bl	8002e74 <NVIC_EncodePriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff5f 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff11 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff1f 	bl	8002dd8 <__NVIC_DisableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff94 	bl	8002ed8 <SysTick_Config>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d008      	beq.n	8002fe4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e020      	b.n	8003026 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 020e 	bic.w	r2, r2, #14
 8002ff2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d005      	beq.n	8003054 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2204      	movs	r2, #4
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e051      	b.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020e 	bic.w	r2, r2, #14
 8003062:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a22      	ldr	r2, [pc, #136]	; (8003104 <HAL_DMA_Abort_IT+0xd4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d029      	beq.n	80030d2 <HAL_DMA_Abort_IT+0xa2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_DMA_Abort_IT+0xd8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_DMA_Abort_IT+0x9e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_DMA_Abort_IT+0xdc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01a      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x98>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_DMA_Abort_IT+0xe0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d012      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x92>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <HAL_DMA_Abort_IT+0xe4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00a      	beq.n	80030bc <HAL_DMA_Abort_IT+0x8c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_DMA_Abort_IT+0xe8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d102      	bne.n	80030b6 <HAL_DMA_Abort_IT+0x86>
 80030b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030b4:	e00e      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ba:	e00b      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	e008      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	e005      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030cc:	e002      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030ce:	2310      	movs	r3, #16
 80030d0:	e000      	b.n	80030d4 <HAL_DMA_Abort_IT+0xa4>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <HAL_DMA_Abort_IT+0xec>)
 80030d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    } 
  }
  return status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40020008 	.word	0x40020008
 8003108:	4002001c 	.word	0x4002001c
 800310c:	40020030 	.word	0x40020030
 8003110:	40020044 	.word	0x40020044
 8003114:	40020058 	.word	0x40020058
 8003118:	4002006c 	.word	0x4002006c
 800311c:	40020000 	.word	0x40020000

08003120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b08b      	sub	sp, #44	; 0x2c
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e169      	b.n	8003408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003134:	2201      	movs	r2, #1
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	429a      	cmp	r2, r3
 800314e:	f040 8158 	bne.w	8003402 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a9a      	ldr	r2, [pc, #616]	; (80033c0 <HAL_GPIO_Init+0x2a0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d05e      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 800315c:	4a98      	ldr	r2, [pc, #608]	; (80033c0 <HAL_GPIO_Init+0x2a0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d875      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 8003162:	4a98      	ldr	r2, [pc, #608]	; (80033c4 <HAL_GPIO_Init+0x2a4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d058      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 8003168:	4a96      	ldr	r2, [pc, #600]	; (80033c4 <HAL_GPIO_Init+0x2a4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d86f      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 800316e:	4a96      	ldr	r2, [pc, #600]	; (80033c8 <HAL_GPIO_Init+0x2a8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d052      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 8003174:	4a94      	ldr	r2, [pc, #592]	; (80033c8 <HAL_GPIO_Init+0x2a8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d869      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 800317a:	4a94      	ldr	r2, [pc, #592]	; (80033cc <HAL_GPIO_Init+0x2ac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04c      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 8003180:	4a92      	ldr	r2, [pc, #584]	; (80033cc <HAL_GPIO_Init+0x2ac>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d863      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 8003186:	4a92      	ldr	r2, [pc, #584]	; (80033d0 <HAL_GPIO_Init+0x2b0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d046      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 800318c:	4a90      	ldr	r2, [pc, #576]	; (80033d0 <HAL_GPIO_Init+0x2b0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d85d      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 8003192:	2b12      	cmp	r3, #18
 8003194:	d82a      	bhi.n	80031ec <HAL_GPIO_Init+0xcc>
 8003196:	2b12      	cmp	r3, #18
 8003198:	d859      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_GPIO_Init+0x80>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	0800321b 	.word	0x0800321b
 80031a4:	080031f5 	.word	0x080031f5
 80031a8:	08003207 	.word	0x08003207
 80031ac:	08003249 	.word	0x08003249
 80031b0:	0800324f 	.word	0x0800324f
 80031b4:	0800324f 	.word	0x0800324f
 80031b8:	0800324f 	.word	0x0800324f
 80031bc:	0800324f 	.word	0x0800324f
 80031c0:	0800324f 	.word	0x0800324f
 80031c4:	0800324f 	.word	0x0800324f
 80031c8:	0800324f 	.word	0x0800324f
 80031cc:	0800324f 	.word	0x0800324f
 80031d0:	0800324f 	.word	0x0800324f
 80031d4:	0800324f 	.word	0x0800324f
 80031d8:	0800324f 	.word	0x0800324f
 80031dc:	0800324f 	.word	0x0800324f
 80031e0:	0800324f 	.word	0x0800324f
 80031e4:	080031fd 	.word	0x080031fd
 80031e8:	08003211 	.word	0x08003211
 80031ec:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <HAL_GPIO_Init+0x2b4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031f2:	e02c      	b.n	800324e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	623b      	str	r3, [r7, #32]
          break;
 80031fa:	e029      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	3304      	adds	r3, #4
 8003202:	623b      	str	r3, [r7, #32]
          break;
 8003204:	e024      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	3308      	adds	r3, #8
 800320c:	623b      	str	r3, [r7, #32]
          break;
 800320e:	e01f      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	330c      	adds	r3, #12
 8003216:	623b      	str	r3, [r7, #32]
          break;
 8003218:	e01a      	b.n	8003250 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003222:	2304      	movs	r3, #4
 8003224:	623b      	str	r3, [r7, #32]
          break;
 8003226:	e013      	b.n	8003250 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003230:	2308      	movs	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	611a      	str	r2, [r3, #16]
          break;
 800323a:	e009      	b.n	8003250 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800323c:	2308      	movs	r3, #8
 800323e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	615a      	str	r2, [r3, #20]
          break;
 8003246:	e003      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003248:	2300      	movs	r3, #0
 800324a:	623b      	str	r3, [r7, #32]
          break;
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x130>
          break;
 800324e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2bff      	cmp	r3, #255	; 0xff
 8003254:	d801      	bhi.n	800325a <HAL_GPIO_Init+0x13a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	e001      	b.n	800325e <HAL_GPIO_Init+0x13e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2bff      	cmp	r3, #255	; 0xff
 8003264:	d802      	bhi.n	800326c <HAL_GPIO_Init+0x14c>
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	e002      	b.n	8003272 <HAL_GPIO_Init+0x152>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	3b08      	subs	r3, #8
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	210f      	movs	r1, #15
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	431a      	orrs	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80b1 	beq.w	8003402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_GPIO_Init+0x2b8>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_GPIO_Init+0x2b8>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6193      	str	r3, [r2, #24]
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_GPIO_Init+0x2b8>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_GPIO_Init+0x2bc>)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	3302      	adds	r3, #2
 80032c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <HAL_GPIO_Init+0x2c0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_GPIO_Init+0x1ec>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <HAL_GPIO_Init+0x2c4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00d      	beq.n	8003308 <HAL_GPIO_Init+0x1e8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3e      	ldr	r2, [pc, #248]	; (80033e8 <HAL_GPIO_Init+0x2c8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <HAL_GPIO_Init+0x1e4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3d      	ldr	r2, [pc, #244]	; (80033ec <HAL_GPIO_Init+0x2cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d101      	bne.n	8003300 <HAL_GPIO_Init+0x1e0>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003300:	2304      	movs	r3, #4
 8003302:	e004      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003304:	2302      	movs	r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 800330c:	2300      	movs	r3, #0
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	f002 0203 	and.w	r2, r2, #3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4093      	lsls	r3, r2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800331e:	492f      	ldr	r1, [pc, #188]	; (80033dc <HAL_GPIO_Init+0x2bc>)
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	492c      	ldr	r1, [pc, #176]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003346:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	43db      	mvns	r3, r3
 800334e:	4928      	ldr	r1, [pc, #160]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003350:	4013      	ands	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	4922      	ldr	r1, [pc, #136]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	60cb      	str	r3, [r1, #12]
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	491e      	ldr	r1, [pc, #120]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003378:	4013      	ands	r3, r2
 800337a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4918      	ldr	r1, [pc, #96]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	4914      	ldr	r1, [pc, #80]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d021      	beq.n	80033f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e021      	b.n	8003402 <HAL_GPIO_Init+0x2e2>
 80033be:	bf00      	nop
 80033c0:	10320000 	.word	0x10320000
 80033c4:	10310000 	.word	0x10310000
 80033c8:	10220000 	.word	0x10220000
 80033cc:	10210000 	.word	0x10210000
 80033d0:	10120000 	.word	0x10120000
 80033d4:	10110000 	.word	0x10110000
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40010800 	.word	0x40010800
 80033e4:	40010c00 	.word	0x40010c00
 80033e8:	40011000 	.word	0x40011000
 80033ec:	40011400 	.word	0x40011400
 80033f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_GPIO_Init+0x304>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	4909      	ldr	r1, [pc, #36]	; (8003424 <HAL_GPIO_Init+0x304>)
 80033fe:	4013      	ands	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	3301      	adds	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f47f ae8e 	bne.w	8003134 <HAL_GPIO_Init+0x14>
  }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	372c      	adds	r7, #44	; 0x2c
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e001      	b.n	800344a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]
 8003462:	4613      	mov	r3, r2
 8003464:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003466:	787b      	ldrb	r3, [r7, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346c:	887a      	ldrh	r2, [r7, #2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003472:	e003      	b.n	800347c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	041a      	lsls	r2, r3, #16
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
	...

08003488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f8be 	bl	8001628 <HAL_GPIO_EXTI_Callback>
  }
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e12b      	b.n	8003722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe fe36 	bl	8002150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800350a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800351a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800351c:	f001 f832 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8003520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a81      	ldr	r2, [pc, #516]	; (800372c <HAL_I2C_Init+0x274>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d807      	bhi.n	800353c <HAL_I2C_Init+0x84>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_I2C_Init+0x278>)
 8003530:	4293      	cmp	r3, r2
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e006      	b.n	800354a <HAL_I2C_Init+0x92>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a7d      	ldr	r2, [pc, #500]	; (8003734 <HAL_I2C_Init+0x27c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0e7      	b.n	8003722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a78      	ldr	r2, [pc, #480]	; (8003738 <HAL_I2C_Init+0x280>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_I2C_Init+0x274>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d802      	bhi.n	800358c <HAL_I2C_Init+0xd4>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3301      	adds	r3, #1
 800358a:	e009      	b.n	80035a0 <HAL_I2C_Init+0xe8>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	4a69      	ldr	r2, [pc, #420]	; (800373c <HAL_I2C_Init+0x284>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	3301      	adds	r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	495c      	ldr	r1, [pc, #368]	; (800372c <HAL_I2C_Init+0x274>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d819      	bhi.n	80035f4 <HAL_I2C_Init+0x13c>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e59      	subs	r1, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d4:	400b      	ands	r3, r1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_I2C_Init+0x138>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e59      	subs	r1, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	e051      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f0:	2304      	movs	r3, #4
 80035f2:	e04f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <HAL_I2C_Init+0x168>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e012      	b.n	8003646 <HAL_I2C_Init+0x18e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x196>
 800364a:	2301      	movs	r3, #1
 800364c:	e022      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10e      	bne.n	8003674 <HAL_I2C_Init+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1e58      	subs	r0, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	440b      	add	r3, r1
 8003664:	fbb0 f3f3 	udiv	r3, r0, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003672:	e00f      	b.n	8003694 <HAL_I2C_Init+0x1dc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6809      	ldr	r1, [r1, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6911      	ldr	r1, [r2, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	000186a0 	.word	0x000186a0
 8003730:	001e847f 	.word	0x001e847f
 8003734:	003d08ff 	.word	0x003d08ff
 8003738:	431bde83 	.word	0x431bde83
 800373c:	10624dd3 	.word	0x10624dd3

08003740 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	460b      	mov	r3, r1
 800374e:	817b      	strh	r3, [r7, #10]
 8003750:	4613      	mov	r3, r2
 8003752:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7fe ff72 	bl	800263c <HAL_GetTick>
 8003758:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	f040 80e0 	bne.w	8003928 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2319      	movs	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	4970      	ldr	r1, [pc, #448]	; (8003934 <HAL_I2C_Master_Transmit+0x1f4>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f964 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	e0d3      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_I2C_Master_Transmit+0x50>
 800378c:	2302      	movs	r3, #2
 800378e:	e0cc      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ea>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d007      	beq.n	80037b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2221      	movs	r2, #33	; 0x21
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2210      	movs	r2, #16
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	893a      	ldrh	r2, [r7, #8]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a50      	ldr	r2, [pc, #320]	; (8003938 <HAL_I2C_Master_Transmit+0x1f8>)
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f89c 	bl	800393c <I2C_MasterRequestWrite>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e08d      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003824:	e066      	b.n	80038f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	6a39      	ldr	r1, [r7, #32]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa22 	bl	8003c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b04      	cmp	r3, #4
 800383c:	d107      	bne.n	800384e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06b      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d11b      	bne.n	80038c8 <HAL_I2C_Master_Transmit+0x188>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d017      	beq.n	80038c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	6a39      	ldr	r1, [r7, #32]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fa19 	bl	8003d04 <I2C_WaitOnBTFFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d107      	bne.n	80038f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01a      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d194      	bne.n	8003826 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	00100002 	.word	0x00100002
 8003938:	ffff0000 	.word	0xffff0000

0800393c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	460b      	mov	r3, r1
 800394a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d006      	beq.n	8003966 <I2C_MasterRequestWrite+0x2a>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d003      	beq.n	8003966 <I2C_MasterRequestWrite+0x2a>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003964:	d108      	bne.n	8003978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e00b      	b.n	8003990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	2b12      	cmp	r3, #18
 800397e:	d107      	bne.n	8003990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f84f 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b6:	d103      	bne.n	80039c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e035      	b.n	8003a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039cc:	d108      	bne.n	80039e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	e01b      	b.n	8003a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039e0:	897b      	ldrh	r3, [r7, #10]
 80039e2:	11db      	asrs	r3, r3, #7
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0306 	and.w	r3, r3, #6
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f063 030f 	orn	r3, r3, #15
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	490e      	ldr	r1, [pc, #56]	; (8003a38 <I2C_MasterRequestWrite+0xfc>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f898 	bl	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e010      	b.n	8003a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4907      	ldr	r1, [pc, #28]	; (8003a3c <I2C_MasterRequestWrite+0x100>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f888 	bl	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	00010008 	.word	0x00010008
 8003a3c:	00010002 	.word	0x00010002

08003a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a50:	e048      	b.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d044      	beq.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe fdef 	bl	800263c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d139      	bne.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10d      	bne.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	43da      	mvns	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	e00c      	b.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d116      	bne.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e023      	b.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10d      	bne.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	43da      	mvns	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4013      	ands	r3, r2
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	e00c      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	43da      	mvns	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d093      	beq.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b42:	e071      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d123      	bne.n	8003b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0204 	orr.w	r2, r3, #4
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e067      	b.n	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d041      	beq.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba4:	f7fe fd4a 	bl	800263c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d302      	bcc.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d136      	bne.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10c      	bne.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	e00b      	b.n	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	43da      	mvns	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e021      	b.n	8003c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d10c      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e00b      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4013      	ands	r3, r2
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f47f af6d 	bne.w	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c80:	e034      	b.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f886 	bl	8003d94 <I2C_IsAcknowledgeFailed>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e034      	b.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d028      	beq.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7fe fccf 	bl	800263c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11d      	bne.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d016      	beq.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e007      	b.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d1c3      	bne.n	8003c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d10:	e034      	b.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f83e 	bl	8003d94 <I2C_IsAcknowledgeFailed>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e034      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d028      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fe fc87 	bl	800263c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11d      	bne.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d016      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e007      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d1c3      	bne.n	8003d12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d11b      	bne.n	8003de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e272      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8087 	beq.w	8003f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e10:	4b92      	ldr	r3, [pc, #584]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d00c      	beq.n	8003e36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e1c:	4b8f      	ldr	r3, [pc, #572]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d112      	bne.n	8003e4e <HAL_RCC_OscConfig+0x5e>
 8003e28:	4b8c      	ldr	r3, [pc, #560]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d10b      	bne.n	8003e4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e36:	4b89      	ldr	r3, [pc, #548]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d06c      	beq.n	8003f1c <HAL_RCC_OscConfig+0x12c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d168      	bne.n	8003f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e24c      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x76>
 8003e58:	4b80      	ldr	r3, [pc, #512]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a7f      	ldr	r2, [pc, #508]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	e02e      	b.n	8003ec4 <HAL_RCC_OscConfig+0xd4>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x98>
 8003e6e:	4b7b      	ldr	r3, [pc, #492]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7a      	ldr	r2, [pc, #488]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b78      	ldr	r3, [pc, #480]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e01d      	b.n	8003ec4 <HAL_RCC_OscConfig+0xd4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0xbc>
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a71      	ldr	r2, [pc, #452]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4b6f      	ldr	r3, [pc, #444]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a6e      	ldr	r2, [pc, #440]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0xd4>
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6a      	ldr	r2, [pc, #424]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b68      	ldr	r3, [pc, #416]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a67      	ldr	r2, [pc, #412]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fbb6 	bl	800263c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fe fbb2 	bl	800263c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e200      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b5d      	ldr	r3, [pc, #372]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xe4>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fe fba2 	bl	800263c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fe fb9e 	bl	800263c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e1ec      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x10c>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d063      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f2a:	4b4c      	ldr	r3, [pc, #304]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f36:	4b49      	ldr	r3, [pc, #292]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d11c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x18c>
 8003f42:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d116      	bne.n	8003f7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_RCC_OscConfig+0x176>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d001      	beq.n	8003f66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e1c0      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4939      	ldr	r1, [pc, #228]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	e03a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_OscConfig+0x270>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fb57 	bl	800263c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f92:	f7fe fb53 	bl	800263c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e1a1      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4927      	ldr	r1, [pc, #156]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fb36 	bl	800263c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fe fb32 	bl	800263c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e180      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d03a      	beq.n	8004074 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d019      	beq.n	800403a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004006:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_RCC_OscConfig+0x274>)
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400c:	f7fe fb16 	bl	800263c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004014:	f7fe fb12 	bl	800263c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e160      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <HAL_RCC_OscConfig+0x26c>)
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004032:	2001      	movs	r0, #1
 8004034:	f000 face 	bl	80045d4 <RCC_Delay>
 8004038:	e01c      	b.n	8004074 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_OscConfig+0x274>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fe fafc 	bl	800263c <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004046:	e00f      	b.n	8004068 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004048:	f7fe faf8 	bl	800263c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d908      	bls.n	8004068 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e146      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	42420000 	.word	0x42420000
 8004064:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e9      	bne.n	8004048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80a6 	beq.w	80041ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10d      	bne.n	80040ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4a87      	ldr	r2, [pc, #540]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	61d3      	str	r3, [r2, #28]
 800409e:	4b85      	ldr	r3, [pc, #532]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b82      	ldr	r3, [pc, #520]	; (80042b8 <HAL_RCC_OscConfig+0x4c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b7f      	ldr	r3, [pc, #508]	; (80042b8 <HAL_RCC_OscConfig+0x4c8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a7e      	ldr	r2, [pc, #504]	; (80042b8 <HAL_RCC_OscConfig+0x4c8>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fe fab9 	bl	800263c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fe fab5 	bl	800263c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b64      	cmp	r3, #100	; 0x64
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e103      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b75      	ldr	r3, [pc, #468]	; (80042b8 <HAL_RCC_OscConfig+0x4c8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x312>
 80040f4:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a6e      	ldr	r2, [pc, #440]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	e02d      	b.n	800415e <HAL_RCC_OscConfig+0x36e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x334>
 800410a:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4a69      	ldr	r2, [pc, #420]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6213      	str	r3, [r2, #32]
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4a66      	ldr	r2, [pc, #408]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6213      	str	r3, [r2, #32]
 8004122:	e01c      	b.n	800415e <HAL_RCC_OscConfig+0x36e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b05      	cmp	r3, #5
 800412a:	d10c      	bne.n	8004146 <HAL_RCC_OscConfig+0x356>
 800412c:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4a60      	ldr	r2, [pc, #384]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	6213      	str	r3, [r2, #32]
 8004138:	4b5e      	ldr	r3, [pc, #376]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a5d      	ldr	r2, [pc, #372]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	e00b      	b.n	800415e <HAL_RCC_OscConfig+0x36e>
 8004146:	4b5b      	ldr	r3, [pc, #364]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4a5a      	ldr	r2, [pc, #360]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	6213      	str	r3, [r2, #32]
 8004152:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4a57      	ldr	r2, [pc, #348]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d015      	beq.n	8004192 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fe fa69 	bl	800263c <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416c:	e00a      	b.n	8004184 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fe fa65 	bl	800263c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0b1      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ee      	beq.n	800416e <HAL_RCC_OscConfig+0x37e>
 8004190:	e014      	b.n	80041bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004192:	f7fe fa53 	bl	800263c <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f7fe fa4f 	bl	800263c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e09b      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b0:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ee      	bne.n	800419a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a3b      	ldr	r2, [pc, #236]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8087 	beq.w	80042e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d061      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d146      	bne.n	800427a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ec:	4b33      	ldr	r3, [pc, #204]	; (80042bc <HAL_RCC_OscConfig+0x4cc>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fe fa23 	bl	800263c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fe fa1f 	bl	800263c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e06d      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420c:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d108      	bne.n	8004234 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4921      	ldr	r1, [pc, #132]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004234:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a19      	ldr	r1, [r3, #32]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	430b      	orrs	r3, r1
 8004246:	491b      	ldr	r1, [pc, #108]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x4cc>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004252:	f7fe f9f3 	bl	800263c <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fe f9ef 	bl	800263c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e03d      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x46a>
 8004278:	e035      	b.n	80042e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_RCC_OscConfig+0x4cc>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe f9dc 	bl	800263c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fe f9d8 	bl	800263c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e026      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x498>
 80042a6:	e01e      	b.n	80042e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e019      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
 80042bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_OscConfig+0x500>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000

080042f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0d0      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	4965      	ldr	r1, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800435a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d040      	beq.n	8004414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d115      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e073      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e06b      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4936      	ldr	r1, [pc, #216]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fe f92a 	bl	800263c <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fe f926 	bl	800263c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e053      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d210      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 0207 	bic.w	r2, r3, #7
 800442a:	4922      	ldr	r1, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f821 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1cc>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe f888 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40022000 	.word	0x40022000
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0800727c 	.word	0x0800727c
 80044c0:	2000020c 	.word	0x2000020c
 80044c4:	20000210 	.word	0x20000210

080044c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <HAL_RCC_GetSysClockFreq+0x94>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d002      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x30>
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x36>
 80044f6:	e027      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_RCC_GetSysClockFreq+0x98>)
 80044fa:	613b      	str	r3, [r7, #16]
      break;
 80044fc:	e027      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	0c9b      	lsrs	r3, r3, #18
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004508:	5cd3      	ldrb	r3, [r2, r3]
 800450a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d010      	beq.n	8004538 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_RCC_GetSysClockFreq+0x94>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	0c5b      	lsrs	r3, r3, #17
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <HAL_RCC_GetSysClockFreq+0x98>)
 800452a:	fb03 f202 	mul.w	r2, r3, r2
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	e004      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_RCC_GetSysClockFreq+0xa4>)
 800453c:	fb02 f303 	mul.w	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	613b      	str	r3, [r7, #16]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetSysClockFreq+0x98>)
 800454a:	613b      	str	r3, [r7, #16]
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	693b      	ldr	r3, [r7, #16]
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	007a1200 	.word	0x007a1200
 8004564:	08007294 	.word	0x08007294
 8004568:	080072a4 	.word	0x080072a4
 800456c:	003d0900 	.word	0x003d0900

08004570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b02      	ldr	r3, [pc, #8]	; (8004580 <HAL_RCC_GetHCLKFreq+0x10>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	2000020c 	.word	0x2000020c

08004584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004588:	f7ff fff2 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	0800728c 	.word	0x0800728c

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045b0:	f7ff ffde 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	0adb      	lsrs	r3, r3, #11
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4903      	ldr	r1, [pc, #12]	; (80045d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40021000 	.word	0x40021000
 80045d0:	0800728c 	.word	0x0800728c

080045d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <RCC_Delay+0x34>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0a      	ldr	r2, [pc, #40]	; (800460c <RCC_Delay+0x38>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045f0:	bf00      	nop
  }
  while (Delay --);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	60fa      	str	r2, [r7, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f9      	bne.n	80045f0 <RCC_Delay+0x1c>
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	2000020c 	.word	0x2000020c
 800460c:	10624dd3 	.word	0x10624dd3

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d07d      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004630:	4b4f      	ldr	r3, [pc, #316]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	4a4b      	ldr	r2, [pc, #300]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004646:	61d3      	str	r3, [r2, #28]
 8004648:	4b49      	ldr	r3, [pc, #292]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b46      	ldr	r3, [pc, #280]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d118      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004664:	4b43      	ldr	r3, [pc, #268]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a42      	ldr	r2, [pc, #264]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004670:	f7fd ffe4 	bl	800263c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	e008      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fd ffe0 	bl	800263c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e06d      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b3a      	ldr	r3, [pc, #232]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02e      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d027      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ca:	4a29      	ldr	r2, [pc, #164]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fd ffaf 	bl	800263c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd ffab 	bl	800263c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e036      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4917      	ldr	r1, [pc, #92]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	4313      	orrs	r3, r2
 8004714:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	490b      	ldr	r1, [pc, #44]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	4904      	ldr	r1, [pc, #16]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	40007000 	.word	0x40007000
 8004778:	42420440 	.word	0x42420440

0800477c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e041      	b.n	8004812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fd12 	bl	80021cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 faa2 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d001      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e03a      	b.n	80048aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_TIM_Base_Start_IT+0x98>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x58>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d009      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x58>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x58>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a13      	ldr	r2, [pc, #76]	; (80048bc <HAL_TIM_Base_Start_IT+0xa0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d111      	bne.n	8004898 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b06      	cmp	r3, #6
 8004884:	d010      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	e007      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800

080048c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	f241 1311 	movw	r3, #4369	; 0x1111
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <HAL_TIM_Base_Stop_IT+0x48>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	f240 4344 	movw	r3, #1092	; 0x444
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_Base_Stop_IT+0x48>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0202 	mvn.w	r2, #2
 8004948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9b4 	bl	8004ccc <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9a7 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9b6 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0204 	mvn.w	r2, #4
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f98a 	bl	8004ccc <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f97d 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f98c 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f960 	bl	8004ccc <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f953 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f962 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0210 	mvn.w	r2, #16
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f936 	bl	8004ccc <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f929 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f938 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0201 	mvn.w	r2, #1
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc fd78 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fa7b 	bl	8004fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8fc 	bl	8004cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d10e      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0220 	mvn.w	r2, #32
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa46 	bl	8004fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0b4      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x186>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd4>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x172>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b70      	cmp	r3, #112	; 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b9c:	2b70      	cmp	r3, #112	; 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b60      	cmp	r3, #96	; 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ba4:	2b60      	cmp	r3, #96	; 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b50      	cmp	r3, #80	; 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfa>
 8004bac:	2b50      	cmp	r3, #80	; 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13a>
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b30      	cmp	r3, #48	; 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	f000 f968 	bl	8004eb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	f000 f951 	bl	8004eb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 f8c8 	bl	8004dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	; 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f91f 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 f8e6 	bl	8004e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	; 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f90f 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 f8a8 	bl	8004dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f8ff 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 f8f6 	bl	8004e82 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
	...

08004d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <TIM_Base_SetConfig+0xb8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x30>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x30>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <TIM_Base_SetConfig+0xbc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x30>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <TIM_Base_SetConfig+0xc0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <TIM_Base_SetConfig+0xb8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0x62>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0x62>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <TIM_Base_SetConfig+0xbc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0x62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <TIM_Base_SetConfig+0xc0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <TIM_Base_SetConfig+0xb8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d103      	bne.n	8004dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800

08004dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f023 030a 	bic.w	r3, r3, #10
 8004e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0210 	bic.w	r2, r3, #16
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	031b      	lsls	r3, r3, #12
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	621a      	str	r2, [r3, #32]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f043 0307 	orr.w	r3, r3, #7
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	609a      	str	r2, [r3, #8]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e046      	b.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f58:	d009      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a10      	ldr	r2, [pc, #64]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10c      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800

08004fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e042      	b.n	800506c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd f976 	bl	80022ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fdc5 	bl	8005ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800502c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800503c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800504c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b20      	cmp	r3, #32
 8005092:	d16d      	bne.n	8005170 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_Transmit+0x2c>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e066      	b.n	8005172 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2221      	movs	r2, #33	; 0x21
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b2:	f7fd fac3 	bl	800263c <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	d108      	bne.n	80050e0 <HAL_UART_Transmit+0x6c>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e003      	b.n	80050e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e8:	e02a      	b.n	8005140 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fb14 	bl	8005722 <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e036      	b.n	8005172 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3302      	adds	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e007      	b.n	8005132 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1cf      	bne.n	80050ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2140      	movs	r1, #64	; 0x40
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fae4 	bl	8005722 <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	4613      	mov	r3, r2
 8005186:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b20      	cmp	r3, #32
 8005192:	d112      	bne.n	80051ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_UART_Receive_IT+0x26>
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e00b      	b.n	80051bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	461a      	mov	r2, r3
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fb24 	bl	80057fe <UART_Start_Receive_IT>
 80051b6:	4603      	mov	r3, r0
 80051b8:	e000      	b.n	80051bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
  }
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b0ba      	sub	sp, #232	; 0xe8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_UART_IRQHandler+0x66>
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fc01 	bl	8005a2a <UART_Receive_IT>
      return;
 8005228:	e25b      	b.n	80056e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800522a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80de 	beq.w	80053f0 <HAL_UART_IRQHandler+0x22c>
 8005234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005244:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80d1 	beq.w	80053f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_UART_IRQHandler+0xae>
 800525a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	f043 0201 	orr.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_UART_IRQHandler+0xd2>
 800527e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f043 0202 	orr.w	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_UART_IRQHandler+0xf6>
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f043 0204 	orr.w	r2, r3, #4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d011      	beq.n	80052ea <HAL_UART_IRQHandler+0x126>
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d105      	bne.n	80052de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	f043 0208 	orr.w	r2, r3, #8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 81f2 	beq.w	80056d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_UART_IRQHandler+0x14e>
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fb8c 	bl	8005a2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <HAL_UART_IRQHandler+0x17a>
 8005336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d04f      	beq.n	80053de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa96 	bl	8005870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d041      	beq.n	80053d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800536c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800537e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800538a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1d9      	bne.n	8005352 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d013      	beq.n	80053ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	4a7e      	ldr	r2, [pc, #504]	; (80055a4 <HAL_UART_IRQHandler+0x3e0>)
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fd fe3c 	bl	8003030 <HAL_DMA_Abort_IT>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d016      	beq.n	80053ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053c8:	4610      	mov	r0, r2
 80053ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053cc:	e00e      	b.n	80053ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f993 	bl	80056fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	e00a      	b.n	80053ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f98f 	bl	80056fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e006      	b.n	80053ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f98b 	bl	80056fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80053ea:	e175      	b.n	80056d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	bf00      	nop
    return;
 80053ee:	e173      	b.n	80056d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	f040 814f 	bne.w	8005698 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8148 	beq.w	8005698 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8141 	beq.w	8005698 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005416:	2300      	movs	r3, #0
 8005418:	60bb      	str	r3, [r7, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80b6 	beq.w	80055a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8145 	beq.w	80056dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800545a:	429a      	cmp	r2, r3
 800545c:	f080 813e 	bcs.w	80056dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005466:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b20      	cmp	r3, #32
 8005470:	f000 8088 	beq.w	8005584 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800548a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800548e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1d9      	bne.n	8005474 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e1      	bne.n	80054c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800550c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3314      	adds	r3, #20
 800551c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005520:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005526:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800552e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e3      	bne.n	80054fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005554:	f023 0310 	bic.w	r3, r3, #16
 8005558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005566:	65ba      	str	r2, [r7, #88]	; 0x58
 8005568:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800556c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e3      	bne.n	8005542 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	4618      	mov	r0, r3
 8005580:	f7fd fd1b 	bl	8002fba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005592:	b29b      	uxth	r3, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	b29b      	uxth	r3, r3
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f8b6 	bl	800570c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055a0:	e09c      	b.n	80056dc <HAL_UART_IRQHandler+0x518>
 80055a2:	bf00      	nop
 80055a4:	08005935 	.word	0x08005935
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 808e 	beq.w	80056e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8089 	beq.w	80056e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055f2:	647a      	str	r2, [r7, #68]	; 0x44
 80055f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e3      	bne.n	80055ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3314      	adds	r3, #20
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	623b      	str	r3, [r7, #32]
   return(result);
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3314      	adds	r3, #20
 8005626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800562a:	633a      	str	r2, [r7, #48]	; 0x30
 800562c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e3      	bne.n	8005606 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	60fb      	str	r3, [r7, #12]
   return(result);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0310 	bic.w	r3, r3, #16
 8005662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005670:	61fa      	str	r2, [r7, #28]
 8005672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	69b9      	ldr	r1, [r7, #24]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	617b      	str	r3, [r7, #20]
   return(result);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e3      	bne.n	800564c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800568a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f83b 	bl	800570c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005696:	e023      	b.n	80056e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <HAL_UART_IRQHandler+0x4f4>
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f953 	bl	800595c <UART_Transmit_IT>
    return;
 80056b6:	e014      	b.n	80056e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <HAL_UART_IRQHandler+0x51e>
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f992 	bl	80059fa <UART_EndTransmit_IT>
    return;
 80056d6:	e004      	b.n	80056e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80056d8:	bf00      	nop
 80056da:	e002      	b.n	80056e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80056dc:	bf00      	nop
 80056de:	e000      	b.n	80056e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80056e0:	bf00      	nop
  }
}
 80056e2:	37e8      	adds	r7, #232	; 0xe8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b090      	sub	sp, #64	; 0x40
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4613      	mov	r3, r2
 8005730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005732:	e050      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d04c      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800573c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0x30>
 8005742:	f7fc ff7b 	bl	800263c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800574e:	429a      	cmp	r2, r3
 8005750:	d241      	bcs.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	330c      	adds	r3, #12
 8005770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005772:	637a      	str	r2, [r7, #52]	; 0x34
 8005774:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	613b      	str	r3, [r7, #16]
   return(result);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f023 0301 	bic.w	r3, r3, #1
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057a6:	623a      	str	r2, [r7, #32]
 80057a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	69f9      	ldr	r1, [r7, #28]
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e00f      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d09f      	beq.n	8005734 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3740      	adds	r7, #64	; 0x40
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057fe:	b480      	push	{r7}
 8005800:	b085      	sub	sp, #20
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2222      	movs	r2, #34	; 0x22
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005842:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0220 	orr.w	r2, r2, #32
 8005862:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b095      	sub	sp, #84	; 0x54
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005898:	643a      	str	r2, [r7, #64]	; 0x40
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800589e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e5      	bne.n	8005878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d119      	bne.n	800591c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0310 	bic.w	r3, r3, #16
 80058fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005908:	61ba      	str	r2, [r7, #24]
 800590a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	613b      	str	r3, [r7, #16]
   return(result);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800592a:	bf00      	nop
 800592c:	3754      	adds	r7, #84	; 0x54
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fed3 	bl	80056fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b21      	cmp	r3, #33	; 0x21
 800596e:	d13e      	bne.n	80059ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d114      	bne.n	80059a4 <UART_Transmit_IT+0x48>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d110      	bne.n	80059a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005996:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	1c9a      	adds	r2, r3, #2
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]
 80059a2:	e008      	b.n	80059b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6211      	str	r1, [r2, #32]
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4619      	mov	r1, r3
 80059c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10f      	bne.n	80059ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fe64 	bl	80056e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08c      	sub	sp, #48	; 0x30
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b22      	cmp	r3, #34	; 0x22
 8005a3c:	f040 80ae 	bne.w	8005b9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d117      	bne.n	8005a7a <UART_Receive_IT+0x50>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d113      	bne.n	8005a7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	1c9a      	adds	r2, r3, #2
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
 8005a78:	e026      	b.n	8005ac8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d007      	beq.n	8005a9e <UART_Receive_IT+0x74>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <UART_Receive_IT+0x82>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e008      	b.n	8005abe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d15d      	bne.n	8005b98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0220 	bic.w	r2, r2, #32
 8005aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d135      	bne.n	8005b8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	613b      	str	r3, [r7, #16]
   return(result);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 0310 	bic.w	r3, r3, #16
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b48:	623a      	str	r2, [r7, #32]
 8005b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d10a      	bne.n	8005b80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fdc0 	bl	800570c <HAL_UARTEx_RxEventCallback>
 8005b8c:	e002      	b.n	8005b94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fb fb98 	bl	80012c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e002      	b.n	8005b9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3730      	adds	r7, #48	; 0x30
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005be2:	f023 030c 	bic.w	r3, r3, #12
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <UART_SetConfig+0x114>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d103      	bne.n	8005c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7fe fccc 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	e002      	b.n	8005c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c18:	f7fe fcb4 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009a      	lsls	r2, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <UART_SetConfig+0x118>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	0119      	lsls	r1, r3, #4
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009a      	lsls	r2, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <UART_SetConfig+0x118>)
 8005c56:	fba3 0302 	umull	r0, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	2064      	movs	r0, #100	; 0x64
 8005c5e:	fb00 f303 	mul.w	r3, r0, r3
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	3332      	adds	r3, #50	; 0x32
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <UART_SetConfig+0x118>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c74:	4419      	add	r1, r3
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009a      	lsls	r2, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <UART_SetConfig+0x118>)
 8005c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	2064      	movs	r0, #100	; 0x64
 8005c96:	fb00 f303 	mul.w	r3, r0, r3
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	3332      	adds	r3, #50	; 0x32
 8005ca0:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <UART_SetConfig+0x118>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	f003 020f 	and.w	r2, r3, #15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40013800 	.word	0x40013800
 8005cc0:	51eb851f 	.word	0x51eb851f

08005cc4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	4603      	mov	r3, r0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	f023 030f 	bic.w	r3, r3, #15
 8005cd4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	f043 030c 	orr.w	r3, r3, #12
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	f043 0308 	orr.w	r3, r3, #8
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	f043 030c 	orr.w	r3, r3, #12
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	f043 0308 	orr.w	r3, r3, #8
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8005d04:	f107 0208 	add.w	r2, r7, #8
 8005d08:	2364      	movs	r3, #100	; 0x64
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	214e      	movs	r1, #78	; 0x4e
 8005d10:	4803      	ldr	r0, [pc, #12]	; (8005d20 <lcd_send_cmd+0x5c>)
 8005d12:	f7fd fd15 	bl	8003740 <HAL_I2C_Master_Transmit>
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200002e4 	.word	0x200002e4

08005d24 <lcd_send_data>:

void lcd_send_data (char data)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	f023 030f 	bic.w	r3, r3, #15
 8005d34:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	f043 030d 	orr.w	r3, r3, #13
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	f043 0309 	orr.w	r3, r3, #9
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	f043 030d 	orr.w	r3, r3, #13
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	f043 0309 	orr.w	r3, r3, #9
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8005d64:	f107 0208 	add.w	r2, r7, #8
 8005d68:	2364      	movs	r3, #100	; 0x64
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	214e      	movs	r1, #78	; 0x4e
 8005d70:	4803      	ldr	r0, [pc, #12]	; (8005d80 <lcd_send_data+0x5c>)
 8005d72:	f7fd fce5 	bl	8003740 <HAL_I2C_Master_Transmit>
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200002e4 	.word	0x200002e4

08005d84 <lcd_clear>:

void lcd_clear (void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8005d8a:	2080      	movs	r0, #128	; 0x80
 8005d8c:	f7ff ff9a 	bl	8005cc4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	e005      	b.n	8005da2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8005d96:	2020      	movs	r0, #32
 8005d98:	f7ff ffc4 	bl	8005d24 <lcd_send_data>
	for (int i=0; i<70; i++)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b45      	cmp	r3, #69	; 0x45
 8005da6:	ddf6      	ble.n	8005d96 <lcd_clear+0x12>
	}
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
    switch (row)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <lcd_put_cur+0x18>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d005      	beq.n	8005dd4 <lcd_put_cur+0x22>
 8005dc8:	e009      	b.n	8005dde <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	603b      	str	r3, [r7, #0]
            break;
 8005dd2:	e004      	b.n	8005dde <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dda:	603b      	str	r3, [r7, #0]
            break;
 8005ddc:	bf00      	nop
    }

    lcd_send_cmd (col);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ff6e 	bl	8005cc4 <lcd_send_cmd>
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <lcd_init>:


void lcd_init (void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8005df4:	2032      	movs	r0, #50	; 0x32
 8005df6:	f7fc fc2b 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005dfa:	2030      	movs	r0, #48	; 0x30
 8005dfc:	f7ff ff62 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8005e00:	2005      	movs	r0, #5
 8005e02:	f7fc fc25 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005e06:	2030      	movs	r0, #48	; 0x30
 8005e08:	f7ff ff5c 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f7fc fc1f 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x30);
 8005e12:	2030      	movs	r0, #48	; 0x30
 8005e14:	f7ff ff56 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(10);
 8005e18:	200a      	movs	r0, #10
 8005e1a:	f7fc fc19 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8005e1e:	2020      	movs	r0, #32
 8005e20:	f7ff ff50 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(10);
 8005e24:	200a      	movs	r0, #10
 8005e26:	f7fc fc13 	bl	8002650 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8005e2a:	2028      	movs	r0, #40	; 0x28
 8005e2c:	f7ff ff4a 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(1);
 8005e30:	2001      	movs	r0, #1
 8005e32:	f7fc fc0d 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8005e36:	2008      	movs	r0, #8
 8005e38:	f7ff ff44 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(1);
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f7fc fc07 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8005e42:	2001      	movs	r0, #1
 8005e44:	f7ff ff3e 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(1);
 8005e48:	2001      	movs	r0, #1
 8005e4a:	f7fc fc01 	bl	8002650 <HAL_Delay>
	HAL_Delay(1);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f7fc fbfe 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8005e54:	2006      	movs	r0, #6
 8005e56:	f7ff ff35 	bl	8005cc4 <lcd_send_cmd>
	HAL_Delay(1);
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	f7fc fbf8 	bl	8002650 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8005e60:	200c      	movs	r0, #12
 8005e62:	f7ff ff2f 	bl	8005cc4 <lcd_send_cmd>
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8005e72:	e006      	b.n	8005e82 <lcd_send_string+0x18>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff ff51 	bl	8005d24 <lcd_send_data>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f4      	bne.n	8005e74 <lcd_send_string+0xa>
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <siprintf>:
 8005e94:	b40e      	push	{r1, r2, r3}
 8005e96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e9a:	b500      	push	{lr}
 8005e9c:	b09c      	sub	sp, #112	; 0x70
 8005e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005ea0:	9002      	str	r0, [sp, #8]
 8005ea2:	9006      	str	r0, [sp, #24]
 8005ea4:	9107      	str	r1, [sp, #28]
 8005ea6:	9104      	str	r1, [sp, #16]
 8005ea8:	4808      	ldr	r0, [pc, #32]	; (8005ecc <siprintf+0x38>)
 8005eaa:	4909      	ldr	r1, [pc, #36]	; (8005ed0 <siprintf+0x3c>)
 8005eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb0:	9105      	str	r1, [sp, #20]
 8005eb2:	6800      	ldr	r0, [r0, #0]
 8005eb4:	a902      	add	r1, sp, #8
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	f000 f9ba 	bl	8006230 <_svfiprintf_r>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	9b02      	ldr	r3, [sp, #8]
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	b01c      	add	sp, #112	; 0x70
 8005ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec8:	b003      	add	sp, #12
 8005eca:	4770      	bx	lr
 8005ecc:	20000264 	.word	0x20000264
 8005ed0:	ffff0208 	.word	0xffff0208

08005ed4 <siscanf>:
 8005ed4:	b40e      	push	{r1, r2, r3}
 8005ed6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005eda:	b530      	push	{r4, r5, lr}
 8005edc:	b09c      	sub	sp, #112	; 0x70
 8005ede:	ac1f      	add	r4, sp, #124	; 0x7c
 8005ee0:	f854 5b04 	ldr.w	r5, [r4], #4
 8005ee4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ee8:	9002      	str	r0, [sp, #8]
 8005eea:	9006      	str	r0, [sp, #24]
 8005eec:	f7fa f938 	bl	8000160 <strlen>
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <siscanf+0x4c>)
 8005ef2:	9003      	str	r0, [sp, #12]
 8005ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005efa:	9314      	str	r3, [sp, #80]	; 0x50
 8005efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f00:	9007      	str	r0, [sp, #28]
 8005f02:	4808      	ldr	r0, [pc, #32]	; (8005f24 <siscanf+0x50>)
 8005f04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f08:	462a      	mov	r2, r5
 8005f0a:	4623      	mov	r3, r4
 8005f0c:	a902      	add	r1, sp, #8
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	9401      	str	r4, [sp, #4]
 8005f12:	f000 fae5 	bl	80064e0 <__ssvfiscanf_r>
 8005f16:	b01c      	add	sp, #112	; 0x70
 8005f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f1c:	b003      	add	sp, #12
 8005f1e:	4770      	bx	lr
 8005f20:	08005f29 	.word	0x08005f29
 8005f24:	20000264 	.word	0x20000264

08005f28 <__seofread>:
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4770      	bx	lr

08005f2c <memset>:
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4402      	add	r2, r0
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d100      	bne.n	8005f36 <memset+0xa>
 8005f34:	4770      	bx	lr
 8005f36:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3a:	e7f9      	b.n	8005f30 <memset+0x4>

08005f3c <__errno>:
 8005f3c:	4b01      	ldr	r3, [pc, #4]	; (8005f44 <__errno+0x8>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000264 	.word	0x20000264

08005f48 <__libc_init_array>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	4d0c      	ldr	r5, [pc, #48]	; (8005f80 <__libc_init_array+0x38>)
 8005f4e:	4c0d      	ldr	r4, [pc, #52]	; (8005f84 <__libc_init_array+0x3c>)
 8005f50:	1b64      	subs	r4, r4, r5
 8005f52:	10a4      	asrs	r4, r4, #2
 8005f54:	42a6      	cmp	r6, r4
 8005f56:	d109      	bne.n	8005f6c <__libc_init_array+0x24>
 8005f58:	f001 f8fe 	bl	8007158 <_init>
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	4d0a      	ldr	r5, [pc, #40]	; (8005f88 <__libc_init_array+0x40>)
 8005f60:	4c0a      	ldr	r4, [pc, #40]	; (8005f8c <__libc_init_array+0x44>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d105      	bne.n	8005f76 <__libc_init_array+0x2e>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f70:	4798      	blx	r3
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7ee      	b.n	8005f54 <__libc_init_array+0xc>
 8005f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7a:	4798      	blx	r3
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e7f2      	b.n	8005f66 <__libc_init_array+0x1e>
 8005f80:	080073f8 	.word	0x080073f8
 8005f84:	080073f8 	.word	0x080073f8
 8005f88:	080073f8 	.word	0x080073f8
 8005f8c:	080073fc 	.word	0x080073fc

08005f90 <__retarget_lock_acquire_recursive>:
 8005f90:	4770      	bx	lr

08005f92 <__retarget_lock_release_recursive>:
 8005f92:	4770      	bx	lr

08005f94 <_free_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4605      	mov	r5, r0
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d040      	beq.n	800601e <_free_r+0x8a>
 8005f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa0:	1f0c      	subs	r4, r1, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfb8      	it	lt
 8005fa6:	18e4      	addlt	r4, r4, r3
 8005fa8:	f000 f8dc 	bl	8006164 <__malloc_lock>
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <_free_r+0x8c>)
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	b933      	cbnz	r3, 8005fc0 <_free_r+0x2c>
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	6014      	str	r4, [r2, #0]
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fbc:	f000 b8d8 	b.w	8006170 <__malloc_unlock>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d908      	bls.n	8005fd6 <_free_r+0x42>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	1821      	adds	r1, r4, r0
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	bf01      	itttt	eq
 8005fcc:	6819      	ldreq	r1, [r3, #0]
 8005fce:	685b      	ldreq	r3, [r3, #4]
 8005fd0:	1809      	addeq	r1, r1, r0
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	e7ed      	b.n	8005fb2 <_free_r+0x1e>
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b10b      	cbz	r3, 8005fe0 <_free_r+0x4c>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d9fa      	bls.n	8005fd6 <_free_r+0x42>
 8005fe0:	6811      	ldr	r1, [r2, #0]
 8005fe2:	1850      	adds	r0, r2, r1
 8005fe4:	42a0      	cmp	r0, r4
 8005fe6:	d10b      	bne.n	8006000 <_free_r+0x6c>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	4401      	add	r1, r0
 8005fec:	1850      	adds	r0, r2, r1
 8005fee:	4283      	cmp	r3, r0
 8005ff0:	6011      	str	r1, [r2, #0]
 8005ff2:	d1e0      	bne.n	8005fb6 <_free_r+0x22>
 8005ff4:	6818      	ldr	r0, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4408      	add	r0, r1
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	6053      	str	r3, [r2, #4]
 8005ffe:	e7da      	b.n	8005fb6 <_free_r+0x22>
 8006000:	d902      	bls.n	8006008 <_free_r+0x74>
 8006002:	230c      	movs	r3, #12
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	e7d6      	b.n	8005fb6 <_free_r+0x22>
 8006008:	6820      	ldr	r0, [r4, #0]
 800600a:	1821      	adds	r1, r4, r0
 800600c:	428b      	cmp	r3, r1
 800600e:	bf01      	itttt	eq
 8006010:	6819      	ldreq	r1, [r3, #0]
 8006012:	685b      	ldreq	r3, [r3, #4]
 8006014:	1809      	addeq	r1, r1, r0
 8006016:	6021      	streq	r1, [r4, #0]
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	6054      	str	r4, [r2, #4]
 800601c:	e7cb      	b.n	8005fb6 <_free_r+0x22>
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	200007dc 	.word	0x200007dc

08006024 <sbrk_aligned>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4e0e      	ldr	r6, [pc, #56]	; (8006060 <sbrk_aligned+0x3c>)
 8006028:	460c      	mov	r4, r1
 800602a:	6831      	ldr	r1, [r6, #0]
 800602c:	4605      	mov	r5, r0
 800602e:	b911      	cbnz	r1, 8006036 <sbrk_aligned+0x12>
 8006030:	f000 ff3a 	bl	8006ea8 <_sbrk_r>
 8006034:	6030      	str	r0, [r6, #0]
 8006036:	4621      	mov	r1, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 ff35 	bl	8006ea8 <_sbrk_r>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d00a      	beq.n	8006058 <sbrk_aligned+0x34>
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d007      	beq.n	800605c <sbrk_aligned+0x38>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4628      	mov	r0, r5
 8006050:	f000 ff2a 	bl	8006ea8 <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d101      	bne.n	800605c <sbrk_aligned+0x38>
 8006058:	f04f 34ff 	mov.w	r4, #4294967295
 800605c:	4620      	mov	r0, r4
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	200007e0 	.word	0x200007e0

08006064 <_malloc_r>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	1ccd      	adds	r5, r1, #3
 800606a:	f025 0503 	bic.w	r5, r5, #3
 800606e:	3508      	adds	r5, #8
 8006070:	2d0c      	cmp	r5, #12
 8006072:	bf38      	it	cc
 8006074:	250c      	movcc	r5, #12
 8006076:	2d00      	cmp	r5, #0
 8006078:	4607      	mov	r7, r0
 800607a:	db01      	blt.n	8006080 <_malloc_r+0x1c>
 800607c:	42a9      	cmp	r1, r5
 800607e:	d905      	bls.n	800608c <_malloc_r+0x28>
 8006080:	230c      	movs	r3, #12
 8006082:	2600      	movs	r6, #0
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4630      	mov	r0, r6
 8006088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006160 <_malloc_r+0xfc>
 8006090:	f000 f868 	bl	8006164 <__malloc_lock>
 8006094:	f8d8 3000 	ldr.w	r3, [r8]
 8006098:	461c      	mov	r4, r3
 800609a:	bb5c      	cbnz	r4, 80060f4 <_malloc_r+0x90>
 800609c:	4629      	mov	r1, r5
 800609e:	4638      	mov	r0, r7
 80060a0:	f7ff ffc0 	bl	8006024 <sbrk_aligned>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	4604      	mov	r4, r0
 80060a8:	d155      	bne.n	8006156 <_malloc_r+0xf2>
 80060aa:	f8d8 4000 	ldr.w	r4, [r8]
 80060ae:	4626      	mov	r6, r4
 80060b0:	2e00      	cmp	r6, #0
 80060b2:	d145      	bne.n	8006140 <_malloc_r+0xdc>
 80060b4:	2c00      	cmp	r4, #0
 80060b6:	d048      	beq.n	800614a <_malloc_r+0xe6>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	4631      	mov	r1, r6
 80060bc:	4638      	mov	r0, r7
 80060be:	eb04 0903 	add.w	r9, r4, r3
 80060c2:	f000 fef1 	bl	8006ea8 <_sbrk_r>
 80060c6:	4581      	cmp	r9, r0
 80060c8:	d13f      	bne.n	800614a <_malloc_r+0xe6>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	4638      	mov	r0, r7
 80060ce:	1a6d      	subs	r5, r5, r1
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7ff ffa7 	bl	8006024 <sbrk_aligned>
 80060d6:	3001      	adds	r0, #1
 80060d8:	d037      	beq.n	800614a <_malloc_r+0xe6>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	442b      	add	r3, r5
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d038      	beq.n	800615a <_malloc_r+0xf6>
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	42a2      	cmp	r2, r4
 80060ec:	d12b      	bne.n	8006146 <_malloc_r+0xe2>
 80060ee:	2200      	movs	r2, #0
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	e00f      	b.n	8006114 <_malloc_r+0xb0>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	1b52      	subs	r2, r2, r5
 80060f8:	d41f      	bmi.n	800613a <_malloc_r+0xd6>
 80060fa:	2a0b      	cmp	r2, #11
 80060fc:	d917      	bls.n	800612e <_malloc_r+0xca>
 80060fe:	1961      	adds	r1, r4, r5
 8006100:	42a3      	cmp	r3, r4
 8006102:	6025      	str	r5, [r4, #0]
 8006104:	bf18      	it	ne
 8006106:	6059      	strne	r1, [r3, #4]
 8006108:	6863      	ldr	r3, [r4, #4]
 800610a:	bf08      	it	eq
 800610c:	f8c8 1000 	streq.w	r1, [r8]
 8006110:	5162      	str	r2, [r4, r5]
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	4638      	mov	r0, r7
 8006116:	f104 060b 	add.w	r6, r4, #11
 800611a:	f000 f829 	bl	8006170 <__malloc_unlock>
 800611e:	f026 0607 	bic.w	r6, r6, #7
 8006122:	1d23      	adds	r3, r4, #4
 8006124:	1af2      	subs	r2, r6, r3
 8006126:	d0ae      	beq.n	8006086 <_malloc_r+0x22>
 8006128:	1b9b      	subs	r3, r3, r6
 800612a:	50a3      	str	r3, [r4, r2]
 800612c:	e7ab      	b.n	8006086 <_malloc_r+0x22>
 800612e:	42a3      	cmp	r3, r4
 8006130:	6862      	ldr	r2, [r4, #4]
 8006132:	d1dd      	bne.n	80060f0 <_malloc_r+0x8c>
 8006134:	f8c8 2000 	str.w	r2, [r8]
 8006138:	e7ec      	b.n	8006114 <_malloc_r+0xb0>
 800613a:	4623      	mov	r3, r4
 800613c:	6864      	ldr	r4, [r4, #4]
 800613e:	e7ac      	b.n	800609a <_malloc_r+0x36>
 8006140:	4634      	mov	r4, r6
 8006142:	6876      	ldr	r6, [r6, #4]
 8006144:	e7b4      	b.n	80060b0 <_malloc_r+0x4c>
 8006146:	4613      	mov	r3, r2
 8006148:	e7cc      	b.n	80060e4 <_malloc_r+0x80>
 800614a:	230c      	movs	r3, #12
 800614c:	4638      	mov	r0, r7
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	f000 f80e 	bl	8006170 <__malloc_unlock>
 8006154:	e797      	b.n	8006086 <_malloc_r+0x22>
 8006156:	6025      	str	r5, [r4, #0]
 8006158:	e7dc      	b.n	8006114 <_malloc_r+0xb0>
 800615a:	605b      	str	r3, [r3, #4]
 800615c:	deff      	udf	#255	; 0xff
 800615e:	bf00      	nop
 8006160:	200007dc 	.word	0x200007dc

08006164 <__malloc_lock>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__malloc_lock+0x8>)
 8006166:	f7ff bf13 	b.w	8005f90 <__retarget_lock_acquire_recursive>
 800616a:	bf00      	nop
 800616c:	200007d8 	.word	0x200007d8

08006170 <__malloc_unlock>:
 8006170:	4801      	ldr	r0, [pc, #4]	; (8006178 <__malloc_unlock+0x8>)
 8006172:	f7ff bf0e 	b.w	8005f92 <__retarget_lock_release_recursive>
 8006176:	bf00      	nop
 8006178:	200007d8 	.word	0x200007d8

0800617c <__ssputs_r>:
 800617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	461f      	mov	r7, r3
 8006182:	688e      	ldr	r6, [r1, #8]
 8006184:	4682      	mov	sl, r0
 8006186:	42be      	cmp	r6, r7
 8006188:	460c      	mov	r4, r1
 800618a:	4690      	mov	r8, r2
 800618c:	680b      	ldr	r3, [r1, #0]
 800618e:	d82c      	bhi.n	80061ea <__ssputs_r+0x6e>
 8006190:	898a      	ldrh	r2, [r1, #12]
 8006192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006196:	d026      	beq.n	80061e6 <__ssputs_r+0x6a>
 8006198:	6965      	ldr	r5, [r4, #20]
 800619a:	6909      	ldr	r1, [r1, #16]
 800619c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a0:	eba3 0901 	sub.w	r9, r3, r1
 80061a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061a8:	1c7b      	adds	r3, r7, #1
 80061aa:	444b      	add	r3, r9
 80061ac:	106d      	asrs	r5, r5, #1
 80061ae:	429d      	cmp	r5, r3
 80061b0:	bf38      	it	cc
 80061b2:	461d      	movcc	r5, r3
 80061b4:	0553      	lsls	r3, r2, #21
 80061b6:	d527      	bpl.n	8006208 <__ssputs_r+0x8c>
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7ff ff53 	bl	8006064 <_malloc_r>
 80061be:	4606      	mov	r6, r0
 80061c0:	b360      	cbz	r0, 800621c <__ssputs_r+0xa0>
 80061c2:	464a      	mov	r2, r9
 80061c4:	6921      	ldr	r1, [r4, #16]
 80061c6:	f000 fe8d 	bl	8006ee4 <memcpy>
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	6126      	str	r6, [r4, #16]
 80061d8:	444e      	add	r6, r9
 80061da:	6026      	str	r6, [r4, #0]
 80061dc:	463e      	mov	r6, r7
 80061de:	6165      	str	r5, [r4, #20]
 80061e0:	eba5 0509 	sub.w	r5, r5, r9
 80061e4:	60a5      	str	r5, [r4, #8]
 80061e6:	42be      	cmp	r6, r7
 80061e8:	d900      	bls.n	80061ec <__ssputs_r+0x70>
 80061ea:	463e      	mov	r6, r7
 80061ec:	4632      	mov	r2, r6
 80061ee:	4641      	mov	r1, r8
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	f000 fe3e 	bl	8006e72 <memmove>
 80061f6:	2000      	movs	r0, #0
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	1b9b      	subs	r3, r3, r6
 80061fc:	60a3      	str	r3, [r4, #8]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	4433      	add	r3, r6
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006208:	462a      	mov	r2, r5
 800620a:	f000 fe79 	bl	8006f00 <_realloc_r>
 800620e:	4606      	mov	r6, r0
 8006210:	2800      	cmp	r0, #0
 8006212:	d1e0      	bne.n	80061d6 <__ssputs_r+0x5a>
 8006214:	4650      	mov	r0, sl
 8006216:	6921      	ldr	r1, [r4, #16]
 8006218:	f7ff febc 	bl	8005f94 <_free_r>
 800621c:	230c      	movs	r3, #12
 800621e:	f8ca 3000 	str.w	r3, [sl]
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622c:	81a3      	strh	r3, [r4, #12]
 800622e:	e7e9      	b.n	8006204 <__ssputs_r+0x88>

08006230 <_svfiprintf_r>:
 8006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	4698      	mov	r8, r3
 8006236:	898b      	ldrh	r3, [r1, #12]
 8006238:	4607      	mov	r7, r0
 800623a:	061b      	lsls	r3, r3, #24
 800623c:	460d      	mov	r5, r1
 800623e:	4614      	mov	r4, r2
 8006240:	b09d      	sub	sp, #116	; 0x74
 8006242:	d50e      	bpl.n	8006262 <_svfiprintf_r+0x32>
 8006244:	690b      	ldr	r3, [r1, #16]
 8006246:	b963      	cbnz	r3, 8006262 <_svfiprintf_r+0x32>
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	f7ff ff0b 	bl	8006064 <_malloc_r>
 800624e:	6028      	str	r0, [r5, #0]
 8006250:	6128      	str	r0, [r5, #16]
 8006252:	b920      	cbnz	r0, 800625e <_svfiprintf_r+0x2e>
 8006254:	230c      	movs	r3, #12
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	f04f 30ff 	mov.w	r0, #4294967295
 800625c:	e0d0      	b.n	8006400 <_svfiprintf_r+0x1d0>
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	616b      	str	r3, [r5, #20]
 8006262:	2300      	movs	r3, #0
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	2320      	movs	r3, #32
 8006268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800626c:	2330      	movs	r3, #48	; 0x30
 800626e:	f04f 0901 	mov.w	r9, #1
 8006272:	f8cd 800c 	str.w	r8, [sp, #12]
 8006276:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006418 <_svfiprintf_r+0x1e8>
 800627a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800627e:	4623      	mov	r3, r4
 8006280:	469a      	mov	sl, r3
 8006282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006286:	b10a      	cbz	r2, 800628c <_svfiprintf_r+0x5c>
 8006288:	2a25      	cmp	r2, #37	; 0x25
 800628a:	d1f9      	bne.n	8006280 <_svfiprintf_r+0x50>
 800628c:	ebba 0b04 	subs.w	fp, sl, r4
 8006290:	d00b      	beq.n	80062aa <_svfiprintf_r+0x7a>
 8006292:	465b      	mov	r3, fp
 8006294:	4622      	mov	r2, r4
 8006296:	4629      	mov	r1, r5
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff ff6f 	bl	800617c <__ssputs_r>
 800629e:	3001      	adds	r0, #1
 80062a0:	f000 80a9 	beq.w	80063f6 <_svfiprintf_r+0x1c6>
 80062a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a6:	445a      	add	r2, fp
 80062a8:	9209      	str	r2, [sp, #36]	; 0x24
 80062aa:	f89a 3000 	ldrb.w	r3, [sl]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 80a1 	beq.w	80063f6 <_svfiprintf_r+0x1c6>
 80062b4:	2300      	movs	r3, #0
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062be:	f10a 0a01 	add.w	sl, sl, #1
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	9307      	str	r3, [sp, #28]
 80062c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ca:	931a      	str	r3, [sp, #104]	; 0x68
 80062cc:	4654      	mov	r4, sl
 80062ce:	2205      	movs	r2, #5
 80062d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d4:	4850      	ldr	r0, [pc, #320]	; (8006418 <_svfiprintf_r+0x1e8>)
 80062d6:	f000 fdf7 	bl	8006ec8 <memchr>
 80062da:	9a04      	ldr	r2, [sp, #16]
 80062dc:	b9d8      	cbnz	r0, 8006316 <_svfiprintf_r+0xe6>
 80062de:	06d0      	lsls	r0, r2, #27
 80062e0:	bf44      	itt	mi
 80062e2:	2320      	movmi	r3, #32
 80062e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e8:	0711      	lsls	r1, r2, #28
 80062ea:	bf44      	itt	mi
 80062ec:	232b      	movmi	r3, #43	; 0x2b
 80062ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f2:	f89a 3000 	ldrb.w	r3, [sl]
 80062f6:	2b2a      	cmp	r3, #42	; 0x2a
 80062f8:	d015      	beq.n	8006326 <_svfiprintf_r+0xf6>
 80062fa:	4654      	mov	r4, sl
 80062fc:	2000      	movs	r0, #0
 80062fe:	f04f 0c0a 	mov.w	ip, #10
 8006302:	9a07      	ldr	r2, [sp, #28]
 8006304:	4621      	mov	r1, r4
 8006306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630a:	3b30      	subs	r3, #48	; 0x30
 800630c:	2b09      	cmp	r3, #9
 800630e:	d94d      	bls.n	80063ac <_svfiprintf_r+0x17c>
 8006310:	b1b0      	cbz	r0, 8006340 <_svfiprintf_r+0x110>
 8006312:	9207      	str	r2, [sp, #28]
 8006314:	e014      	b.n	8006340 <_svfiprintf_r+0x110>
 8006316:	eba0 0308 	sub.w	r3, r0, r8
 800631a:	fa09 f303 	lsl.w	r3, r9, r3
 800631e:	4313      	orrs	r3, r2
 8006320:	46a2      	mov	sl, r4
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	e7d2      	b.n	80062cc <_svfiprintf_r+0x9c>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	1d19      	adds	r1, r3, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	9103      	str	r1, [sp, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbb      	ittet	lt
 8006332:	425b      	neglt	r3, r3
 8006334:	f042 0202 	orrlt.w	r2, r2, #2
 8006338:	9307      	strge	r3, [sp, #28]
 800633a:	9307      	strlt	r3, [sp, #28]
 800633c:	bfb8      	it	lt
 800633e:	9204      	strlt	r2, [sp, #16]
 8006340:	7823      	ldrb	r3, [r4, #0]
 8006342:	2b2e      	cmp	r3, #46	; 0x2e
 8006344:	d10c      	bne.n	8006360 <_svfiprintf_r+0x130>
 8006346:	7863      	ldrb	r3, [r4, #1]
 8006348:	2b2a      	cmp	r3, #42	; 0x2a
 800634a:	d134      	bne.n	80063b6 <_svfiprintf_r+0x186>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	3402      	adds	r4, #2
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	9203      	str	r2, [sp, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfb8      	it	lt
 800635a:	f04f 33ff 	movlt.w	r3, #4294967295
 800635e:	9305      	str	r3, [sp, #20]
 8006360:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800641c <_svfiprintf_r+0x1ec>
 8006364:	2203      	movs	r2, #3
 8006366:	4650      	mov	r0, sl
 8006368:	7821      	ldrb	r1, [r4, #0]
 800636a:	f000 fdad 	bl	8006ec8 <memchr>
 800636e:	b138      	cbz	r0, 8006380 <_svfiprintf_r+0x150>
 8006370:	2240      	movs	r2, #64	; 0x40
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	eba0 000a 	sub.w	r0, r0, sl
 8006378:	4082      	lsls	r2, r0
 800637a:	4313      	orrs	r3, r2
 800637c:	3401      	adds	r4, #1
 800637e:	9304      	str	r3, [sp, #16]
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	2206      	movs	r2, #6
 8006386:	4826      	ldr	r0, [pc, #152]	; (8006420 <_svfiprintf_r+0x1f0>)
 8006388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800638c:	f000 fd9c 	bl	8006ec8 <memchr>
 8006390:	2800      	cmp	r0, #0
 8006392:	d038      	beq.n	8006406 <_svfiprintf_r+0x1d6>
 8006394:	4b23      	ldr	r3, [pc, #140]	; (8006424 <_svfiprintf_r+0x1f4>)
 8006396:	bb1b      	cbnz	r3, 80063e0 <_svfiprintf_r+0x1b0>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	3307      	adds	r3, #7
 800639c:	f023 0307 	bic.w	r3, r3, #7
 80063a0:	3308      	adds	r3, #8
 80063a2:	9303      	str	r3, [sp, #12]
 80063a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a6:	4433      	add	r3, r6
 80063a8:	9309      	str	r3, [sp, #36]	; 0x24
 80063aa:	e768      	b.n	800627e <_svfiprintf_r+0x4e>
 80063ac:	460c      	mov	r4, r1
 80063ae:	2001      	movs	r0, #1
 80063b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b4:	e7a6      	b.n	8006304 <_svfiprintf_r+0xd4>
 80063b6:	2300      	movs	r3, #0
 80063b8:	f04f 0c0a 	mov.w	ip, #10
 80063bc:	4619      	mov	r1, r3
 80063be:	3401      	adds	r4, #1
 80063c0:	9305      	str	r3, [sp, #20]
 80063c2:	4620      	mov	r0, r4
 80063c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c8:	3a30      	subs	r2, #48	; 0x30
 80063ca:	2a09      	cmp	r2, #9
 80063cc:	d903      	bls.n	80063d6 <_svfiprintf_r+0x1a6>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0c6      	beq.n	8006360 <_svfiprintf_r+0x130>
 80063d2:	9105      	str	r1, [sp, #20]
 80063d4:	e7c4      	b.n	8006360 <_svfiprintf_r+0x130>
 80063d6:	4604      	mov	r4, r0
 80063d8:	2301      	movs	r3, #1
 80063da:	fb0c 2101 	mla	r1, ip, r1, r2
 80063de:	e7f0      	b.n	80063c2 <_svfiprintf_r+0x192>
 80063e0:	ab03      	add	r3, sp, #12
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	462a      	mov	r2, r5
 80063e6:	4638      	mov	r0, r7
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <_svfiprintf_r+0x1f8>)
 80063ea:	a904      	add	r1, sp, #16
 80063ec:	f3af 8000 	nop.w
 80063f0:	1c42      	adds	r2, r0, #1
 80063f2:	4606      	mov	r6, r0
 80063f4:	d1d6      	bne.n	80063a4 <_svfiprintf_r+0x174>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	065b      	lsls	r3, r3, #25
 80063fa:	f53f af2d 	bmi.w	8006258 <_svfiprintf_r+0x28>
 80063fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006400:	b01d      	add	sp, #116	; 0x74
 8006402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006406:	ab03      	add	r3, sp, #12
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	462a      	mov	r2, r5
 800640c:	4638      	mov	r0, r7
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <_svfiprintf_r+0x1f8>)
 8006410:	a904      	add	r1, sp, #16
 8006412:	f000 fa4f 	bl	80068b4 <_printf_i>
 8006416:	e7eb      	b.n	80063f0 <_svfiprintf_r+0x1c0>
 8006418:	080072a6 	.word	0x080072a6
 800641c:	080072ac 	.word	0x080072ac
 8006420:	080072b0 	.word	0x080072b0
 8006424:	00000000 	.word	0x00000000
 8006428:	0800617d 	.word	0x0800617d

0800642c <_sungetc_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	1c4b      	adds	r3, r1, #1
 8006430:	4614      	mov	r4, r2
 8006432:	d103      	bne.n	800643c <_sungetc_r+0x10>
 8006434:	f04f 35ff 	mov.w	r5, #4294967295
 8006438:	4628      	mov	r0, r5
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	8993      	ldrh	r3, [r2, #12]
 800643e:	b2cd      	uxtb	r5, r1
 8006440:	f023 0320 	bic.w	r3, r3, #32
 8006444:	8193      	strh	r3, [r2, #12]
 8006446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006448:	6852      	ldr	r2, [r2, #4]
 800644a:	b18b      	cbz	r3, 8006470 <_sungetc_r+0x44>
 800644c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800644e:	4293      	cmp	r3, r2
 8006450:	dd08      	ble.n	8006464 <_sungetc_r+0x38>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	1e5a      	subs	r2, r3, #1
 8006456:	6022      	str	r2, [r4, #0]
 8006458:	f803 5c01 	strb.w	r5, [r3, #-1]
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	3301      	adds	r3, #1
 8006460:	6063      	str	r3, [r4, #4]
 8006462:	e7e9      	b.n	8006438 <_sungetc_r+0xc>
 8006464:	4621      	mov	r1, r4
 8006466:	f000 fccc 	bl	8006e02 <__submore>
 800646a:	2800      	cmp	r0, #0
 800646c:	d0f1      	beq.n	8006452 <_sungetc_r+0x26>
 800646e:	e7e1      	b.n	8006434 <_sungetc_r+0x8>
 8006470:	6921      	ldr	r1, [r4, #16]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	b151      	cbz	r1, 800648c <_sungetc_r+0x60>
 8006476:	4299      	cmp	r1, r3
 8006478:	d208      	bcs.n	800648c <_sungetc_r+0x60>
 800647a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800647e:	42a9      	cmp	r1, r5
 8006480:	d104      	bne.n	800648c <_sungetc_r+0x60>
 8006482:	3b01      	subs	r3, #1
 8006484:	3201      	adds	r2, #1
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	6062      	str	r2, [r4, #4]
 800648a:	e7d5      	b.n	8006438 <_sungetc_r+0xc>
 800648c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006494:	6363      	str	r3, [r4, #52]	; 0x34
 8006496:	2303      	movs	r3, #3
 8006498:	63a3      	str	r3, [r4, #56]	; 0x38
 800649a:	4623      	mov	r3, r4
 800649c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7dc      	b.n	8006460 <_sungetc_r+0x34>

080064a6 <__ssrefill_r>:
 80064a6:	b510      	push	{r4, lr}
 80064a8:	460c      	mov	r4, r1
 80064aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80064ac:	b169      	cbz	r1, 80064ca <__ssrefill_r+0x24>
 80064ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d001      	beq.n	80064ba <__ssrefill_r+0x14>
 80064b6:	f7ff fd6d 	bl	8005f94 <_free_r>
 80064ba:	2000      	movs	r0, #0
 80064bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064be:	6360      	str	r0, [r4, #52]	; 0x34
 80064c0:	6063      	str	r3, [r4, #4]
 80064c2:	b113      	cbz	r3, 80064ca <__ssrefill_r+0x24>
 80064c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	6063      	str	r3, [r4, #4]
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f043 0320 	orr.w	r3, r3, #32
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	e7f3      	b.n	80064c8 <__ssrefill_r+0x22>

080064e0 <__ssvfiscanf_r>:
 80064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	460c      	mov	r4, r1
 80064e6:	2100      	movs	r1, #0
 80064e8:	4606      	mov	r6, r0
 80064ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80064ee:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80064f2:	49a6      	ldr	r1, [pc, #664]	; (800678c <__ssvfiscanf_r+0x2ac>)
 80064f4:	f10d 0804 	add.w	r8, sp, #4
 80064f8:	91a0      	str	r1, [sp, #640]	; 0x280
 80064fa:	49a5      	ldr	r1, [pc, #660]	; (8006790 <__ssvfiscanf_r+0x2b0>)
 80064fc:	4fa5      	ldr	r7, [pc, #660]	; (8006794 <__ssvfiscanf_r+0x2b4>)
 80064fe:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006798 <__ssvfiscanf_r+0x2b8>
 8006502:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006506:	91a1      	str	r1, [sp, #644]	; 0x284
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	7813      	ldrb	r3, [r2, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 815a 	beq.w	80067c6 <__ssvfiscanf_r+0x2e6>
 8006512:	5cf9      	ldrb	r1, [r7, r3]
 8006514:	1c55      	adds	r5, r2, #1
 8006516:	f011 0108 	ands.w	r1, r1, #8
 800651a:	d019      	beq.n	8006550 <__ssvfiscanf_r+0x70>
 800651c:	6863      	ldr	r3, [r4, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd0f      	ble.n	8006542 <__ssvfiscanf_r+0x62>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	781a      	ldrb	r2, [r3, #0]
 8006526:	5cba      	ldrb	r2, [r7, r2]
 8006528:	0712      	lsls	r2, r2, #28
 800652a:	d401      	bmi.n	8006530 <__ssvfiscanf_r+0x50>
 800652c:	462a      	mov	r2, r5
 800652e:	e7ec      	b.n	800650a <__ssvfiscanf_r+0x2a>
 8006530:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006532:	3301      	adds	r3, #1
 8006534:	3201      	adds	r2, #1
 8006536:	9245      	str	r2, [sp, #276]	; 0x114
 8006538:	6862      	ldr	r2, [r4, #4]
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	3a01      	subs	r2, #1
 800653e:	6062      	str	r2, [r4, #4]
 8006540:	e7ec      	b.n	800651c <__ssvfiscanf_r+0x3c>
 8006542:	4621      	mov	r1, r4
 8006544:	4630      	mov	r0, r6
 8006546:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006548:	4798      	blx	r3
 800654a:	2800      	cmp	r0, #0
 800654c:	d0e9      	beq.n	8006522 <__ssvfiscanf_r+0x42>
 800654e:	e7ed      	b.n	800652c <__ssvfiscanf_r+0x4c>
 8006550:	2b25      	cmp	r3, #37	; 0x25
 8006552:	d012      	beq.n	800657a <__ssvfiscanf_r+0x9a>
 8006554:	469a      	mov	sl, r3
 8006556:	6863      	ldr	r3, [r4, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f340 8092 	ble.w	8006682 <__ssvfiscanf_r+0x1a2>
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	7813      	ldrb	r3, [r2, #0]
 8006562:	4553      	cmp	r3, sl
 8006564:	f040 812f 	bne.w	80067c6 <__ssvfiscanf_r+0x2e6>
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	3201      	adds	r2, #1
 800656c:	3b01      	subs	r3, #1
 800656e:	6063      	str	r3, [r4, #4]
 8006570:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	9345      	str	r3, [sp, #276]	; 0x114
 8006578:	e7d8      	b.n	800652c <__ssvfiscanf_r+0x4c>
 800657a:	9141      	str	r1, [sp, #260]	; 0x104
 800657c:	9143      	str	r1, [sp, #268]	; 0x10c
 800657e:	7853      	ldrb	r3, [r2, #1]
 8006580:	2b2a      	cmp	r3, #42	; 0x2a
 8006582:	bf04      	itt	eq
 8006584:	2310      	moveq	r3, #16
 8006586:	1c95      	addeq	r5, r2, #2
 8006588:	f04f 020a 	mov.w	r2, #10
 800658c:	bf08      	it	eq
 800658e:	9341      	streq	r3, [sp, #260]	; 0x104
 8006590:	46aa      	mov	sl, r5
 8006592:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006596:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800659a:	2b09      	cmp	r3, #9
 800659c:	d91c      	bls.n	80065d8 <__ssvfiscanf_r+0xf8>
 800659e:	2203      	movs	r2, #3
 80065a0:	487d      	ldr	r0, [pc, #500]	; (8006798 <__ssvfiscanf_r+0x2b8>)
 80065a2:	f000 fc91 	bl	8006ec8 <memchr>
 80065a6:	b138      	cbz	r0, 80065b8 <__ssvfiscanf_r+0xd8>
 80065a8:	2301      	movs	r3, #1
 80065aa:	4655      	mov	r5, sl
 80065ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80065ae:	eba0 0009 	sub.w	r0, r0, r9
 80065b2:	4083      	lsls	r3, r0
 80065b4:	4313      	orrs	r3, r2
 80065b6:	9341      	str	r3, [sp, #260]	; 0x104
 80065b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065bc:	2b78      	cmp	r3, #120	; 0x78
 80065be:	d806      	bhi.n	80065ce <__ssvfiscanf_r+0xee>
 80065c0:	2b57      	cmp	r3, #87	; 0x57
 80065c2:	d810      	bhi.n	80065e6 <__ssvfiscanf_r+0x106>
 80065c4:	2b25      	cmp	r3, #37	; 0x25
 80065c6:	d0c5      	beq.n	8006554 <__ssvfiscanf_r+0x74>
 80065c8:	d856      	bhi.n	8006678 <__ssvfiscanf_r+0x198>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d064      	beq.n	8006698 <__ssvfiscanf_r+0x1b8>
 80065ce:	2303      	movs	r3, #3
 80065d0:	9347      	str	r3, [sp, #284]	; 0x11c
 80065d2:	230a      	movs	r3, #10
 80065d4:	9342      	str	r3, [sp, #264]	; 0x108
 80065d6:	e075      	b.n	80066c4 <__ssvfiscanf_r+0x1e4>
 80065d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80065da:	4655      	mov	r5, sl
 80065dc:	fb02 1103 	mla	r1, r2, r3, r1
 80065e0:	3930      	subs	r1, #48	; 0x30
 80065e2:	9143      	str	r1, [sp, #268]	; 0x10c
 80065e4:	e7d4      	b.n	8006590 <__ssvfiscanf_r+0xb0>
 80065e6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80065ea:	2a20      	cmp	r2, #32
 80065ec:	d8ef      	bhi.n	80065ce <__ssvfiscanf_r+0xee>
 80065ee:	a101      	add	r1, pc, #4	; (adr r1, 80065f4 <__ssvfiscanf_r+0x114>)
 80065f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065f4:	080066a7 	.word	0x080066a7
 80065f8:	080065cf 	.word	0x080065cf
 80065fc:	080065cf 	.word	0x080065cf
 8006600:	08006705 	.word	0x08006705
 8006604:	080065cf 	.word	0x080065cf
 8006608:	080065cf 	.word	0x080065cf
 800660c:	080065cf 	.word	0x080065cf
 8006610:	080065cf 	.word	0x080065cf
 8006614:	080065cf 	.word	0x080065cf
 8006618:	080065cf 	.word	0x080065cf
 800661c:	080065cf 	.word	0x080065cf
 8006620:	0800671b 	.word	0x0800671b
 8006624:	08006701 	.word	0x08006701
 8006628:	0800667f 	.word	0x0800667f
 800662c:	0800667f 	.word	0x0800667f
 8006630:	0800667f 	.word	0x0800667f
 8006634:	080065cf 	.word	0x080065cf
 8006638:	080066bd 	.word	0x080066bd
 800663c:	080065cf 	.word	0x080065cf
 8006640:	080065cf 	.word	0x080065cf
 8006644:	080065cf 	.word	0x080065cf
 8006648:	080065cf 	.word	0x080065cf
 800664c:	0800672b 	.word	0x0800672b
 8006650:	080066f9 	.word	0x080066f9
 8006654:	0800669f 	.word	0x0800669f
 8006658:	080065cf 	.word	0x080065cf
 800665c:	080065cf 	.word	0x080065cf
 8006660:	08006727 	.word	0x08006727
 8006664:	080065cf 	.word	0x080065cf
 8006668:	08006701 	.word	0x08006701
 800666c:	080065cf 	.word	0x080065cf
 8006670:	080065cf 	.word	0x080065cf
 8006674:	080066a7 	.word	0x080066a7
 8006678:	3b45      	subs	r3, #69	; 0x45
 800667a:	2b02      	cmp	r3, #2
 800667c:	d8a7      	bhi.n	80065ce <__ssvfiscanf_r+0xee>
 800667e:	2305      	movs	r3, #5
 8006680:	e01f      	b.n	80066c2 <__ssvfiscanf_r+0x1e2>
 8006682:	4621      	mov	r1, r4
 8006684:	4630      	mov	r0, r6
 8006686:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006688:	4798      	blx	r3
 800668a:	2800      	cmp	r0, #0
 800668c:	f43f af67 	beq.w	800655e <__ssvfiscanf_r+0x7e>
 8006690:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006692:	2800      	cmp	r0, #0
 8006694:	f040 808d 	bne.w	80067b2 <__ssvfiscanf_r+0x2d2>
 8006698:	f04f 30ff 	mov.w	r0, #4294967295
 800669c:	e08f      	b.n	80067be <__ssvfiscanf_r+0x2de>
 800669e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80066a0:	f042 0220 	orr.w	r2, r2, #32
 80066a4:	9241      	str	r2, [sp, #260]	; 0x104
 80066a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80066a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ac:	9241      	str	r2, [sp, #260]	; 0x104
 80066ae:	2210      	movs	r2, #16
 80066b0:	2b6f      	cmp	r3, #111	; 0x6f
 80066b2:	bf34      	ite	cc
 80066b4:	2303      	movcc	r3, #3
 80066b6:	2304      	movcs	r3, #4
 80066b8:	9242      	str	r2, [sp, #264]	; 0x108
 80066ba:	e002      	b.n	80066c2 <__ssvfiscanf_r+0x1e2>
 80066bc:	2300      	movs	r3, #0
 80066be:	9342      	str	r3, [sp, #264]	; 0x108
 80066c0:	2303      	movs	r3, #3
 80066c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd3d      	ble.n	8006746 <__ssvfiscanf_r+0x266>
 80066ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80066cc:	0659      	lsls	r1, r3, #25
 80066ce:	d404      	bmi.n	80066da <__ssvfiscanf_r+0x1fa>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	5cba      	ldrb	r2, [r7, r2]
 80066d6:	0712      	lsls	r2, r2, #28
 80066d8:	d43c      	bmi.n	8006754 <__ssvfiscanf_r+0x274>
 80066da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80066dc:	2b02      	cmp	r3, #2
 80066de:	dc4b      	bgt.n	8006778 <__ssvfiscanf_r+0x298>
 80066e0:	466b      	mov	r3, sp
 80066e2:	4622      	mov	r2, r4
 80066e4:	4630      	mov	r0, r6
 80066e6:	a941      	add	r1, sp, #260	; 0x104
 80066e8:	f000 fa06 	bl	8006af8 <_scanf_chars>
 80066ec:	2801      	cmp	r0, #1
 80066ee:	d06a      	beq.n	80067c6 <__ssvfiscanf_r+0x2e6>
 80066f0:	2802      	cmp	r0, #2
 80066f2:	f47f af1b 	bne.w	800652c <__ssvfiscanf_r+0x4c>
 80066f6:	e7cb      	b.n	8006690 <__ssvfiscanf_r+0x1b0>
 80066f8:	2308      	movs	r3, #8
 80066fa:	9342      	str	r3, [sp, #264]	; 0x108
 80066fc:	2304      	movs	r3, #4
 80066fe:	e7e0      	b.n	80066c2 <__ssvfiscanf_r+0x1e2>
 8006700:	220a      	movs	r2, #10
 8006702:	e7d5      	b.n	80066b0 <__ssvfiscanf_r+0x1d0>
 8006704:	4629      	mov	r1, r5
 8006706:	4640      	mov	r0, r8
 8006708:	f000 fb42 	bl	8006d90 <__sccl>
 800670c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800670e:	4605      	mov	r5, r0
 8006710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006714:	9341      	str	r3, [sp, #260]	; 0x104
 8006716:	2301      	movs	r3, #1
 8006718:	e7d3      	b.n	80066c2 <__ssvfiscanf_r+0x1e2>
 800671a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800671c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006720:	9341      	str	r3, [sp, #260]	; 0x104
 8006722:	2300      	movs	r3, #0
 8006724:	e7cd      	b.n	80066c2 <__ssvfiscanf_r+0x1e2>
 8006726:	2302      	movs	r3, #2
 8006728:	e7cb      	b.n	80066c2 <__ssvfiscanf_r+0x1e2>
 800672a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800672c:	06c3      	lsls	r3, r0, #27
 800672e:	f53f aefd 	bmi.w	800652c <__ssvfiscanf_r+0x4c>
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006736:	1d19      	adds	r1, r3, #4
 8006738:	9100      	str	r1, [sp, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	07c0      	lsls	r0, r0, #31
 800673e:	bf4c      	ite	mi
 8006740:	801a      	strhmi	r2, [r3, #0]
 8006742:	601a      	strpl	r2, [r3, #0]
 8006744:	e6f2      	b.n	800652c <__ssvfiscanf_r+0x4c>
 8006746:	4621      	mov	r1, r4
 8006748:	4630      	mov	r0, r6
 800674a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800674c:	4798      	blx	r3
 800674e:	2800      	cmp	r0, #0
 8006750:	d0bb      	beq.n	80066ca <__ssvfiscanf_r+0x1ea>
 8006752:	e79d      	b.n	8006690 <__ssvfiscanf_r+0x1b0>
 8006754:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006756:	3201      	adds	r2, #1
 8006758:	9245      	str	r2, [sp, #276]	; 0x114
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	3a01      	subs	r2, #1
 800675e:	2a00      	cmp	r2, #0
 8006760:	6062      	str	r2, [r4, #4]
 8006762:	dd02      	ble.n	800676a <__ssvfiscanf_r+0x28a>
 8006764:	3301      	adds	r3, #1
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	e7b2      	b.n	80066d0 <__ssvfiscanf_r+0x1f0>
 800676a:	4621      	mov	r1, r4
 800676c:	4630      	mov	r0, r6
 800676e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006770:	4798      	blx	r3
 8006772:	2800      	cmp	r0, #0
 8006774:	d0ac      	beq.n	80066d0 <__ssvfiscanf_r+0x1f0>
 8006776:	e78b      	b.n	8006690 <__ssvfiscanf_r+0x1b0>
 8006778:	2b04      	cmp	r3, #4
 800677a:	dc0f      	bgt.n	800679c <__ssvfiscanf_r+0x2bc>
 800677c:	466b      	mov	r3, sp
 800677e:	4622      	mov	r2, r4
 8006780:	4630      	mov	r0, r6
 8006782:	a941      	add	r1, sp, #260	; 0x104
 8006784:	f000 fa12 	bl	8006bac <_scanf_i>
 8006788:	e7b0      	b.n	80066ec <__ssvfiscanf_r+0x20c>
 800678a:	bf00      	nop
 800678c:	0800642d 	.word	0x0800642d
 8006790:	080064a7 	.word	0x080064a7
 8006794:	080072f5 	.word	0x080072f5
 8006798:	080072ac 	.word	0x080072ac
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <__ssvfiscanf_r+0x2ec>)
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f43f aec4 	beq.w	800652c <__ssvfiscanf_r+0x4c>
 80067a4:	466b      	mov	r3, sp
 80067a6:	4622      	mov	r2, r4
 80067a8:	4630      	mov	r0, r6
 80067aa:	a941      	add	r1, sp, #260	; 0x104
 80067ac:	f3af 8000 	nop.w
 80067b0:	e79c      	b.n	80066ec <__ssvfiscanf_r+0x20c>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067b8:	bf18      	it	ne
 80067ba:	f04f 30ff 	movne.w	r0, #4294967295
 80067be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80067c8:	e7f9      	b.n	80067be <__ssvfiscanf_r+0x2de>
 80067ca:	bf00      	nop
 80067cc:	00000000 	.word	0x00000000

080067d0 <_printf_common>:
 80067d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	4616      	mov	r6, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	688a      	ldr	r2, [r1, #8]
 80067da:	690b      	ldr	r3, [r1, #16]
 80067dc:	4607      	mov	r7, r0
 80067de:	4293      	cmp	r3, r2
 80067e0:	bfb8      	it	lt
 80067e2:	4613      	movlt	r3, r2
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ea:	460c      	mov	r4, r1
 80067ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f0:	b10a      	cbz	r2, 80067f6 <_printf_common+0x26>
 80067f2:	3301      	adds	r3, #1
 80067f4:	6033      	str	r3, [r6, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	0699      	lsls	r1, r3, #26
 80067fa:	bf42      	ittt	mi
 80067fc:	6833      	ldrmi	r3, [r6, #0]
 80067fe:	3302      	addmi	r3, #2
 8006800:	6033      	strmi	r3, [r6, #0]
 8006802:	6825      	ldr	r5, [r4, #0]
 8006804:	f015 0506 	ands.w	r5, r5, #6
 8006808:	d106      	bne.n	8006818 <_printf_common+0x48>
 800680a:	f104 0a19 	add.w	sl, r4, #25
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	6832      	ldr	r2, [r6, #0]
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	42ab      	cmp	r3, r5
 8006816:	dc2b      	bgt.n	8006870 <_printf_common+0xa0>
 8006818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800681c:	1e13      	subs	r3, r2, #0
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	2301      	movne	r3, #1
 8006824:	0692      	lsls	r2, r2, #26
 8006826:	d430      	bmi.n	800688a <_printf_common+0xba>
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d023      	beq.n	800687e <_printf_common+0xae>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	f003 0306 	and.w	r3, r3, #6
 800683e:	2b04      	cmp	r3, #4
 8006840:	bf14      	ite	ne
 8006842:	2500      	movne	r5, #0
 8006844:	6833      	ldreq	r3, [r6, #0]
 8006846:	f04f 0600 	mov.w	r6, #0
 800684a:	bf08      	it	eq
 800684c:	68e5      	ldreq	r5, [r4, #12]
 800684e:	f104 041a 	add.w	r4, r4, #26
 8006852:	bf08      	it	eq
 8006854:	1aed      	subeq	r5, r5, r3
 8006856:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800685a:	bf08      	it	eq
 800685c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006860:	4293      	cmp	r3, r2
 8006862:	bfc4      	itt	gt
 8006864:	1a9b      	subgt	r3, r3, r2
 8006866:	18ed      	addgt	r5, r5, r3
 8006868:	42b5      	cmp	r5, r6
 800686a:	d11a      	bne.n	80068a2 <_printf_common+0xd2>
 800686c:	2000      	movs	r0, #0
 800686e:	e008      	b.n	8006882 <_printf_common+0xb2>
 8006870:	2301      	movs	r3, #1
 8006872:	4652      	mov	r2, sl
 8006874:	4649      	mov	r1, r9
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	3001      	adds	r0, #1
 800687c:	d103      	bne.n	8006886 <_printf_common+0xb6>
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	3501      	adds	r5, #1
 8006888:	e7c1      	b.n	800680e <_printf_common+0x3e>
 800688a:	2030      	movs	r0, #48	; 0x30
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006898:	4422      	add	r2, r4
 800689a:	3302      	adds	r3, #2
 800689c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a0:	e7c2      	b.n	8006828 <_printf_common+0x58>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4622      	mov	r2, r4
 80068a6:	4649      	mov	r1, r9
 80068a8:	4638      	mov	r0, r7
 80068aa:	47c0      	blx	r8
 80068ac:	3001      	adds	r0, #1
 80068ae:	d0e6      	beq.n	800687e <_printf_common+0xae>
 80068b0:	3601      	adds	r6, #1
 80068b2:	e7d9      	b.n	8006868 <_printf_common+0x98>

080068b4 <_printf_i>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	7e0f      	ldrb	r7, [r1, #24]
 80068ba:	4691      	mov	r9, r2
 80068bc:	2f78      	cmp	r7, #120	; 0x78
 80068be:	4680      	mov	r8, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	469a      	mov	sl, r3
 80068c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068ca:	d807      	bhi.n	80068dc <_printf_i+0x28>
 80068cc:	2f62      	cmp	r7, #98	; 0x62
 80068ce:	d80a      	bhi.n	80068e6 <_printf_i+0x32>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f000 80d5 	beq.w	8006a80 <_printf_i+0x1cc>
 80068d6:	2f58      	cmp	r7, #88	; 0x58
 80068d8:	f000 80c1 	beq.w	8006a5e <_printf_i+0x1aa>
 80068dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e4:	e03a      	b.n	800695c <_printf_i+0xa8>
 80068e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	d8f6      	bhi.n	80068dc <_printf_i+0x28>
 80068ee:	a101      	add	r1, pc, #4	; (adr r1, 80068f4 <_printf_i+0x40>)
 80068f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f4:	0800694d 	.word	0x0800694d
 80068f8:	08006961 	.word	0x08006961
 80068fc:	080068dd 	.word	0x080068dd
 8006900:	080068dd 	.word	0x080068dd
 8006904:	080068dd 	.word	0x080068dd
 8006908:	080068dd 	.word	0x080068dd
 800690c:	08006961 	.word	0x08006961
 8006910:	080068dd 	.word	0x080068dd
 8006914:	080068dd 	.word	0x080068dd
 8006918:	080068dd 	.word	0x080068dd
 800691c:	080068dd 	.word	0x080068dd
 8006920:	08006a67 	.word	0x08006a67
 8006924:	0800698d 	.word	0x0800698d
 8006928:	08006a21 	.word	0x08006a21
 800692c:	080068dd 	.word	0x080068dd
 8006930:	080068dd 	.word	0x080068dd
 8006934:	08006a89 	.word	0x08006a89
 8006938:	080068dd 	.word	0x080068dd
 800693c:	0800698d 	.word	0x0800698d
 8006940:	080068dd 	.word	0x080068dd
 8006944:	080068dd 	.word	0x080068dd
 8006948:	08006a29 	.word	0x08006a29
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	602a      	str	r2, [r5, #0]
 8006954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e0a0      	b.n	8006aa2 <_printf_i+0x1ee>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	0607      	lsls	r7, r0, #24
 8006966:	f103 0104 	add.w	r1, r3, #4
 800696a:	6029      	str	r1, [r5, #0]
 800696c:	d501      	bpl.n	8006972 <_printf_i+0xbe>
 800696e:	681e      	ldr	r6, [r3, #0]
 8006970:	e003      	b.n	800697a <_printf_i+0xc6>
 8006972:	0646      	lsls	r6, r0, #25
 8006974:	d5fb      	bpl.n	800696e <_printf_i+0xba>
 8006976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800697a:	2e00      	cmp	r6, #0
 800697c:	da03      	bge.n	8006986 <_printf_i+0xd2>
 800697e:	232d      	movs	r3, #45	; 0x2d
 8006980:	4276      	negs	r6, r6
 8006982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006986:	230a      	movs	r3, #10
 8006988:	4859      	ldr	r0, [pc, #356]	; (8006af0 <_printf_i+0x23c>)
 800698a:	e012      	b.n	80069b2 <_printf_i+0xfe>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	1d19      	adds	r1, r3, #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	0605      	lsls	r5, r0, #24
 8006996:	d501      	bpl.n	800699c <_printf_i+0xe8>
 8006998:	681e      	ldr	r6, [r3, #0]
 800699a:	e002      	b.n	80069a2 <_printf_i+0xee>
 800699c:	0641      	lsls	r1, r0, #25
 800699e:	d5fb      	bpl.n	8006998 <_printf_i+0xe4>
 80069a0:	881e      	ldrh	r6, [r3, #0]
 80069a2:	2f6f      	cmp	r7, #111	; 0x6f
 80069a4:	bf0c      	ite	eq
 80069a6:	2308      	moveq	r3, #8
 80069a8:	230a      	movne	r3, #10
 80069aa:	4851      	ldr	r0, [pc, #324]	; (8006af0 <_printf_i+0x23c>)
 80069ac:	2100      	movs	r1, #0
 80069ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b2:	6865      	ldr	r5, [r4, #4]
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	bfa8      	it	ge
 80069b8:	6821      	ldrge	r1, [r4, #0]
 80069ba:	60a5      	str	r5, [r4, #8]
 80069bc:	bfa4      	itt	ge
 80069be:	f021 0104 	bicge.w	r1, r1, #4
 80069c2:	6021      	strge	r1, [r4, #0]
 80069c4:	b90e      	cbnz	r6, 80069ca <_printf_i+0x116>
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	d04b      	beq.n	8006a62 <_printf_i+0x1ae>
 80069ca:	4615      	mov	r5, r2
 80069cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80069d0:	fb03 6711 	mls	r7, r3, r1, r6
 80069d4:	5dc7      	ldrb	r7, [r0, r7]
 80069d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069da:	4637      	mov	r7, r6
 80069dc:	42bb      	cmp	r3, r7
 80069de:	460e      	mov	r6, r1
 80069e0:	d9f4      	bls.n	80069cc <_printf_i+0x118>
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d10b      	bne.n	80069fe <_printf_i+0x14a>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	07de      	lsls	r6, r3, #31
 80069ea:	d508      	bpl.n	80069fe <_printf_i+0x14a>
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	6861      	ldr	r1, [r4, #4]
 80069f0:	4299      	cmp	r1, r3
 80069f2:	bfde      	ittt	le
 80069f4:	2330      	movle	r3, #48	; 0x30
 80069f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069fe:	1b52      	subs	r2, r2, r5
 8006a00:	6122      	str	r2, [r4, #16]
 8006a02:	464b      	mov	r3, r9
 8006a04:	4621      	mov	r1, r4
 8006a06:	4640      	mov	r0, r8
 8006a08:	f8cd a000 	str.w	sl, [sp]
 8006a0c:	aa03      	add	r2, sp, #12
 8006a0e:	f7ff fedf 	bl	80067d0 <_printf_common>
 8006a12:	3001      	adds	r0, #1
 8006a14:	d14a      	bne.n	8006aac <_printf_i+0x1f8>
 8006a16:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1a:	b004      	add	sp, #16
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	f043 0320 	orr.w	r3, r3, #32
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	2778      	movs	r7, #120	; 0x78
 8006a2a:	4832      	ldr	r0, [pc, #200]	; (8006af4 <_printf_i+0x240>)
 8006a2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	6829      	ldr	r1, [r5, #0]
 8006a34:	061f      	lsls	r7, r3, #24
 8006a36:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a3a:	d402      	bmi.n	8006a42 <_printf_i+0x18e>
 8006a3c:	065f      	lsls	r7, r3, #25
 8006a3e:	bf48      	it	mi
 8006a40:	b2b6      	uxthmi	r6, r6
 8006a42:	07df      	lsls	r7, r3, #31
 8006a44:	bf48      	it	mi
 8006a46:	f043 0320 	orrmi.w	r3, r3, #32
 8006a4a:	6029      	str	r1, [r5, #0]
 8006a4c:	bf48      	it	mi
 8006a4e:	6023      	strmi	r3, [r4, #0]
 8006a50:	b91e      	cbnz	r6, 8006a5a <_printf_i+0x1a6>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f023 0320 	bic.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	e7a6      	b.n	80069ac <_printf_i+0xf8>
 8006a5e:	4824      	ldr	r0, [pc, #144]	; (8006af0 <_printf_i+0x23c>)
 8006a60:	e7e4      	b.n	8006a2c <_printf_i+0x178>
 8006a62:	4615      	mov	r5, r2
 8006a64:	e7bd      	b.n	80069e2 <_printf_i+0x12e>
 8006a66:	682b      	ldr	r3, [r5, #0]
 8006a68:	6826      	ldr	r6, [r4, #0]
 8006a6a:	1d18      	adds	r0, r3, #4
 8006a6c:	6961      	ldr	r1, [r4, #20]
 8006a6e:	6028      	str	r0, [r5, #0]
 8006a70:	0635      	lsls	r5, r6, #24
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	d501      	bpl.n	8006a7a <_printf_i+0x1c6>
 8006a76:	6019      	str	r1, [r3, #0]
 8006a78:	e002      	b.n	8006a80 <_printf_i+0x1cc>
 8006a7a:	0670      	lsls	r0, r6, #25
 8006a7c:	d5fb      	bpl.n	8006a76 <_printf_i+0x1c2>
 8006a7e:	8019      	strh	r1, [r3, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	4615      	mov	r5, r2
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	e7bc      	b.n	8006a02 <_printf_i+0x14e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	1d1a      	adds	r2, r3, #4
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	681d      	ldr	r5, [r3, #0]
 8006a92:	6862      	ldr	r2, [r4, #4]
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fa17 	bl	8006ec8 <memchr>
 8006a9a:	b108      	cbz	r0, 8006aa0 <_printf_i+0x1ec>
 8006a9c:	1b40      	subs	r0, r0, r5
 8006a9e:	6060      	str	r0, [r4, #4]
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aaa:	e7aa      	b.n	8006a02 <_printf_i+0x14e>
 8006aac:	462a      	mov	r2, r5
 8006aae:	4649      	mov	r1, r9
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	47d0      	blx	sl
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0ad      	beq.n	8006a16 <_printf_i+0x162>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	079b      	lsls	r3, r3, #30
 8006abe:	d413      	bmi.n	8006ae8 <_printf_i+0x234>
 8006ac0:	68e0      	ldr	r0, [r4, #12]
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	bfb8      	it	lt
 8006ac8:	4618      	movlt	r0, r3
 8006aca:	e7a6      	b.n	8006a1a <_printf_i+0x166>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4632      	mov	r2, r6
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	47d0      	blx	sl
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d09d      	beq.n	8006a16 <_printf_i+0x162>
 8006ada:	3501      	adds	r5, #1
 8006adc:	68e3      	ldr	r3, [r4, #12]
 8006ade:	9903      	ldr	r1, [sp, #12]
 8006ae0:	1a5b      	subs	r3, r3, r1
 8006ae2:	42ab      	cmp	r3, r5
 8006ae4:	dcf2      	bgt.n	8006acc <_printf_i+0x218>
 8006ae6:	e7eb      	b.n	8006ac0 <_printf_i+0x20c>
 8006ae8:	2500      	movs	r5, #0
 8006aea:	f104 0619 	add.w	r6, r4, #25
 8006aee:	e7f5      	b.n	8006adc <_printf_i+0x228>
 8006af0:	080072b7 	.word	0x080072b7
 8006af4:	080072c8 	.word	0x080072c8

08006af8 <_scanf_chars>:
 8006af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006afc:	4615      	mov	r5, r2
 8006afe:	688a      	ldr	r2, [r1, #8]
 8006b00:	4680      	mov	r8, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	b932      	cbnz	r2, 8006b14 <_scanf_chars+0x1c>
 8006b06:	698a      	ldr	r2, [r1, #24]
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2201      	moveq	r2, #1
 8006b0e:	f04f 32ff 	movne.w	r2, #4294967295
 8006b12:	608a      	str	r2, [r1, #8]
 8006b14:	2700      	movs	r7, #0
 8006b16:	6822      	ldr	r2, [r4, #0]
 8006b18:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006ba8 <_scanf_chars+0xb0>
 8006b1c:	06d1      	lsls	r1, r2, #27
 8006b1e:	bf5f      	itttt	pl
 8006b20:	681a      	ldrpl	r2, [r3, #0]
 8006b22:	1d11      	addpl	r1, r2, #4
 8006b24:	6019      	strpl	r1, [r3, #0]
 8006b26:	6816      	ldrpl	r6, [r2, #0]
 8006b28:	69a0      	ldr	r0, [r4, #24]
 8006b2a:	b188      	cbz	r0, 8006b50 <_scanf_chars+0x58>
 8006b2c:	2801      	cmp	r0, #1
 8006b2e:	d107      	bne.n	8006b40 <_scanf_chars+0x48>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	781a      	ldrb	r2, [r3, #0]
 8006b34:	6963      	ldr	r3, [r4, #20]
 8006b36:	5c9b      	ldrb	r3, [r3, r2]
 8006b38:	b953      	cbnz	r3, 8006b50 <_scanf_chars+0x58>
 8006b3a:	2f00      	cmp	r7, #0
 8006b3c:	d031      	beq.n	8006ba2 <_scanf_chars+0xaa>
 8006b3e:	e022      	b.n	8006b86 <_scanf_chars+0x8e>
 8006b40:	2802      	cmp	r0, #2
 8006b42:	d120      	bne.n	8006b86 <_scanf_chars+0x8e>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006b4c:	071b      	lsls	r3, r3, #28
 8006b4e:	d41a      	bmi.n	8006b86 <_scanf_chars+0x8e>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	3701      	adds	r7, #1
 8006b54:	06da      	lsls	r2, r3, #27
 8006b56:	bf5e      	ittt	pl
 8006b58:	682b      	ldrpl	r3, [r5, #0]
 8006b5a:	781b      	ldrbpl	r3, [r3, #0]
 8006b5c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006b60:	682a      	ldr	r2, [r5, #0]
 8006b62:	686b      	ldr	r3, [r5, #4]
 8006b64:	3201      	adds	r2, #1
 8006b66:	602a      	str	r2, [r5, #0]
 8006b68:	68a2      	ldr	r2, [r4, #8]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	3a01      	subs	r2, #1
 8006b6e:	606b      	str	r3, [r5, #4]
 8006b70:	60a2      	str	r2, [r4, #8]
 8006b72:	b142      	cbz	r2, 8006b86 <_scanf_chars+0x8e>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dcd7      	bgt.n	8006b28 <_scanf_chars+0x30>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b80:	4798      	blx	r3
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0d0      	beq.n	8006b28 <_scanf_chars+0x30>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	f013 0310 	ands.w	r3, r3, #16
 8006b8c:	d105      	bne.n	8006b9a <_scanf_chars+0xa2>
 8006b8e:	68e2      	ldr	r2, [r4, #12]
 8006b90:	3201      	adds	r2, #1
 8006b92:	60e2      	str	r2, [r4, #12]
 8006b94:	69a2      	ldr	r2, [r4, #24]
 8006b96:	b102      	cbz	r2, 8006b9a <_scanf_chars+0xa2>
 8006b98:	7033      	strb	r3, [r6, #0]
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	443b      	add	r3, r7
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	bf00      	nop
 8006ba8:	080072f5 	.word	0x080072f5

08006bac <_scanf_i>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4698      	mov	r8, r3
 8006bb4:	4b72      	ldr	r3, [pc, #456]	; (8006d80 <_scanf_i+0x1d4>)
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	4682      	mov	sl, r0
 8006bba:	4616      	mov	r6, r2
 8006bbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bc0:	ab03      	add	r3, sp, #12
 8006bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006bc6:	4b6f      	ldr	r3, [pc, #444]	; (8006d84 <_scanf_i+0x1d8>)
 8006bc8:	69a1      	ldr	r1, [r4, #24]
 8006bca:	4a6f      	ldr	r2, [pc, #444]	; (8006d88 <_scanf_i+0x1dc>)
 8006bcc:	4627      	mov	r7, r4
 8006bce:	2903      	cmp	r1, #3
 8006bd0:	bf18      	it	ne
 8006bd2:	461a      	movne	r2, r3
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	9201      	str	r2, [sp, #4]
 8006bd8:	1e5a      	subs	r2, r3, #1
 8006bda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006bde:	bf81      	itttt	hi
 8006be0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006be4:	eb03 0905 	addhi.w	r9, r3, r5
 8006be8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006bec:	60a3      	strhi	r3, [r4, #8]
 8006bee:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006bf2:	bf98      	it	ls
 8006bf4:	f04f 0900 	movls.w	r9, #0
 8006bf8:	463d      	mov	r5, r7
 8006bfa:	f04f 0b00 	mov.w	fp, #0
 8006bfe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	6831      	ldr	r1, [r6, #0]
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	2202      	movs	r2, #2
 8006c0a:	7809      	ldrb	r1, [r1, #0]
 8006c0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006c10:	f000 f95a 	bl	8006ec8 <memchr>
 8006c14:	b328      	cbz	r0, 8006c62 <_scanf_i+0xb6>
 8006c16:	f1bb 0f01 	cmp.w	fp, #1
 8006c1a:	d159      	bne.n	8006cd0 <_scanf_i+0x124>
 8006c1c:	6862      	ldr	r2, [r4, #4]
 8006c1e:	b92a      	cbnz	r2, 8006c2c <_scanf_i+0x80>
 8006c20:	2308      	movs	r3, #8
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	68a2      	ldr	r2, [r4, #8]
 8006c36:	1e51      	subs	r1, r2, #1
 8006c38:	60a1      	str	r1, [r4, #8]
 8006c3a:	b192      	cbz	r2, 8006c62 <_scanf_i+0xb6>
 8006c3c:	6832      	ldr	r2, [r6, #0]
 8006c3e:	1c51      	adds	r1, r2, #1
 8006c40:	6031      	str	r1, [r6, #0]
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	f805 2b01 	strb.w	r2, [r5], #1
 8006c48:	6872      	ldr	r2, [r6, #4]
 8006c4a:	3a01      	subs	r2, #1
 8006c4c:	2a00      	cmp	r2, #0
 8006c4e:	6072      	str	r2, [r6, #4]
 8006c50:	dc07      	bgt.n	8006c62 <_scanf_i+0xb6>
 8006c52:	4631      	mov	r1, r6
 8006c54:	4650      	mov	r0, sl
 8006c56:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006c5a:	4790      	blx	r2
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f040 8085 	bne.w	8006d6c <_scanf_i+0x1c0>
 8006c62:	f10b 0b01 	add.w	fp, fp, #1
 8006c66:	f1bb 0f03 	cmp.w	fp, #3
 8006c6a:	d1cb      	bne.n	8006c04 <_scanf_i+0x58>
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	b90b      	cbnz	r3, 8006c74 <_scanf_i+0xc8>
 8006c70:	230a      	movs	r3, #10
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	4945      	ldr	r1, [pc, #276]	; (8006d8c <_scanf_i+0x1e0>)
 8006c78:	6960      	ldr	r0, [r4, #20]
 8006c7a:	1ac9      	subs	r1, r1, r3
 8006c7c:	f000 f888 	bl	8006d90 <__sccl>
 8006c80:	f04f 0b00 	mov.w	fp, #0
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d03d      	beq.n	8006d08 <_scanf_i+0x15c>
 8006c8c:	6831      	ldr	r1, [r6, #0]
 8006c8e:	6960      	ldr	r0, [r4, #20]
 8006c90:	f891 c000 	ldrb.w	ip, [r1]
 8006c94:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d035      	beq.n	8006d08 <_scanf_i+0x15c>
 8006c9c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006ca0:	d124      	bne.n	8006cec <_scanf_i+0x140>
 8006ca2:	0510      	lsls	r0, r2, #20
 8006ca4:	d522      	bpl.n	8006cec <_scanf_i+0x140>
 8006ca6:	f10b 0b01 	add.w	fp, fp, #1
 8006caa:	f1b9 0f00 	cmp.w	r9, #0
 8006cae:	d003      	beq.n	8006cb8 <_scanf_i+0x10c>
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006cb6:	60a3      	str	r3, [r4, #8]
 8006cb8:	6873      	ldr	r3, [r6, #4]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	6073      	str	r3, [r6, #4]
 8006cc0:	dd1b      	ble.n	8006cfa <_scanf_i+0x14e>
 8006cc2:	6833      	ldr	r3, [r6, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	6033      	str	r3, [r6, #0]
 8006cc8:	68a3      	ldr	r3, [r4, #8]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	e7d9      	b.n	8006c84 <_scanf_i+0xd8>
 8006cd0:	f1bb 0f02 	cmp.w	fp, #2
 8006cd4:	d1ae      	bne.n	8006c34 <_scanf_i+0x88>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006cdc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006ce0:	d1bf      	bne.n	8006c62 <_scanf_i+0xb6>
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	e7a2      	b.n	8006c32 <_scanf_i+0x86>
 8006cec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	780b      	ldrb	r3, [r1, #0]
 8006cf4:	f805 3b01 	strb.w	r3, [r5], #1
 8006cf8:	e7de      	b.n	8006cb8 <_scanf_i+0x10c>
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d02:	4798      	blx	r3
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d0df      	beq.n	8006cc8 <_scanf_i+0x11c>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	05d9      	lsls	r1, r3, #23
 8006d0c:	d50d      	bpl.n	8006d2a <_scanf_i+0x17e>
 8006d0e:	42bd      	cmp	r5, r7
 8006d10:	d909      	bls.n	8006d26 <_scanf_i+0x17a>
 8006d12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006d16:	4632      	mov	r2, r6
 8006d18:	4650      	mov	r0, sl
 8006d1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006d22:	4798      	blx	r3
 8006d24:	464d      	mov	r5, r9
 8006d26:	42bd      	cmp	r5, r7
 8006d28:	d028      	beq.n	8006d7c <_scanf_i+0x1d0>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	f012 0210 	ands.w	r2, r2, #16
 8006d30:	d113      	bne.n	8006d5a <_scanf_i+0x1ae>
 8006d32:	702a      	strb	r2, [r5, #0]
 8006d34:	4639      	mov	r1, r7
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	4650      	mov	r0, sl
 8006d3a:	9e01      	ldr	r6, [sp, #4]
 8006d3c:	47b0      	blx	r6
 8006d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d42:	6821      	ldr	r1, [r4, #0]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	f8c8 2000 	str.w	r2, [r8]
 8006d4a:	f011 0f20 	tst.w	r1, #32
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	d00f      	beq.n	8006d72 <_scanf_i+0x1c6>
 8006d52:	6018      	str	r0, [r3, #0]
 8006d54:	68e3      	ldr	r3, [r4, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60e3      	str	r3, [r4, #12]
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	1bed      	subs	r5, r5, r7
 8006d60:	445d      	add	r5, fp
 8006d62:	442b      	add	r3, r5
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	b007      	add	sp, #28
 8006d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6c:	f04f 0b00 	mov.w	fp, #0
 8006d70:	e7ca      	b.n	8006d08 <_scanf_i+0x15c>
 8006d72:	07ca      	lsls	r2, r1, #31
 8006d74:	bf4c      	ite	mi
 8006d76:	8018      	strhmi	r0, [r3, #0]
 8006d78:	6018      	strpl	r0, [r3, #0]
 8006d7a:	e7eb      	b.n	8006d54 <_scanf_i+0x1a8>
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	e7f2      	b.n	8006d66 <_scanf_i+0x1ba>
 8006d80:	08007270 	.word	0x08007270
 8006d84:	08007145 	.word	0x08007145
 8006d88:	0800705d 	.word	0x0800705d
 8006d8c:	080072e9 	.word	0x080072e9

08006d90 <__sccl>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	780b      	ldrb	r3, [r1, #0]
 8006d94:	4604      	mov	r4, r0
 8006d96:	2b5e      	cmp	r3, #94	; 0x5e
 8006d98:	bf0b      	itete	eq
 8006d9a:	784b      	ldrbeq	r3, [r1, #1]
 8006d9c:	1c4a      	addne	r2, r1, #1
 8006d9e:	1c8a      	addeq	r2, r1, #2
 8006da0:	2100      	movne	r1, #0
 8006da2:	bf08      	it	eq
 8006da4:	2101      	moveq	r1, #1
 8006da6:	3801      	subs	r0, #1
 8006da8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006dac:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006db0:	42a8      	cmp	r0, r5
 8006db2:	d1fb      	bne.n	8006dac <__sccl+0x1c>
 8006db4:	b90b      	cbnz	r3, 8006dba <__sccl+0x2a>
 8006db6:	1e50      	subs	r0, r2, #1
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
 8006dba:	f081 0101 	eor.w	r1, r1, #1
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	54e1      	strb	r1, [r4, r3]
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006dc8:	2d2d      	cmp	r5, #45	; 0x2d
 8006dca:	d005      	beq.n	8006dd8 <__sccl+0x48>
 8006dcc:	2d5d      	cmp	r5, #93	; 0x5d
 8006dce:	d016      	beq.n	8006dfe <__sccl+0x6e>
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	d0f1      	beq.n	8006db8 <__sccl+0x28>
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	e7f2      	b.n	8006dbe <__sccl+0x2e>
 8006dd8:	7846      	ldrb	r6, [r0, #1]
 8006dda:	2e5d      	cmp	r6, #93	; 0x5d
 8006ddc:	d0fa      	beq.n	8006dd4 <__sccl+0x44>
 8006dde:	42b3      	cmp	r3, r6
 8006de0:	dcf8      	bgt.n	8006dd4 <__sccl+0x44>
 8006de2:	461a      	mov	r2, r3
 8006de4:	3002      	adds	r0, #2
 8006de6:	3201      	adds	r2, #1
 8006de8:	4296      	cmp	r6, r2
 8006dea:	54a1      	strb	r1, [r4, r2]
 8006dec:	dcfb      	bgt.n	8006de6 <__sccl+0x56>
 8006dee:	1af2      	subs	r2, r6, r3
 8006df0:	3a01      	subs	r2, #1
 8006df2:	42b3      	cmp	r3, r6
 8006df4:	bfa8      	it	ge
 8006df6:	2200      	movge	r2, #0
 8006df8:	1c5d      	adds	r5, r3, #1
 8006dfa:	18ab      	adds	r3, r5, r2
 8006dfc:	e7e1      	b.n	8006dc2 <__sccl+0x32>
 8006dfe:	4610      	mov	r0, r2
 8006e00:	e7da      	b.n	8006db8 <__sccl+0x28>

08006e02 <__submore>:
 8006e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	460c      	mov	r4, r1
 8006e08:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e0e:	4299      	cmp	r1, r3
 8006e10:	d11b      	bne.n	8006e4a <__submore+0x48>
 8006e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e16:	f7ff f925 	bl	8006064 <_malloc_r>
 8006e1a:	b918      	cbnz	r0, 8006e24 <__submore+0x22>
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e28:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e2a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8006e30:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006e34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e38:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006e3c:	7043      	strb	r3, [r0, #1]
 8006e3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e42:	7003      	strb	r3, [r0, #0]
 8006e44:	6020      	str	r0, [r4, #0]
 8006e46:	2000      	movs	r0, #0
 8006e48:	e7ea      	b.n	8006e20 <__submore+0x1e>
 8006e4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006e4c:	0077      	lsls	r7, r6, #1
 8006e4e:	463a      	mov	r2, r7
 8006e50:	f000 f856 	bl	8006f00 <_realloc_r>
 8006e54:	4605      	mov	r5, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d0e0      	beq.n	8006e1c <__submore+0x1a>
 8006e5a:	eb00 0806 	add.w	r8, r0, r6
 8006e5e:	4601      	mov	r1, r0
 8006e60:	4632      	mov	r2, r6
 8006e62:	4640      	mov	r0, r8
 8006e64:	f000 f83e 	bl	8006ee4 <memcpy>
 8006e68:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006e6c:	f8c4 8000 	str.w	r8, [r4]
 8006e70:	e7e9      	b.n	8006e46 <__submore+0x44>

08006e72 <memmove>:
 8006e72:	4288      	cmp	r0, r1
 8006e74:	b510      	push	{r4, lr}
 8006e76:	eb01 0402 	add.w	r4, r1, r2
 8006e7a:	d902      	bls.n	8006e82 <memmove+0x10>
 8006e7c:	4284      	cmp	r4, r0
 8006e7e:	4623      	mov	r3, r4
 8006e80:	d807      	bhi.n	8006e92 <memmove+0x20>
 8006e82:	1e43      	subs	r3, r0, #1
 8006e84:	42a1      	cmp	r1, r4
 8006e86:	d008      	beq.n	8006e9a <memmove+0x28>
 8006e88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e90:	e7f8      	b.n	8006e84 <memmove+0x12>
 8006e92:	4601      	mov	r1, r0
 8006e94:	4402      	add	r2, r0
 8006e96:	428a      	cmp	r2, r1
 8006e98:	d100      	bne.n	8006e9c <memmove+0x2a>
 8006e9a:	bd10      	pop	{r4, pc}
 8006e9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ea0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ea4:	e7f7      	b.n	8006e96 <memmove+0x24>
	...

08006ea8 <_sbrk_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4d05      	ldr	r5, [pc, #20]	; (8006ec4 <_sbrk_r+0x1c>)
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	f7fb fb08 	bl	80024c8 <_sbrk>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_sbrk_r+0x1a>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_sbrk_r+0x1a>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	200007d4 	.word	0x200007d4

08006ec8 <memchr>:
 8006ec8:	4603      	mov	r3, r0
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	b2c9      	uxtb	r1, r1
 8006ece:	4402      	add	r2, r0
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	d101      	bne.n	8006eda <memchr+0x12>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e003      	b.n	8006ee2 <memchr+0x1a>
 8006eda:	7804      	ldrb	r4, [r0, #0]
 8006edc:	3301      	adds	r3, #1
 8006ede:	428c      	cmp	r4, r1
 8006ee0:	d1f6      	bne.n	8006ed0 <memchr+0x8>
 8006ee2:	bd10      	pop	{r4, pc}

08006ee4 <memcpy>:
 8006ee4:	440a      	add	r2, r1
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eec:	d100      	bne.n	8006ef0 <memcpy+0xc>
 8006eee:	4770      	bx	lr
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ef6:	4291      	cmp	r1, r2
 8006ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efc:	d1f9      	bne.n	8006ef2 <memcpy+0xe>
 8006efe:	bd10      	pop	{r4, pc}

08006f00 <_realloc_r>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4680      	mov	r8, r0
 8006f06:	4614      	mov	r4, r2
 8006f08:	460e      	mov	r6, r1
 8006f0a:	b921      	cbnz	r1, 8006f16 <_realloc_r+0x16>
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	f7ff b8a7 	b.w	8006064 <_malloc_r>
 8006f16:	b92a      	cbnz	r2, 8006f24 <_realloc_r+0x24>
 8006f18:	f7ff f83c 	bl	8005f94 <_free_r>
 8006f1c:	4625      	mov	r5, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	f000 f910 	bl	8007148 <_malloc_usable_size_r>
 8006f28:	4284      	cmp	r4, r0
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	d802      	bhi.n	8006f34 <_realloc_r+0x34>
 8006f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f32:	d812      	bhi.n	8006f5a <_realloc_r+0x5a>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7ff f894 	bl	8006064 <_malloc_r>
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0ed      	beq.n	8006f1e <_realloc_r+0x1e>
 8006f42:	42bc      	cmp	r4, r7
 8006f44:	4622      	mov	r2, r4
 8006f46:	4631      	mov	r1, r6
 8006f48:	bf28      	it	cs
 8006f4a:	463a      	movcs	r2, r7
 8006f4c:	f7ff ffca 	bl	8006ee4 <memcpy>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff f81e 	bl	8005f94 <_free_r>
 8006f58:	e7e1      	b.n	8006f1e <_realloc_r+0x1e>
 8006f5a:	4635      	mov	r5, r6
 8006f5c:	e7df      	b.n	8006f1e <_realloc_r+0x1e>
	...

08006f60 <_strtol_l.constprop.0>:
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f66:	4686      	mov	lr, r0
 8006f68:	4690      	mov	r8, r2
 8006f6a:	d001      	beq.n	8006f70 <_strtol_l.constprop.0+0x10>
 8006f6c:	2b24      	cmp	r3, #36	; 0x24
 8006f6e:	d906      	bls.n	8006f7e <_strtol_l.constprop.0+0x1e>
 8006f70:	f7fe ffe4 	bl	8005f3c <__errno>
 8006f74:	2316      	movs	r3, #22
 8006f76:	6003      	str	r3, [r0, #0]
 8006f78:	2000      	movs	r0, #0
 8006f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7e:	460d      	mov	r5, r1
 8006f80:	4835      	ldr	r0, [pc, #212]	; (8007058 <_strtol_l.constprop.0+0xf8>)
 8006f82:	462a      	mov	r2, r5
 8006f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f88:	5d06      	ldrb	r6, [r0, r4]
 8006f8a:	f016 0608 	ands.w	r6, r6, #8
 8006f8e:	d1f8      	bne.n	8006f82 <_strtol_l.constprop.0+0x22>
 8006f90:	2c2d      	cmp	r4, #45	; 0x2d
 8006f92:	d12e      	bne.n	8006ff2 <_strtol_l.constprop.0+0x92>
 8006f94:	2601      	movs	r6, #1
 8006f96:	782c      	ldrb	r4, [r5, #0]
 8006f98:	1c95      	adds	r5, r2, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d057      	beq.n	800704e <_strtol_l.constprop.0+0xee>
 8006f9e:	2b10      	cmp	r3, #16
 8006fa0:	d109      	bne.n	8006fb6 <_strtol_l.constprop.0+0x56>
 8006fa2:	2c30      	cmp	r4, #48	; 0x30
 8006fa4:	d107      	bne.n	8006fb6 <_strtol_l.constprop.0+0x56>
 8006fa6:	782a      	ldrb	r2, [r5, #0]
 8006fa8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006fac:	2a58      	cmp	r2, #88	; 0x58
 8006fae:	d149      	bne.n	8007044 <_strtol_l.constprop.0+0xe4>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	786c      	ldrb	r4, [r5, #1]
 8006fb4:	3502      	adds	r5, #2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006fbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006fc0:	fbbc f9f3 	udiv	r9, ip, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	fb03 ca19 	mls	sl, r3, r9, ip
 8006fca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006fce:	2f09      	cmp	r7, #9
 8006fd0:	d814      	bhi.n	8006ffc <_strtol_l.constprop.0+0x9c>
 8006fd2:	463c      	mov	r4, r7
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	dd20      	ble.n	800701a <_strtol_l.constprop.0+0xba>
 8006fd8:	1c57      	adds	r7, r2, #1
 8006fda:	d007      	beq.n	8006fec <_strtol_l.constprop.0+0x8c>
 8006fdc:	4581      	cmp	r9, r0
 8006fde:	d319      	bcc.n	8007014 <_strtol_l.constprop.0+0xb4>
 8006fe0:	d101      	bne.n	8006fe6 <_strtol_l.constprop.0+0x86>
 8006fe2:	45a2      	cmp	sl, r4
 8006fe4:	db16      	blt.n	8007014 <_strtol_l.constprop.0+0xb4>
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	fb00 4003 	mla	r0, r0, r3, r4
 8006fec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ff0:	e7eb      	b.n	8006fca <_strtol_l.constprop.0+0x6a>
 8006ff2:	2c2b      	cmp	r4, #43	; 0x2b
 8006ff4:	bf04      	itt	eq
 8006ff6:	782c      	ldrbeq	r4, [r5, #0]
 8006ff8:	1c95      	addeq	r5, r2, #2
 8006ffa:	e7ce      	b.n	8006f9a <_strtol_l.constprop.0+0x3a>
 8006ffc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007000:	2f19      	cmp	r7, #25
 8007002:	d801      	bhi.n	8007008 <_strtol_l.constprop.0+0xa8>
 8007004:	3c37      	subs	r4, #55	; 0x37
 8007006:	e7e5      	b.n	8006fd4 <_strtol_l.constprop.0+0x74>
 8007008:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800700c:	2f19      	cmp	r7, #25
 800700e:	d804      	bhi.n	800701a <_strtol_l.constprop.0+0xba>
 8007010:	3c57      	subs	r4, #87	; 0x57
 8007012:	e7df      	b.n	8006fd4 <_strtol_l.constprop.0+0x74>
 8007014:	f04f 32ff 	mov.w	r2, #4294967295
 8007018:	e7e8      	b.n	8006fec <_strtol_l.constprop.0+0x8c>
 800701a:	1c53      	adds	r3, r2, #1
 800701c:	d108      	bne.n	8007030 <_strtol_l.constprop.0+0xd0>
 800701e:	2322      	movs	r3, #34	; 0x22
 8007020:	4660      	mov	r0, ip
 8007022:	f8ce 3000 	str.w	r3, [lr]
 8007026:	f1b8 0f00 	cmp.w	r8, #0
 800702a:	d0a6      	beq.n	8006f7a <_strtol_l.constprop.0+0x1a>
 800702c:	1e69      	subs	r1, r5, #1
 800702e:	e006      	b.n	800703e <_strtol_l.constprop.0+0xde>
 8007030:	b106      	cbz	r6, 8007034 <_strtol_l.constprop.0+0xd4>
 8007032:	4240      	negs	r0, r0
 8007034:	f1b8 0f00 	cmp.w	r8, #0
 8007038:	d09f      	beq.n	8006f7a <_strtol_l.constprop.0+0x1a>
 800703a:	2a00      	cmp	r2, #0
 800703c:	d1f6      	bne.n	800702c <_strtol_l.constprop.0+0xcc>
 800703e:	f8c8 1000 	str.w	r1, [r8]
 8007042:	e79a      	b.n	8006f7a <_strtol_l.constprop.0+0x1a>
 8007044:	2430      	movs	r4, #48	; 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1b5      	bne.n	8006fb6 <_strtol_l.constprop.0+0x56>
 800704a:	2308      	movs	r3, #8
 800704c:	e7b3      	b.n	8006fb6 <_strtol_l.constprop.0+0x56>
 800704e:	2c30      	cmp	r4, #48	; 0x30
 8007050:	d0a9      	beq.n	8006fa6 <_strtol_l.constprop.0+0x46>
 8007052:	230a      	movs	r3, #10
 8007054:	e7af      	b.n	8006fb6 <_strtol_l.constprop.0+0x56>
 8007056:	bf00      	nop
 8007058:	080072f5 	.word	0x080072f5

0800705c <_strtol_r>:
 800705c:	f7ff bf80 	b.w	8006f60 <_strtol_l.constprop.0>

08007060 <_strtoul_l.constprop.0>:
 8007060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007064:	4686      	mov	lr, r0
 8007066:	460d      	mov	r5, r1
 8007068:	4f35      	ldr	r7, [pc, #212]	; (8007140 <_strtoul_l.constprop.0+0xe0>)
 800706a:	4628      	mov	r0, r5
 800706c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007070:	5d3e      	ldrb	r6, [r7, r4]
 8007072:	f016 0608 	ands.w	r6, r6, #8
 8007076:	d1f8      	bne.n	800706a <_strtoul_l.constprop.0+0xa>
 8007078:	2c2d      	cmp	r4, #45	; 0x2d
 800707a:	d130      	bne.n	80070de <_strtoul_l.constprop.0+0x7e>
 800707c:	2601      	movs	r6, #1
 800707e:	782c      	ldrb	r4, [r5, #0]
 8007080:	1c85      	adds	r5, r0, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d057      	beq.n	8007136 <_strtoul_l.constprop.0+0xd6>
 8007086:	2b10      	cmp	r3, #16
 8007088:	d109      	bne.n	800709e <_strtoul_l.constprop.0+0x3e>
 800708a:	2c30      	cmp	r4, #48	; 0x30
 800708c:	d107      	bne.n	800709e <_strtoul_l.constprop.0+0x3e>
 800708e:	7828      	ldrb	r0, [r5, #0]
 8007090:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007094:	2858      	cmp	r0, #88	; 0x58
 8007096:	d149      	bne.n	800712c <_strtoul_l.constprop.0+0xcc>
 8007098:	2310      	movs	r3, #16
 800709a:	786c      	ldrb	r4, [r5, #1]
 800709c:	3502      	adds	r5, #2
 800709e:	f04f 38ff 	mov.w	r8, #4294967295
 80070a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80070a6:	2700      	movs	r7, #0
 80070a8:	fb03 f908 	mul.w	r9, r3, r8
 80070ac:	4638      	mov	r0, r7
 80070ae:	ea6f 0909 	mvn.w	r9, r9
 80070b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80070b6:	f1bc 0f09 	cmp.w	ip, #9
 80070ba:	d815      	bhi.n	80070e8 <_strtoul_l.constprop.0+0x88>
 80070bc:	4664      	mov	r4, ip
 80070be:	42a3      	cmp	r3, r4
 80070c0:	dd23      	ble.n	800710a <_strtoul_l.constprop.0+0xaa>
 80070c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80070c6:	d007      	beq.n	80070d8 <_strtoul_l.constprop.0+0x78>
 80070c8:	4580      	cmp	r8, r0
 80070ca:	d31b      	bcc.n	8007104 <_strtoul_l.constprop.0+0xa4>
 80070cc:	d101      	bne.n	80070d2 <_strtoul_l.constprop.0+0x72>
 80070ce:	45a1      	cmp	r9, r4
 80070d0:	db18      	blt.n	8007104 <_strtoul_l.constprop.0+0xa4>
 80070d2:	2701      	movs	r7, #1
 80070d4:	fb00 4003 	mla	r0, r0, r3, r4
 80070d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070dc:	e7e9      	b.n	80070b2 <_strtoul_l.constprop.0+0x52>
 80070de:	2c2b      	cmp	r4, #43	; 0x2b
 80070e0:	bf04      	itt	eq
 80070e2:	782c      	ldrbeq	r4, [r5, #0]
 80070e4:	1c85      	addeq	r5, r0, #2
 80070e6:	e7cc      	b.n	8007082 <_strtoul_l.constprop.0+0x22>
 80070e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80070ec:	f1bc 0f19 	cmp.w	ip, #25
 80070f0:	d801      	bhi.n	80070f6 <_strtoul_l.constprop.0+0x96>
 80070f2:	3c37      	subs	r4, #55	; 0x37
 80070f4:	e7e3      	b.n	80070be <_strtoul_l.constprop.0+0x5e>
 80070f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80070fa:	f1bc 0f19 	cmp.w	ip, #25
 80070fe:	d804      	bhi.n	800710a <_strtoul_l.constprop.0+0xaa>
 8007100:	3c57      	subs	r4, #87	; 0x57
 8007102:	e7dc      	b.n	80070be <_strtoul_l.constprop.0+0x5e>
 8007104:	f04f 37ff 	mov.w	r7, #4294967295
 8007108:	e7e6      	b.n	80070d8 <_strtoul_l.constprop.0+0x78>
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	d106      	bne.n	800711c <_strtoul_l.constprop.0+0xbc>
 800710e:	2322      	movs	r3, #34	; 0x22
 8007110:	4638      	mov	r0, r7
 8007112:	f8ce 3000 	str.w	r3, [lr]
 8007116:	b932      	cbnz	r2, 8007126 <_strtoul_l.constprop.0+0xc6>
 8007118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800711c:	b106      	cbz	r6, 8007120 <_strtoul_l.constprop.0+0xc0>
 800711e:	4240      	negs	r0, r0
 8007120:	2a00      	cmp	r2, #0
 8007122:	d0f9      	beq.n	8007118 <_strtoul_l.constprop.0+0xb8>
 8007124:	b107      	cbz	r7, 8007128 <_strtoul_l.constprop.0+0xc8>
 8007126:	1e69      	subs	r1, r5, #1
 8007128:	6011      	str	r1, [r2, #0]
 800712a:	e7f5      	b.n	8007118 <_strtoul_l.constprop.0+0xb8>
 800712c:	2430      	movs	r4, #48	; 0x30
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1b5      	bne.n	800709e <_strtoul_l.constprop.0+0x3e>
 8007132:	2308      	movs	r3, #8
 8007134:	e7b3      	b.n	800709e <_strtoul_l.constprop.0+0x3e>
 8007136:	2c30      	cmp	r4, #48	; 0x30
 8007138:	d0a9      	beq.n	800708e <_strtoul_l.constprop.0+0x2e>
 800713a:	230a      	movs	r3, #10
 800713c:	e7af      	b.n	800709e <_strtoul_l.constprop.0+0x3e>
 800713e:	bf00      	nop
 8007140:	080072f5 	.word	0x080072f5

08007144 <_strtoul_r>:
 8007144:	f7ff bf8c 	b.w	8007060 <_strtoul_l.constprop.0>

08007148 <_malloc_usable_size_r>:
 8007148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714c:	1f18      	subs	r0, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfbc      	itt	lt
 8007152:	580b      	ldrlt	r3, [r1, r0]
 8007154:	18c0      	addlt	r0, r0, r3
 8007156:	4770      	bx	lr

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
