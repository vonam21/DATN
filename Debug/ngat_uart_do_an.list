
ngat_uart_do_an.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a3c  08007a3c  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a3c  08007a3c  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08007a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000270  08007cb0  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  08007cb0  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020295  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001156a  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255d  00000000  00000000  00031842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d71  00000000  00000000  00034e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018bcd  00000000  00000000  00035c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001485a  00000000  00000000  0004e7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092283  00000000  00000000  00063030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005050  00000000  00000000  000f52b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fa304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000270 	.word	0x20000270
 8000128:	00000000 	.word	0x00000000
 800012c:	0800779c 	.word	0x0800779c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000274 	.word	0x20000274
 8000148:	0800779c 	.word	0x0800779c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <send_data_to_server>:


void xu_ly_tick_dht11(uint8_t* tick,uint8_t* data_dht11);
void doc_dht11(void);
void update(void);
void send_data_to_server (void) {
 8000170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000172:	b093      	sub	sp, #76	; 0x4c
 8000174:	af0c      	add	r7, sp, #48	; 0x30
	  flag_check_RX_PAYLOAD =0;
 8000176:	4b90      	ldr	r3, [pc, #576]	; (80003b8 <send_data_to_server+0x248>)
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
	  flag_check_OK =1;
 800017c:	4b8f      	ldr	r3, [pc, #572]	; (80003bc <send_data_to_server+0x24c>)
 800017e:	2201      	movs	r2, #1
 8000180:	601a      	str	r2, [r3, #0]
	  flag_pass = 0;
 8000182:	4b8f      	ldr	r3, [pc, #572]	; (80003c0 <send_data_to_server+0x250>)
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM5, strlen((const char*)data_SIM5), 10);
 8000188:	488e      	ldr	r0, [pc, #568]	; (80003c4 <send_data_to_server+0x254>)
 800018a:	f7ff ffe9 	bl	8000160 <strlen>
 800018e:	4603      	mov	r3, r0
 8000190:	b29a      	uxth	r2, r3
 8000192:	230a      	movs	r3, #10
 8000194:	498b      	ldr	r1, [pc, #556]	; (80003c4 <send_data_to_server+0x254>)
 8000196:	488c      	ldr	r0, [pc, #560]	; (80003c8 <send_data_to_server+0x258>)
 8000198:	f005 f9b4 	bl	8005504 <HAL_UART_Transmit>
	  HAL_Delay(300);
 800019c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001a0:	f002 fbb2 	bl	8002908 <HAL_Delay>
	  update();
 80001a4:	f000 fa08 	bl	80005b8 <update>
	  HAL_UART_Transmit(&huart1, data_SIM6, strlen((const char*)data_SIM6), 10);
 80001a8:	4888      	ldr	r0, [pc, #544]	; (80003cc <send_data_to_server+0x25c>)
 80001aa:	f7ff ffd9 	bl	8000160 <strlen>
 80001ae:	4603      	mov	r3, r0
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	230a      	movs	r3, #10
 80001b4:	4985      	ldr	r1, [pc, #532]	; (80003cc <send_data_to_server+0x25c>)
 80001b6:	4884      	ldr	r0, [pc, #528]	; (80003c8 <send_data_to_server+0x258>)
 80001b8:	f005 f9a4 	bl	8005504 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80001bc:	2064      	movs	r0, #100	; 0x64
 80001be:	f002 fba3 	bl	8002908 <HAL_Delay>
//	  while(flag_pass==0);
	  ////////////////////// 5 6//////////////////
	  update();
 80001c2:	f000 f9f9 	bl	80005b8 <update>
	  flag_pass = 0;
 80001c6:	4b7e      	ldr	r3, [pc, #504]	; (80003c0 <send_data_to_server+0x250>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM7, strlen((const char*)data_SIM7), 10);
 80001cc:	4880      	ldr	r0, [pc, #512]	; (80003d0 <send_data_to_server+0x260>)
 80001ce:	f7ff ffc7 	bl	8000160 <strlen>
 80001d2:	4603      	mov	r3, r0
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	230a      	movs	r3, #10
 80001d8:	497d      	ldr	r1, [pc, #500]	; (80003d0 <send_data_to_server+0x260>)
 80001da:	487b      	ldr	r0, [pc, #492]	; (80003c8 <send_data_to_server+0x258>)
 80001dc:	f005 f992 	bl	8005504 <HAL_UART_Transmit>
	  HAL_Delay(300);
 80001e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001e4:	f002 fb90 	bl	8002908 <HAL_Delay>
	  update();
 80001e8:	f000 f9e6 	bl	80005b8 <update>
	   a = led%2;
 80001ec:	4b79      	ldr	r3, [pc, #484]	; (80003d4 <send_data_to_server+0x264>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	bfb8      	it	lt
 80001f8:	425b      	neglt	r3, r3
 80001fa:	4a77      	ldr	r2, [pc, #476]	; (80003d8 <send_data_to_server+0x268>)
 80001fc:	6013      	str	r3, [r2, #0]
	   b = quat%2;
 80001fe:	4b77      	ldr	r3, [pc, #476]	; (80003dc <send_data_to_server+0x26c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	f003 0301 	and.w	r3, r3, #1
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	4a74      	ldr	r2, [pc, #464]	; (80003e0 <send_data_to_server+0x270>)
 800020e:	6013      	str	r3, [r2, #0]
	   c = bom%2;
 8000210:	4b74      	ldr	r3, [pc, #464]	; (80003e4 <send_data_to_server+0x274>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	bfb8      	it	lt
 800021c:	425b      	neglt	r3, r3
 800021e:	4a72      	ldr	r2, [pc, #456]	; (80003e8 <send_data_to_server+0x278>)
 8000220:	6013      	str	r3, [r2, #0]
	   d = mode%2;
 8000222:	4b72      	ldr	r3, [pc, #456]	; (80003ec <send_data_to_server+0x27c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	bfb8      	it	lt
 800022e:	425b      	neglt	r3, r3
 8000230:	4a6f      	ldr	r2, [pc, #444]	; (80003f0 <send_data_to_server+0x280>)
 8000232:	6013      	str	r3, [r2, #0]
	   int check_led = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000238:	486e      	ldr	r0, [pc, #440]	; (80003f4 <send_data_to_server+0x284>)
 800023a:	f003 fb0d 	bl	8003858 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	617b      	str	r3, [r7, #20]
	   if(check_led ==1)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d102      	bne.n	800024e <send_data_to_server+0xde>
	   {
		   check_led =0;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	e001      	b.n	8000252 <send_data_to_server+0xe2>
	   } else {
		   check_led =1;
 800024e:	2301      	movs	r3, #1
 8000250:	617b      	str	r3, [r7, #20]
	   }
	   int check_quat = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000252:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000256:	4868      	ldr	r0, [pc, #416]	; (80003f8 <send_data_to_server+0x288>)
 8000258:	f003 fafe 	bl	8003858 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	613b      	str	r3, [r7, #16]
	   if(check_quat ==1)
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d102      	bne.n	800026c <send_data_to_server+0xfc>
	   {
		   check_quat =0;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
 800026a:	e001      	b.n	8000270 <send_data_to_server+0x100>
	   } else {
		   check_quat =1;
 800026c:	2301      	movs	r3, #1
 800026e:	613b      	str	r3, [r7, #16]
	   }
	   int check_bom = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000274:	4860      	ldr	r0, [pc, #384]	; (80003f8 <send_data_to_server+0x288>)
 8000276:	f003 faef 	bl	8003858 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	60fb      	str	r3, [r7, #12]
	   if(check_bom ==1)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d102      	bne.n	800028a <send_data_to_server+0x11a>
	   {
		   check_bom =0;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e001      	b.n	800028e <send_data_to_server+0x11e>
	   } else {
		   check_bom =1;
 800028a:	2301      	movs	r3, #1
 800028c:	60fb      	str	r3, [r7, #12]
	   }
	  sprintf((char*)message_gui_server,"%d.%d %d.%d %d %d %d %d %d %d %d %d %d\n\n\n\n\n\n\n\n", data_dht11[2], data_dht11[3],data_dht11[0],data_dht11[1],adc_quang_tro,adc_do_am_dat,a,b,c,d,check_led,check_quat,check_bom);
 800028e:	4b5b      	ldr	r3, [pc, #364]	; (80003fc <send_data_to_server+0x28c>)
 8000290:	789b      	ldrb	r3, [r3, #2]
 8000292:	469c      	mov	ip, r3
 8000294:	4b59      	ldr	r3, [pc, #356]	; (80003fc <send_data_to_server+0x28c>)
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	469e      	mov	lr, r3
 800029a:	4b58      	ldr	r3, [pc, #352]	; (80003fc <send_data_to_server+0x28c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	4b56      	ldr	r3, [pc, #344]	; (80003fc <send_data_to_server+0x28c>)
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	4b56      	ldr	r3, [pc, #344]	; (8000400 <send_data_to_server+0x290>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a56      	ldr	r2, [pc, #344]	; (8000404 <send_data_to_server+0x294>)
 80002ac:	6812      	ldr	r2, [r2, #0]
 80002ae:	494a      	ldr	r1, [pc, #296]	; (80003d8 <send_data_to_server+0x268>)
 80002b0:	6809      	ldr	r1, [r1, #0]
 80002b2:	484b      	ldr	r0, [pc, #300]	; (80003e0 <send_data_to_server+0x270>)
 80002b4:	6800      	ldr	r0, [r0, #0]
 80002b6:	4c4c      	ldr	r4, [pc, #304]	; (80003e8 <send_data_to_server+0x278>)
 80002b8:	6824      	ldr	r4, [r4, #0]
 80002ba:	4d4d      	ldr	r5, [pc, #308]	; (80003f0 <send_data_to_server+0x280>)
 80002bc:	682d      	ldr	r5, [r5, #0]
 80002be:	68fe      	ldr	r6, [r7, #12]
 80002c0:	960a      	str	r6, [sp, #40]	; 0x28
 80002c2:	693e      	ldr	r6, [r7, #16]
 80002c4:	9609      	str	r6, [sp, #36]	; 0x24
 80002c6:	697e      	ldr	r6, [r7, #20]
 80002c8:	9608      	str	r6, [sp, #32]
 80002ca:	9507      	str	r5, [sp, #28]
 80002cc:	9406      	str	r4, [sp, #24]
 80002ce:	9005      	str	r0, [sp, #20]
 80002d0:	9104      	str	r1, [sp, #16]
 80002d2:	9203      	str	r2, [sp, #12]
 80002d4:	9302      	str	r3, [sp, #8]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	9201      	str	r2, [sp, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	4673      	mov	r3, lr
 80002e0:	4662      	mov	r2, ip
 80002e2:	4949      	ldr	r1, [pc, #292]	; (8000408 <send_data_to_server+0x298>)
 80002e4:	4849      	ldr	r0, [pc, #292]	; (800040c <send_data_to_server+0x29c>)
 80002e6:	f006 f8f7 	bl	80064d8 <siprintf>

	  UART10:
	  HAL_TIM_Base_Start_IT(&htim4);
 80002ea:	4849      	ldr	r0, [pc, #292]	; (8000410 <send_data_to_server+0x2a0>)
 80002ec:	f004 fcde 	bl	8004cac <HAL_TIM_Base_Start_IT>
	  flag_timer4=0;
 80002f0:	4b48      	ldr	r3, [pc, #288]	; (8000414 <send_data_to_server+0x2a4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 80002f6:	4b46      	ldr	r3, [pc, #280]	; (8000410 <send_data_to_server+0x2a0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_UART_Transmit(&huart1, message_gui_server, strlen((const char*)message_gui_server), 500);
 80002fe:	4843      	ldr	r0, [pc, #268]	; (800040c <send_data_to_server+0x29c>)
 8000300:	f7ff ff2e 	bl	8000160 <strlen>
 8000304:	4603      	mov	r3, r0
 8000306:	b29a      	uxth	r2, r3
 8000308:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800030c:	493f      	ldr	r1, [pc, #252]	; (800040c <send_data_to_server+0x29c>)
 800030e:	482e      	ldr	r0, [pc, #184]	; (80003c8 <send_data_to_server+0x258>)
 8000310:	f005 f8f8 	bl	8005504 <HAL_UART_Transmit>
	  while(flag_pass==0){
 8000314:	e007      	b.n	8000326 <send_data_to_server+0x1b6>
		  if(flag_timer4 ==1)
 8000316:	4b3f      	ldr	r3, [pc, #252]	; (8000414 <send_data_to_server+0x2a4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d103      	bne.n	8000326 <send_data_to_server+0x1b6>
		  {
			  HAL_TIM_Base_Start_IT(&htim4);
 800031e:	483c      	ldr	r0, [pc, #240]	; (8000410 <send_data_to_server+0x2a0>)
 8000320:	f004 fcc4 	bl	8004cac <HAL_TIM_Base_Start_IT>
			  goto UART10;
 8000324:	e7e1      	b.n	80002ea <send_data_to_server+0x17a>
	  while(flag_pass==0){
 8000326:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <send_data_to_server+0x250>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f3      	beq.n	8000316 <send_data_to_server+0x1a6>
		  }
	  }
	  flag_timer4=0;
 800032e:	4b39      	ldr	r3, [pc, #228]	; (8000414 <send_data_to_server+0x2a4>)
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 8000334:	4b36      	ldr	r3, [pc, #216]	; (8000410 <send_data_to_server+0x2a0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Stop_IT(&htim4);
 800033c:	4834      	ldr	r0, [pc, #208]	; (8000410 <send_data_to_server+0x2a0>)
 800033e:	f004 fd07 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
	  //////////////////// 7 8//////////////////////////////

	  UART9:
	  HAL_TIM_Base_Start_IT(&htim4);
 8000342:	4833      	ldr	r0, [pc, #204]	; (8000410 <send_data_to_server+0x2a0>)
 8000344:	f004 fcb2 	bl	8004cac <HAL_TIM_Base_Start_IT>
	  flag_timer4=0;
 8000348:	4b32      	ldr	r3, [pc, #200]	; (8000414 <send_data_to_server+0x2a4>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 800034e:	4b30      	ldr	r3, [pc, #192]	; (8000410 <send_data_to_server+0x2a0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_UART_Transmit(&huart1, data_SIM9, strlen((const char*)data_SIM9), 10);
 8000356:	4830      	ldr	r0, [pc, #192]	; (8000418 <send_data_to_server+0x2a8>)
 8000358:	f7ff ff02 	bl	8000160 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	b29a      	uxth	r2, r3
 8000360:	230a      	movs	r3, #10
 8000362:	492d      	ldr	r1, [pc, #180]	; (8000418 <send_data_to_server+0x2a8>)
 8000364:	4818      	ldr	r0, [pc, #96]	; (80003c8 <send_data_to_server+0x258>)
 8000366:	f005 f8cd 	bl	8005504 <HAL_UART_Transmit>
	  while(flag_pass==0) {
 800036a:	e007      	b.n	800037c <send_data_to_server+0x20c>
		  if(flag_timer4 ==1)
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <send_data_to_server+0x2a4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d103      	bne.n	800037c <send_data_to_server+0x20c>
		  {
			  HAL_TIM_Base_Start_IT(&htim4);
 8000374:	4826      	ldr	r0, [pc, #152]	; (8000410 <send_data_to_server+0x2a0>)
 8000376:	f004 fc99 	bl	8004cac <HAL_TIM_Base_Start_IT>
			  goto UART9;
 800037a:	e7e2      	b.n	8000342 <send_data_to_server+0x1d2>
	  while(flag_pass==0) {
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <send_data_to_server+0x250>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f3      	beq.n	800036c <send_data_to_server+0x1fc>
		  }
	  }
	  flag_timer4=0;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <send_data_to_server+0x2a4>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <send_data_to_server+0x2a0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Stop_IT(&htim4);
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <send_data_to_server+0x2a0>)
 8000394:	f004 fcdc 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
	  flag_check_RX_PAYLOAD =1;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <send_data_to_server+0x248>)
 800039a:	2201      	movs	r2, #1
 800039c:	601a      	str	r2, [r3, #0]
	  flag_check_OK =0;
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <send_data_to_server+0x24c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]


	  memset(message_gui_server,0,sizeof(message_gui_server));
 80003a4:	223c      	movs	r2, #60	; 0x3c
 80003a6:	2100      	movs	r1, #0
 80003a8:	4818      	ldr	r0, [pc, #96]	; (800040c <send_data_to_server+0x29c>)
 80003aa:	f006 f8e1 	bl	8006570 <memset>

}
 80003ae:	bf00      	nop
 80003b0:	371c      	adds	r7, #28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200004e0 	.word	0x200004e0
 80003bc:	200004d4 	.word	0x200004d4
 80003c0:	200004e4 	.word	0x200004e4
 80003c4:	200000f4 	.word	0x200000f4
 80003c8:	20000460 	.word	0x20000460
 80003cc:	2000011c 	.word	0x2000011c
 80003d0:	20000144 	.word	0x20000144
 80003d4:	20000528 	.word	0x20000528
 80003d8:	20000570 	.word	0x20000570
 80003dc:	2000052c 	.word	0x2000052c
 80003e0:	20000574 	.word	0x20000574
 80003e4:	20000530 	.word	0x20000530
 80003e8:	20000578 	.word	0x20000578
 80003ec:	200001f0 	.word	0x200001f0
 80003f0:	2000057c 	.word	0x2000057c
 80003f4:	40010800 	.word	0x40010800
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	200005f0 	.word	0x200005f0
 8000400:	20000628 	.word	0x20000628
 8000404:	2000062c 	.word	0x2000062c
 8000408:	080077b4 	.word	0x080077b4
 800040c:	20000640 	.word	0x20000640
 8000410:	20000418 	.word	0x20000418
 8000414:	20000690 	.word	0x20000690
 8000418:	2000016c 	.word	0x2000016c

0800041c <init_sim>:

void init_sim(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	  flag_check_RX_PAYLOAD =0;
 8000420:	4b58      	ldr	r3, [pc, #352]	; (8000584 <init_sim+0x168>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
	  flag_check_OK =1;
 8000426:	4b58      	ldr	r3, [pc, #352]	; (8000588 <init_sim+0x16c>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]

	  flag_pass = 0;
 800042c:	4b57      	ldr	r3, [pc, #348]	; (800058c <init_sim+0x170>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM1, strlen((const char*)data_SIM1), 10);
 8000432:	4857      	ldr	r0, [pc, #348]	; (8000590 <init_sim+0x174>)
 8000434:	f7ff fe94 	bl	8000160 <strlen>
 8000438:	4603      	mov	r3, r0
 800043a:	b29a      	uxth	r2, r3
 800043c:	230a      	movs	r3, #10
 800043e:	4954      	ldr	r1, [pc, #336]	; (8000590 <init_sim+0x174>)
 8000440:	4854      	ldr	r0, [pc, #336]	; (8000594 <init_sim+0x178>)
 8000442:	f005 f85f 	bl	8005504 <HAL_UART_Transmit>
	  while(flag_pass==0);
 8000446:	bf00      	nop
 8000448:	4b50      	ldr	r3, [pc, #320]	; (800058c <init_sim+0x170>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0fb      	beq.n	8000448 <init_sim+0x2c>
	  //////////////1//////////////////
	  flag_pass = 0;
 8000450:	4b4e      	ldr	r3, [pc, #312]	; (800058c <init_sim+0x170>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM2, strlen((const char*)data_SIM2), 10);
 8000456:	4850      	ldr	r0, [pc, #320]	; (8000598 <init_sim+0x17c>)
 8000458:	f7ff fe82 	bl	8000160 <strlen>
 800045c:	4603      	mov	r3, r0
 800045e:	b29a      	uxth	r2, r3
 8000460:	230a      	movs	r3, #10
 8000462:	494d      	ldr	r1, [pc, #308]	; (8000598 <init_sim+0x17c>)
 8000464:	484b      	ldr	r0, [pc, #300]	; (8000594 <init_sim+0x178>)
 8000466:	f005 f84d 	bl	8005504 <HAL_UART_Transmit>
	  while(flag_pass==0);
 800046a:	bf00      	nop
 800046c:	4b47      	ldr	r3, [pc, #284]	; (800058c <init_sim+0x170>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0fb      	beq.n	800046c <init_sim+0x50>
	  ////////////////2///////////////////
	  flag_pass = 0;
 8000474:	4b45      	ldr	r3, [pc, #276]	; (800058c <init_sim+0x170>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
	  UART3:
	  	  HAL_TIM_Base_Start_IT(&htim4);
 800047a:	4848      	ldr	r0, [pc, #288]	; (800059c <init_sim+0x180>)
 800047c:	f004 fc16 	bl	8004cac <HAL_TIM_Base_Start_IT>
	  	  flag_timer4=0;
 8000480:	4b47      	ldr	r3, [pc, #284]	; (80005a0 <init_sim+0x184>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
	  	  __HAL_TIM_SET_COUNTER(&htim4,0);
 8000486:	4b45      	ldr	r3, [pc, #276]	; (800059c <init_sim+0x180>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
	  	HAL_UART_Transmit(&huart1, data_SIM3, strlen((const char*)data_SIM3), 10);
 800048e:	4845      	ldr	r0, [pc, #276]	; (80005a4 <init_sim+0x188>)
 8000490:	f7ff fe66 	bl	8000160 <strlen>
 8000494:	4603      	mov	r3, r0
 8000496:	b29a      	uxth	r2, r3
 8000498:	230a      	movs	r3, #10
 800049a:	4942      	ldr	r1, [pc, #264]	; (80005a4 <init_sim+0x188>)
 800049c:	483d      	ldr	r0, [pc, #244]	; (8000594 <init_sim+0x178>)
 800049e:	f005 f831 	bl	8005504 <HAL_UART_Transmit>
	  	  while(flag_pass==0){
 80004a2:	e007      	b.n	80004b4 <init_sim+0x98>
	  		  if(flag_timer4 ==1)
 80004a4:	4b3e      	ldr	r3, [pc, #248]	; (80005a0 <init_sim+0x184>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d103      	bne.n	80004b4 <init_sim+0x98>
	  		  {
	  			  HAL_TIM_Base_Start_IT(&htim4);
 80004ac:	483b      	ldr	r0, [pc, #236]	; (800059c <init_sim+0x180>)
 80004ae:	f004 fbfd 	bl	8004cac <HAL_TIM_Base_Start_IT>
	  			  goto UART3;
 80004b2:	e7e2      	b.n	800047a <init_sim+0x5e>
	  	  while(flag_pass==0){
 80004b4:	4b35      	ldr	r3, [pc, #212]	; (800058c <init_sim+0x170>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f3      	beq.n	80004a4 <init_sim+0x88>
	  		  }
	  	  }
	  	  flag_timer4=0;
 80004bc:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <init_sim+0x184>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
	  	  __HAL_TIM_SET_COUNTER(&htim4,0);
 80004c2:	4b36      	ldr	r3, [pc, #216]	; (800059c <init_sim+0x180>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
	  	  HAL_TIM_Base_Stop_IT(&htim4);
 80004ca:	4834      	ldr	r0, [pc, #208]	; (800059c <init_sim+0x180>)
 80004cc:	f004 fc40 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
	  ////////////////////////3/////////////////////
	  flag_pass = 0;
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <init_sim+0x170>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM4, strlen((const char*)data_SIM4), 10);
 80004d6:	4834      	ldr	r0, [pc, #208]	; (80005a8 <init_sim+0x18c>)
 80004d8:	f7ff fe42 	bl	8000160 <strlen>
 80004dc:	4603      	mov	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	230a      	movs	r3, #10
 80004e2:	4931      	ldr	r1, [pc, #196]	; (80005a8 <init_sim+0x18c>)
 80004e4:	482b      	ldr	r0, [pc, #172]	; (8000594 <init_sim+0x178>)
 80004e6:	f005 f80d 	bl	8005504 <HAL_UART_Transmit>
	  while(flag_pass==0);
 80004ea:	bf00      	nop
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <init_sim+0x170>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0fb      	beq.n	80004ec <init_sim+0xd0>
	  flag_pass = 0;
 80004f4:	4b25      	ldr	r3, [pc, #148]	; (800058c <init_sim+0x170>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, data_SIM10, (uint16_t)strlen((const char*)data_SIM10), 10);
 80004fa:	482c      	ldr	r0, [pc, #176]	; (80005ac <init_sim+0x190>)
 80004fc:	f7ff fe30 	bl	8000160 <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	230a      	movs	r3, #10
 8000506:	4929      	ldr	r1, [pc, #164]	; (80005ac <init_sim+0x190>)
 8000508:	4822      	ldr	r0, [pc, #136]	; (8000594 <init_sim+0x178>)
 800050a:	f004 fffb 	bl	8005504 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f002 f9fa 	bl	8002908 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, data_SIM11, (uint16_t)strlen((const char*)data_SIM11), 10);
 8000514:	4826      	ldr	r0, [pc, #152]	; (80005b0 <init_sim+0x194>)
 8000516:	f7ff fe23 	bl	8000160 <strlen>
 800051a:	4603      	mov	r3, r0
 800051c:	b29a      	uxth	r2, r3
 800051e:	230a      	movs	r3, #10
 8000520:	4923      	ldr	r1, [pc, #140]	; (80005b0 <init_sim+0x194>)
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <init_sim+0x178>)
 8000524:	f004 ffee 	bl	8005504 <HAL_UART_Transmit>
	  while(flag_pass==0);
 8000528:	bf00      	nop
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <init_sim+0x170>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0fb      	beq.n	800052a <init_sim+0x10e>
	  flag_check_RX_PAYLOAD =1;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <init_sim+0x168>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	  flag_check_OK =0;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <init_sim+0x16c>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
	  flag_pass_all_RX_PAYLOAD = 0;
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <init_sim+0x198>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]


	  memset(data_SIM1,0,sizeof(data_SIM1));
 8000544:	2228      	movs	r2, #40	; 0x28
 8000546:	2100      	movs	r1, #0
 8000548:	4811      	ldr	r0, [pc, #68]	; (8000590 <init_sim+0x174>)
 800054a:	f006 f811 	bl	8006570 <memset>
	  memset(data_SIM1,0,sizeof(data_SIM2));
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <init_sim+0x174>)
 8000554:	f006 f80c 	bl	8006570 <memset>
	  memset(data_SIM1,0,sizeof(data_SIM3));
 8000558:	2228      	movs	r2, #40	; 0x28
 800055a:	2100      	movs	r1, #0
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <init_sim+0x174>)
 800055e:	f006 f807 	bl	8006570 <memset>
	  memset(data_SIM1,0,sizeof(data_SIM4));
 8000562:	2246      	movs	r2, #70	; 0x46
 8000564:	2100      	movs	r1, #0
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <init_sim+0x174>)
 8000568:	f006 f802 	bl	8006570 <memset>
	  memset(data_SIM1,0,sizeof(data_SIM10));
 800056c:	2228      	movs	r2, #40	; 0x28
 800056e:	2100      	movs	r1, #0
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <init_sim+0x174>)
 8000572:	f005 fffd 	bl	8006570 <memset>
	  memset(data_SIM1,0,sizeof(data_SIM11));
 8000576:	2228      	movs	r2, #40	; 0x28
 8000578:	2100      	movs	r1, #0
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <init_sim+0x174>)
 800057c:	f005 fff8 	bl	8006570 <memset>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200004e0 	.word	0x200004e0
 8000588:	200004d4 	.word	0x200004d4
 800058c:	200004e4 	.word	0x200004e4
 8000590:	20000034 	.word	0x20000034
 8000594:	20000460 	.word	0x20000460
 8000598:	2000005c 	.word	0x2000005c
 800059c:	20000418 	.word	0x20000418
 80005a0:	20000690 	.word	0x20000690
 80005a4:	20000084 	.word	0x20000084
 80005a8:	200000ac 	.word	0x200000ac
 80005ac:	20000194 	.word	0x20000194
 80005b0:	200001bc 	.word	0x200001bc
 80005b4:	200004f8 	.word	0x200004f8

080005b8 <update>:
void update(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	switch( mode % 2 ) {
 80005be:	4b91      	ldr	r3, [pc, #580]	; (8000804 <update+0x24c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	bfb8      	it	lt
 80005ca:	425b      	neglt	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <update+0x1e>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d062      	beq.n	800069a <update+0xe2>
					  bom=0;
				  }
				  break;
			  }
		  }
}
 80005d4:	e112      	b.n	80007fc <update+0x244>
				  flag_disable_nut_nhan=0;
 80005d6:	4b8c      	ldr	r3, [pc, #560]	; (8000808 <update+0x250>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
				  flag_mode_bang_tay =1;
 80005dc:	4b8b      	ldr	r3, [pc, #556]	; (800080c <update+0x254>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
				  flag_mode_tu_dong =0;
 80005e2:	4b8b      	ldr	r3, [pc, #556]	; (8000810 <update+0x258>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	4889      	ldr	r0, [pc, #548]	; (8000814 <update+0x25c>)
 80005f0:	f003 f949 	bl	8003886 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	4886      	ldr	r0, [pc, #536]	; (8000814 <update+0x25c>)
 80005fc:	f003 f943 	bl	8003886 <HAL_GPIO_WritePin>
				  status_previous_led=led;
 8000600:	4b85      	ldr	r3, [pc, #532]	; (8000818 <update+0x260>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a85      	ldr	r2, [pc, #532]	; (800081c <update+0x264>)
 8000606:	6013      	str	r3, [r2, #0]
				  status_previous_quat=quat;
 8000608:	4b85      	ldr	r3, [pc, #532]	; (8000820 <update+0x268>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a85      	ldr	r2, [pc, #532]	; (8000824 <update+0x26c>)
 800060e:	6013      	str	r3, [r2, #0]
				  status_previous_bom=bom;
 8000610:	4b85      	ldr	r3, [pc, #532]	; (8000828 <update+0x270>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a85      	ldr	r2, [pc, #532]	; (800082c <update+0x274>)
 8000616:	6013      	str	r3, [r2, #0]
				  if((led % 2) == 1)
 8000618:	4b7f      	ldr	r3, [pc, #508]	; (8000818 <update+0x260>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	bfb8      	it	lt
 8000624:	425b      	neglt	r3, r3
 8000626:	2b01      	cmp	r3, #1
 8000628:	d106      	bne.n	8000638 <update+0x80>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, HIGH_LOAD);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	487f      	ldr	r0, [pc, #508]	; (8000830 <update+0x278>)
 8000632:	f003 f928 	bl	8003886 <HAL_GPIO_WritePin>
 8000636:	e005      	b.n	8000644 <update+0x8c>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LOW_LOAD);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063e:	487c      	ldr	r0, [pc, #496]	; (8000830 <update+0x278>)
 8000640:	f003 f921 	bl	8003886 <HAL_GPIO_WritePin>
				  if((quat % 2) == 1)
 8000644:	4b76      	ldr	r3, [pc, #472]	; (8000820 <update+0x268>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	bfb8      	it	lt
 8000650:	425b      	neglt	r3, r3
 8000652:	2b01      	cmp	r3, #1
 8000654:	d106      	bne.n	8000664 <update+0xac>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, HIGH_LOAD);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	4874      	ldr	r0, [pc, #464]	; (8000830 <update+0x278>)
 800065e:	f003 f912 	bl	8003886 <HAL_GPIO_WritePin>
 8000662:	e005      	b.n	8000670 <update+0xb8>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LOW_LOAD);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066a:	4871      	ldr	r0, [pc, #452]	; (8000830 <update+0x278>)
 800066c:	f003 f90b 	bl	8003886 <HAL_GPIO_WritePin>
				  if((bom % 2) == 1)
 8000670:	4b6d      	ldr	r3, [pc, #436]	; (8000828 <update+0x270>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	bfb8      	it	lt
 800067c:	425b      	neglt	r3, r3
 800067e:	2b01      	cmp	r3, #1
 8000680:	d105      	bne.n	800068e <update+0xd6>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, HIGH_LOAD);
 8000682:	2200      	movs	r2, #0
 8000684:	2101      	movs	r1, #1
 8000686:	486a      	ldr	r0, [pc, #424]	; (8000830 <update+0x278>)
 8000688:	f003 f8fd 	bl	8003886 <HAL_GPIO_WritePin>
				  break;
 800068c:	e0b6      	b.n	80007fc <update+0x244>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, LOW_LOAD);
 800068e:	2201      	movs	r2, #1
 8000690:	2101      	movs	r1, #1
 8000692:	4867      	ldr	r0, [pc, #412]	; (8000830 <update+0x278>)
 8000694:	f003 f8f7 	bl	8003886 <HAL_GPIO_WritePin>
				  break;
 8000698:	e0b0      	b.n	80007fc <update+0x244>
				  if(flag_di_qua_nhap_mat_khau==1){
 800069a:	4b66      	ldr	r3, [pc, #408]	; (8000834 <update+0x27c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d103      	bne.n	80006aa <update+0xf2>
					  flag_disable_nut_nhan=1;
 80006a2:	4b59      	ldr	r3, [pc, #356]	; (8000808 <update+0x250>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e002      	b.n	80006b0 <update+0xf8>
					  flag_disable_nut_nhan=0;
 80006aa:	4b57      	ldr	r3, [pc, #348]	; (8000808 <update+0x250>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				  flag_mode_tu_dong=1;
 80006b0:	4b57      	ldr	r3, [pc, #348]	; (8000810 <update+0x258>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
				  flag_mode_bang_tay =0;
 80006b6:	4b55      	ldr	r3, [pc, #340]	; (800080c <update+0x254>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c2:	4854      	ldr	r0, [pc, #336]	; (8000814 <update+0x25c>)
 80006c4:	f003 f8df 	bl	8003886 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ce:	4851      	ldr	r0, [pc, #324]	; (8000814 <update+0x25c>)
 80006d0:	f003 f8d9 	bl	8003886 <HAL_GPIO_WritePin>
				  int check_status_pre = ((status_previous_led%2) != (led%2)) || ((status_previous_quat%2) != (quat%2)) || ((status_previous_bom%2) != (bom%2));
 80006d4:	4b51      	ldr	r3, [pc, #324]	; (800081c <update+0x264>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	bfb8      	it	lt
 80006e0:	425b      	neglt	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <update+0x260>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	bfb8      	it	lt
 80006f0:	425b      	neglt	r3, r3
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d121      	bne.n	800073a <update+0x182>
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <update+0x26c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	bfb8      	it	lt
 8000702:	425b      	neglt	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4b46      	ldr	r3, [pc, #280]	; (8000820 <update+0x268>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	bfb8      	it	lt
 8000712:	425b      	neglt	r3, r3
 8000714:	429a      	cmp	r2, r3
 8000716:	d110      	bne.n	800073a <update+0x182>
 8000718:	4b44      	ldr	r3, [pc, #272]	; (800082c <update+0x274>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	bfb8      	it	lt
 8000724:	425b      	neglt	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <update+0x270>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	bfb8      	it	lt
 8000734:	425b      	neglt	r3, r3
 8000736:	429a      	cmp	r2, r3
 8000738:	d001      	beq.n	800073e <update+0x186>
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <update+0x188>
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
				  status_previous_led=led;
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <update+0x260>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a35      	ldr	r2, [pc, #212]	; (800081c <update+0x264>)
 8000748:	6013      	str	r3, [r2, #0]
				  status_previous_quat=quat;
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <update+0x268>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a35      	ldr	r2, [pc, #212]	; (8000824 <update+0x26c>)
 8000750:	6013      	str	r3, [r2, #0]
				  status_previous_bom=bom;
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <update+0x270>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a35      	ldr	r2, [pc, #212]	; (800082c <update+0x274>)
 8000758:	6013      	str	r3, [r2, #0]
				  if(check_status_pre) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <update+0x1ae>
					  flag_ngat_keypad=1;
 8000760:	4b35      	ldr	r3, [pc, #212]	; (8000838 <update+0x280>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
				  if( adc_quang_tro > nguong_adc_quang_tro)
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <update+0x284>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <update+0x288>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	dd09      	ble.n	8000786 <update+0x1ce>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, HIGH_LOAD);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	482d      	ldr	r0, [pc, #180]	; (8000830 <update+0x278>)
 800077a:	f003 f884 	bl	8003886 <HAL_GPIO_WritePin>
					  led =1;
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <update+0x260>)
 8000780:	2201      	movs	r2, #1
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	e008      	b.n	8000798 <update+0x1e0>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LOW_LOAD);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078c:	4828      	ldr	r0, [pc, #160]	; (8000830 <update+0x278>)
 800078e:	f003 f87a 	bl	8003886 <HAL_GPIO_WritePin>
					  led=0;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <update+0x260>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
				  if(data_dht11[3] > nguong_nhiet_do)
 8000798:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <update+0x28c>)
 800079a:	78db      	ldrb	r3, [r3, #3]
 800079c:	461a      	mov	r2, r3
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <update+0x290>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	dd09      	ble.n	80007ba <update+0x202>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, HIGH_LOAD);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <update+0x278>)
 80007ae:	f003 f86a 	bl	8003886 <HAL_GPIO_WritePin>
					  quat=1;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <update+0x268>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e008      	b.n	80007cc <update+0x214>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LOW_LOAD);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	481b      	ldr	r0, [pc, #108]	; (8000830 <update+0x278>)
 80007c2:	f003 f860 	bl	8003886 <HAL_GPIO_WritePin>
					  quat=0;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <update+0x268>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
				  if(adc_do_am_dat > nguong_adc_do_am_dat)
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <update+0x294>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <update+0x298>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dd08      	ble.n	80007ea <update+0x232>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, HIGH_LOAD);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <update+0x278>)
 80007de:	f003 f852 	bl	8003886 <HAL_GPIO_WritePin>
					  bom=1;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <update+0x270>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
				  break;
 80007e8:	e007      	b.n	80007fa <update+0x242>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, LOW_LOAD);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2101      	movs	r1, #1
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <update+0x278>)
 80007f0:	f003 f849 	bl	8003886 <HAL_GPIO_WritePin>
					  bom=0;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <update+0x270>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
				  break;
 80007fa:	bf00      	nop
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200001f0 	.word	0x200001f0
 8000808:	20000694 	.word	0x20000694
 800080c:	200001f4 	.word	0x200001f4
 8000810:	20000534 	.word	0x20000534
 8000814:	40010c00 	.word	0x40010c00
 8000818:	20000528 	.word	0x20000528
 800081c:	20000698 	.word	0x20000698
 8000820:	2000052c 	.word	0x2000052c
 8000824:	2000069c 	.word	0x2000069c
 8000828:	20000530 	.word	0x20000530
 800082c:	200006a0 	.word	0x200006a0
 8000830:	40010800 	.word	0x40010800
 8000834:	2000068c 	.word	0x2000068c
 8000838:	20000200 	.word	0x20000200
 800083c:	20000628 	.word	0x20000628
 8000840:	200001e4 	.word	0x200001e4
 8000844:	200005f0 	.word	0x200005f0
 8000848:	200001ec 	.word	0x200001ec
 800084c:	2000062c 	.word	0x2000062c
 8000850:	200001e8 	.word	0x200001e8

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f001 fff3 	bl	8002844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 fa81 	bl	8000d64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(15000);
 8000862:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000866:	f002 f84f 	bl	8002908 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 fce5 	bl	8001238 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800086e:	f000 fcb9 	bl	80011e4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000872:	f000 fb7d 	bl	8000f70 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000876:	f000 fb4d 	bl	8000f14 <MX_I2C1_Init>
  MX_TIM2_Init();
 800087a:	f000 fbcb 	bl	8001014 <MX_TIM2_Init>
  MX_TIM3_Init();
 800087e:	f000 fc15 	bl	80010ac <MX_TIM3_Init>
  MX_ADC1_Init();
 8000882:	f000 facb 	bl	8000e1c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000886:	f000 fb07 	bl	8000e98 <MX_ADC2_Init>
  MX_TIM4_Init();
 800088a:	f000 fc5d 	bl	8001148 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800088e:	2007      	movs	r0, #7
 8000890:	f002 fcd5 	bl	800323e <HAL_NVIC_DisableIRQ>
  HAL_TIM_Base_Stop_IT(&htim2);
 8000894:	48b0      	ldr	r0, [pc, #704]	; (8000b58 <main+0x304>)
 8000896:	f004 fa5b 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim3);
 800089a:	48b0      	ldr	r0, [pc, #704]	; (8000b5c <main+0x308>)
 800089c:	f004 fa58 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
  HAL_UART_Receive_IT(&huart1, dataRX, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	49af      	ldr	r1, [pc, #700]	; (8000b60 <main+0x30c>)
 80008a4:	48af      	ldr	r0, [pc, #700]	; (8000b64 <main+0x310>)
 80008a6:	f004 feb0 	bl	800560a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80008aa:	48af      	ldr	r0, [pc, #700]	; (8000b68 <main+0x314>)
 80008ac:	f004 f9fe 	bl	8004cac <HAL_TIM_Base_Start_IT>
  lcd_init();
 80008b0:	f005 fdc0 	bl	8006434 <lcd_init>
  lcd_clear();
 80008b4:	f005 fd88 	bl	80063c8 <lcd_clear>
  lcd_put_cur(0,3);
 80008b8:	2103      	movs	r1, #3
 80008ba:	2000      	movs	r0, #0
 80008bc:	f005 fd9b 	bl	80063f6 <lcd_put_cur>
  lcd_send_string("HELLO LCD");
 80008c0:	48aa      	ldr	r0, [pc, #680]	; (8000b6c <main+0x318>)
 80008c2:	f005 fdf4 	bl	80064ae <lcd_send_string>
  init_sim();
 80008c6:	f7ff fda9 	bl	800041c <init_sim>
//	  flag_check_OK =0;
//	  flag_pass_all_RX_PAYLOAD = 0;
//	  HAL_UART_Transmit(&huart1, data_SIM10, strlen(data_SIM10), 10);
//	  HAL_Delay(100);
//	  HAL_UART_Transmit(&huart1, data_SIM11, strlen(data_SIM11), 10);
	  update();
 80008ca:	f7ff fe75 	bl	80005b8 <update>
		if ( flag_ngat_uart_xong_message )
 80008ce:	4ba8      	ldr	r3, [pc, #672]	; (8000b70 <main+0x31c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d010      	beq.n	80008f8 <main+0xa4>
		{
			flag_ngat_uart_xong_message=0;
 80008d6:	4ba6      	ldr	r3, [pc, #664]	; (8000b70 <main+0x31c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			for(int i=0 ; i < sizeof(message); i++ )
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e007      	b.n	80008f2 <main+0x9e>
			{
				message[i] = 0;
 80008e2:	4aa4      	ldr	r2, [pc, #656]	; (8000b74 <main+0x320>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
			for(int i=0 ; i < sizeof(message); i++ )
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b27      	cmp	r3, #39	; 0x27
 80008f6:	d9f4      	bls.n	80008e2 <main+0x8e>
			}
		}
		if(flag_send_data)
 80008f8:	4b9f      	ldr	r3, [pc, #636]	; (8000b78 <main+0x324>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d05d      	beq.n	80009bc <main+0x168>
		{
			flag_send_data =0;
 8000900:	4b9d      	ldr	r3, [pc, #628]	; (8000b78 <main+0x324>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
			doc_dht11();
 8000906:	f001 fc71 	bl	80021ec <doc_dht11>
			HAL_Delay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f001 fffc 	bl	8002908 <HAL_Delay>
			xu_ly_tick_dht11(tick,data_dht11);
 8000910:	499a      	ldr	r1, [pc, #616]	; (8000b7c <main+0x328>)
 8000912:	489b      	ldr	r0, [pc, #620]	; (8000b80 <main+0x32c>)
 8000914:	f001 fc12 	bl	800213c <xu_ly_tick_dht11>

			sprintf(nhiet_do,"Nhiet do: %d.%doC", data_dht11[2], data_dht11[3]);
 8000918:	4b98      	ldr	r3, [pc, #608]	; (8000b7c <main+0x328>)
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	461a      	mov	r2, r3
 800091e:	4b97      	ldr	r3, [pc, #604]	; (8000b7c <main+0x328>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	4998      	ldr	r1, [pc, #608]	; (8000b84 <main+0x330>)
 8000924:	4898      	ldr	r0, [pc, #608]	; (8000b88 <main+0x334>)
 8000926:	f005 fdd7 	bl	80064d8 <siprintf>
			sprintf(do_am, "Do am:  %d.%d ", data_dht11[0],data_dht11[1]);
 800092a:	4b94      	ldr	r3, [pc, #592]	; (8000b7c <main+0x328>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	4b92      	ldr	r3, [pc, #584]	; (8000b7c <main+0x328>)
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	4995      	ldr	r1, [pc, #596]	; (8000b8c <main+0x338>)
 8000936:	4896      	ldr	r0, [pc, #600]	; (8000b90 <main+0x33c>)
 8000938:	f005 fdce 	bl	80064d8 <siprintf>
			HAL_ADC_Start(&hadc1);
 800093c:	4895      	ldr	r0, [pc, #596]	; (8000b94 <main+0x340>)
 800093e:	f002 f8df 	bl	8002b00 <HAL_ADC_Start>
			HAL_Delay(50);
 8000942:	2032      	movs	r0, #50	; 0x32
 8000944:	f001 ffe0 	bl	8002908 <HAL_Delay>
			HAL_ADC_Start(&hadc2);
 8000948:	4893      	ldr	r0, [pc, #588]	; (8000b98 <main+0x344>)
 800094a:	f002 f8d9 	bl	8002b00 <HAL_ADC_Start>
			HAL_Delay(50);
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f001 ffda 	bl	8002908 <HAL_Delay>
			adc_quang_tro = HAL_ADC_GetValue(&hadc1);   // đ ?c adc quang trở
 8000954:	488f      	ldr	r0, [pc, #572]	; (8000b94 <main+0x340>)
 8000956:	f002 f9ad 	bl	8002cb4 <HAL_ADC_GetValue>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b8f      	ldr	r3, [pc, #572]	; (8000b9c <main+0x348>)
 8000960:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8000962:	2032      	movs	r0, #50	; 0x32
 8000964:	f001 ffd0 	bl	8002908 <HAL_Delay>
			adc_do_am_dat = HAL_ADC_GetValue(&hadc2);
 8000968:	488b      	ldr	r0, [pc, #556]	; (8000b98 <main+0x344>)
 800096a:	f002 f9a3 	bl	8002cb4 <HAL_ADC_GetValue>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b8b      	ldr	r3, [pc, #556]	; (8000ba0 <main+0x34c>)
 8000974:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8000976:	2032      	movs	r0, #50	; 0x32
 8000978:	f001 ffc6 	bl	8002908 <HAL_Delay>
			HAL_ADC_Stop(&hadc1);
 800097c:	4885      	ldr	r0, [pc, #532]	; (8000b94 <main+0x340>)
 800097e:	f002 f96d 	bl	8002c5c <HAL_ADC_Stop>
			HAL_ADC_Stop(&hadc2);
 8000982:	4885      	ldr	r0, [pc, #532]	; (8000b98 <main+0x344>)
 8000984:	f002 f96a 	bl	8002c5c <HAL_ADC_Stop>
			HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000988:	2008      	movs	r0, #8
 800098a:	f002 fc58 	bl	800323e <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 800098e:	2009      	movs	r0, #9
 8000990:	f002 fc55 	bl	800323e <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000994:	200a      	movs	r0, #10
 8000996:	f002 fc52 	bl	800323e <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800099a:	2017      	movs	r0, #23
 800099c:	f002 fc4f 	bl	800323e <HAL_NVIC_DisableIRQ>
			send_data_to_server();
 80009a0:	f7ff fbe6 	bl	8000170 <send_data_to_server>
			HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009a4:	2008      	movs	r0, #8
 80009a6:	f002 fc3c 	bl	8003222 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009aa:	2009      	movs	r0, #9
 80009ac:	f002 fc39 	bl	8003222 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f002 fc36 	bl	8003222 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b6:	2017      	movs	r0, #23
 80009b8:	f002 fc33 	bl	8003222 <HAL_NVIC_EnableIRQ>
		}
		update();
 80009bc:	f7ff fdfc 	bl	80005b8 <update>
		if( flag_ngat_keypad )
 80009c0:	4b78      	ldr	r3, [pc, #480]	; (8000ba4 <main+0x350>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d080      	beq.n	80008ca <main+0x76>
		{
			flag_ngat_keypad=0;
 80009c8:	4b76      	ldr	r3, [pc, #472]	; (8000ba4 <main+0x350>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
			switch(count_state_lcd%4)
 80009ce:	4b76      	ldr	r3, [pc, #472]	; (8000ba8 <main+0x354>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	425a      	negs	r2, r3
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	f002 0203 	and.w	r2, r2, #3
 80009dc:	bf58      	it	pl
 80009de:	4253      	negpl	r3, r2
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	f63f af72 	bhi.w	80008ca <main+0x76>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <main+0x198>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08000a1f 	.word	0x08000a1f
 80009f4:	08000c73 	.word	0x08000c73
 80009f8:	08000cdd 	.word	0x08000cdd
					{
						case 0:
						{
								lcd_clear();
 80009fc:	f005 fce4 	bl	80063c8 <lcd_clear>
								lcd_put_cur(0,0);
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f005 fcf7 	bl	80063f6 <lcd_put_cur>
								lcd_send_string(nhiet_do);
 8000a08:	485f      	ldr	r0, [pc, #380]	; (8000b88 <main+0x334>)
 8000a0a:	f005 fd50 	bl	80064ae <lcd_send_string>
								lcd_put_cur(1,0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2001      	movs	r0, #1
 8000a12:	f005 fcf0 	bl	80063f6 <lcd_put_cur>
								lcd_send_string(do_am);
 8000a16:	485e      	ldr	r0, [pc, #376]	; (8000b90 <main+0x33c>)
 8000a18:	f005 fd49 	bl	80064ae <lcd_send_string>
								break;
 8000a1c:	e17b      	b.n	8000d16 <main+0x4c2>
						}
						case 1:
						{

							if(flag_chuyen_lcd)
 8000a1e:	4b63      	ldr	r3, [pc, #396]	; (8000bac <main+0x358>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d019      	beq.n	8000a5a <main+0x206>
							{
								count_mat_khau=-1;
 8000a26:	4b62      	ldr	r3, [pc, #392]	; (8000bb0 <main+0x35c>)
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	601a      	str	r2, [r3, #0]
								count_may_chu_nhap_vao=0;
 8000a2e:	4b61      	ldr	r3, [pc, #388]	; (8000bb4 <main+0x360>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
								flag_lan_dau_nhap_mat_khau =1;
 8000a34:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <main+0x364>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
								flag_chuyen_lcd=0;
 8000a3a:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <main+0x358>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
								lcd_clear();
 8000a40:	f005 fcc2 	bl	80063c8 <lcd_clear>
								lcd_put_cur(0,1);
 8000a44:	2101      	movs	r1, #1
 8000a46:	2000      	movs	r0, #0
 8000a48:	f005 fcd5 	bl	80063f6 <lcd_put_cur>
								lcd_send_string("Nhap mat khau:");
 8000a4c:	485b      	ldr	r0, [pc, #364]	; (8000bbc <main+0x368>)
 8000a4e:	f005 fd2e 	bl	80064ae <lcd_send_string>
								lcd_put_cur(1,0);
 8000a52:	2100      	movs	r1, #0
 8000a54:	2001      	movs	r0, #1
 8000a56:	f005 fcce 	bl	80063f6 <lcd_put_cur>
							}
								count_mat_khau++;
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <main+0x35c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <main+0x35c>)
 8000a62:	6013      	str	r3, [r2, #0]
								count_may_chu_nhap_vao++;
 8000a64:	4b53      	ldr	r3, [pc, #332]	; (8000bb4 <main+0x360>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4a52      	ldr	r2, [pc, #328]	; (8000bb4 <main+0x360>)
 8000a6c:	6013      	str	r3, [r2, #0]
							if(count_may_chu_nhap_vao>=2)
 8000a6e:	4b51      	ldr	r3, [pc, #324]	; (8000bb4 <main+0x360>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	f340 814d 	ble.w	8000d12 <main+0x4be>
							{
								if(count_may_chu_nhap_vao==2){
 8000a78:	4b4e      	ldr	r3, [pc, #312]	; (8000bb4 <main+0x360>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d102      	bne.n	8000a86 <main+0x232>
									count_mat_khau=0;
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <main+0x35c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
								}
								if((flag_number <= 9) && (flag_number >=0))
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <main+0x36c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b09      	cmp	r3, #9
 8000a8c:	dc0a      	bgt.n	8000aa4 <main+0x250>
 8000a8e:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <main+0x36c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db06      	blt.n	8000aa4 <main+0x250>
								{
								mat_khau_user[count_mat_khau] = flag_number;
 8000a96:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <main+0x36c>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <main+0x35c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	b2d1      	uxtb	r1, r2
 8000aa0:	4a48      	ldr	r2, [pc, #288]	; (8000bc4 <main+0x370>)
 8000aa2:	54d1      	strb	r1, [r2, r3]
								}
								switch(flag_number)
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <main+0x36c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b0b      	cmp	r3, #11
 8000aaa:	f200 80dd 	bhi.w	8000c68 <main+0x414>
 8000aae:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <main+0x260>)
 8000ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab4:	08000b2d 	.word	0x08000b2d
 8000ab8:	08000ae5 	.word	0x08000ae5
 8000abc:	08000aed 	.word	0x08000aed
 8000ac0:	08000af5 	.word	0x08000af5
 8000ac4:	08000afd 	.word	0x08000afd
 8000ac8:	08000b05 	.word	0x08000b05
 8000acc:	08000b0d 	.word	0x08000b0d
 8000ad0:	08000b15 	.word	0x08000b15
 8000ad4:	08000b1d 	.word	0x08000b1d
 8000ad8:	08000b25 	.word	0x08000b25
 8000adc:	08000c69 	.word	0x08000c69
 8000ae0:	08000b35 	.word	0x08000b35
								{
									case 1:
									{
										lcd_send_string("*");
 8000ae4:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <main+0x374>)
 8000ae6:	f005 fce2 	bl	80064ae <lcd_send_string>
										break;
 8000aea:	e0c1      	b.n	8000c70 <main+0x41c>
									}
									case 2:
									{
										lcd_send_string("*");
 8000aec:	4836      	ldr	r0, [pc, #216]	; (8000bc8 <main+0x374>)
 8000aee:	f005 fcde 	bl	80064ae <lcd_send_string>
										break;
 8000af2:	e0bd      	b.n	8000c70 <main+0x41c>
									}
									case 3:
									{
										lcd_send_string("*");
 8000af4:	4834      	ldr	r0, [pc, #208]	; (8000bc8 <main+0x374>)
 8000af6:	f005 fcda 	bl	80064ae <lcd_send_string>
										break;
 8000afa:	e0b9      	b.n	8000c70 <main+0x41c>
									}
									case 4:
									{
										lcd_send_string("*");
 8000afc:	4832      	ldr	r0, [pc, #200]	; (8000bc8 <main+0x374>)
 8000afe:	f005 fcd6 	bl	80064ae <lcd_send_string>
										break;
 8000b02:	e0b5      	b.n	8000c70 <main+0x41c>
									}
									case 5:
									{
										lcd_send_string("*");
 8000b04:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <main+0x374>)
 8000b06:	f005 fcd2 	bl	80064ae <lcd_send_string>
										break;
 8000b0a:	e0b1      	b.n	8000c70 <main+0x41c>
									}
									case 6:
									{
										lcd_send_string("*");
 8000b0c:	482e      	ldr	r0, [pc, #184]	; (8000bc8 <main+0x374>)
 8000b0e:	f005 fcce 	bl	80064ae <lcd_send_string>
										break;
 8000b12:	e0ad      	b.n	8000c70 <main+0x41c>
									}
									case 7:
									{
										lcd_send_string("*");
 8000b14:	482c      	ldr	r0, [pc, #176]	; (8000bc8 <main+0x374>)
 8000b16:	f005 fcca 	bl	80064ae <lcd_send_string>
										break;
 8000b1a:	e0a9      	b.n	8000c70 <main+0x41c>
									}
									case 8:
									{
										lcd_send_string("*");
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <main+0x374>)
 8000b1e:	f005 fcc6 	bl	80064ae <lcd_send_string>
										break;
 8000b22:	e0a5      	b.n	8000c70 <main+0x41c>
									}
									case 9:
									{
										lcd_send_string("*");
 8000b24:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <main+0x374>)
 8000b26:	f005 fcc2 	bl	80064ae <lcd_send_string>
										break;
 8000b2a:	e0a1      	b.n	8000c70 <main+0x41c>
									}
									case 0:
									{
										lcd_send_string("*");
 8000b2c:	4826      	ldr	r0, [pc, #152]	; (8000bc8 <main+0x374>)
 8000b2e:	f005 fcbe 	bl	80064ae <lcd_send_string>
										break;
 8000b32:	e09d      	b.n	8000c70 <main+0x41c>
									}
									case 11:
									{
										volatile int value_bang = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	603b      	str	r3, [r7, #0]
										for(int i=0 ;i < 6 ; i++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	e04b      	b.n	8000bd6 <main+0x382>
										{
											if(mat_khau_user[i] != mat_khau_dung[i])
 8000b3e:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <main+0x370>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4413      	add	r3, r2
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	4921      	ldr	r1, [pc, #132]	; (8000bcc <main+0x378>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	440b      	add	r3, r1
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d03e      	beq.n	8000bd0 <main+0x37c>
											{
												value_bang=0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
												break;
 8000b56:	e041      	b.n	8000bdc <main+0x388>
 8000b58:	20000388 	.word	0x20000388
 8000b5c:	200003d0 	.word	0x200003d0
 8000b60:	200004a8 	.word	0x200004a8
 8000b64:	20000460 	.word	0x20000460
 8000b68:	20000340 	.word	0x20000340
 8000b6c:	080077e4 	.word	0x080077e4
 8000b70:	20000638 	.word	0x20000638
 8000b74:	20000500 	.word	0x20000500
 8000b78:	20000630 	.word	0x20000630
 8000b7c:	200005f0 	.word	0x200005f0
 8000b80:	2000058c 	.word	0x2000058c
 8000b84:	080077f0 	.word	0x080077f0
 8000b88:	20000600 	.word	0x20000600
 8000b8c:	08007804 	.word	0x08007804
 8000b90:	20000614 	.word	0x20000614
 8000b94:	2000028c 	.word	0x2000028c
 8000b98:	200002bc 	.word	0x200002bc
 8000b9c:	20000628 	.word	0x20000628
 8000ba0:	2000062c 	.word	0x2000062c
 8000ba4:	20000200 	.word	0x20000200
 8000ba8:	200001fc 	.word	0x200001fc
 8000bac:	20000204 	.word	0x20000204
 8000bb0:	20000684 	.word	0x20000684
 8000bb4:	20000688 	.word	0x20000688
 8000bb8:	2000063c 	.word	0x2000063c
 8000bbc:	08007814 	.word	0x08007814
 8000bc0:	20000634 	.word	0x20000634
 8000bc4:	2000067c 	.word	0x2000067c
 8000bc8:	08007824 	.word	0x08007824
 8000bcc:	20000208 	.word	0x20000208
										for(int i=0 ;i < 6 ; i++)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	ddb0      	ble.n	8000b3e <main+0x2ea>
											}
										}
										for(int i=0;i<6;i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	e007      	b.n	8000bf2 <main+0x39e>
										{
											mat_khau_user[i] =0;
 8000be2:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <main+0x4c4>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
										for(int i=0;i<6;i++)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	ddf4      	ble.n	8000be2 <main+0x38e>
										}
										if(value_bang) {
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d016      	beq.n	8000c2c <main+0x3d8>
											count_state_lcd =2;
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <main+0x4c8>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	601a      	str	r2, [r3, #0]
											flag_ngat_keypad=1;
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <main+0x4cc>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
											lcd_clear();
 8000c0a:	f005 fbdd 	bl	80063c8 <lcd_clear>
											lcd_put_cur(0,1);
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2000      	movs	r0, #0
 8000c12:	f005 fbf0 	bl	80063f6 <lcd_put_cur>
											lcd_send_string("Mat khau dung ->>");
 8000c16:	4843      	ldr	r0, [pc, #268]	; (8000d24 <main+0x4d0>)
 8000c18:	f005 fc49 	bl	80064ae <lcd_send_string>
											flag_di_qua_nhap_mat_khau=1;
 8000c1c:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <main+0x4d4>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
											HAL_Delay(2000);
 8000c22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c26:	f001 fe6f 	bl	8002908 <HAL_Delay>
											lcd_send_string("Mat khau sai ");
											lcd_put_cur(1,1);
											lcd_send_string("Moi nhap lai  ");
											HAL_Delay(2000);
										}
										break;
 8000c2a:	e021      	b.n	8000c70 <main+0x41c>
											count_state_lcd =1;
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <main+0x4c8>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
											flag_chuyen_lcd=1;
 8000c32:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <main+0x4d8>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
											flag_ngat_keypad=1;
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <main+0x4cc>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
											lcd_clear();
 8000c3e:	f005 fbc3 	bl	80063c8 <lcd_clear>
											lcd_put_cur(0,1);
 8000c42:	2101      	movs	r1, #1
 8000c44:	2000      	movs	r0, #0
 8000c46:	f005 fbd6 	bl	80063f6 <lcd_put_cur>
											lcd_send_string("Mat khau sai ");
 8000c4a:	4839      	ldr	r0, [pc, #228]	; (8000d30 <main+0x4dc>)
 8000c4c:	f005 fc2f 	bl	80064ae <lcd_send_string>
											lcd_put_cur(1,1);
 8000c50:	2101      	movs	r1, #1
 8000c52:	2001      	movs	r0, #1
 8000c54:	f005 fbcf 	bl	80063f6 <lcd_put_cur>
											lcd_send_string("Moi nhap lai  ");
 8000c58:	4836      	ldr	r0, [pc, #216]	; (8000d34 <main+0x4e0>)
 8000c5a:	f005 fc28 	bl	80064ae <lcd_send_string>
											HAL_Delay(2000);
 8000c5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c62:	f001 fe51 	bl	8002908 <HAL_Delay>
										break;
 8000c66:	e003      	b.n	8000c70 <main+0x41c>
									}
									default :
									{
										lcd_send_string("0");
 8000c68:	4833      	ldr	r0, [pc, #204]	; (8000d38 <main+0x4e4>)
 8000c6a:	f005 fc20 	bl	80064ae <lcd_send_string>
										break;
 8000c6e:	bf00      	nop
									}

								}

							}
								break;
 8000c70:	e04f      	b.n	8000d12 <main+0x4be>
						}
						case 2:
						{
							 lcd_clear();
 8000c72:	f005 fba9 	bl	80063c8 <lcd_clear>
							 lcd_put_cur(0,0);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f005 fbbc 	bl	80063f6 <lcd_put_cur>
							 lcd_send_string("Den  Quat  Bom");
 8000c7e:	482f      	ldr	r0, [pc, #188]	; (8000d3c <main+0x4e8>)
 8000c80:	f005 fc15 	bl	80064ae <lcd_send_string>
							 lcd_put_cur(1,0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	f005 fbb5 	bl	80063f6 <lcd_put_cur>
							 if( led % 2)
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <main+0x4ec>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <main+0x44c>
							 {
								 lcd_send_string("Bat  ");
 8000c98:	482a      	ldr	r0, [pc, #168]	; (8000d44 <main+0x4f0>)
 8000c9a:	f005 fc08 	bl	80064ae <lcd_send_string>
 8000c9e:	e002      	b.n	8000ca6 <main+0x452>
							 } else {
								 lcd_send_string("Tat  ");
 8000ca0:	4829      	ldr	r0, [pc, #164]	; (8000d48 <main+0x4f4>)
 8000ca2:	f005 fc04 	bl	80064ae <lcd_send_string>
							 }
							 if( quat % 2)
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <main+0x4f8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <main+0x466>
							 {
								 lcd_send_string("Bat  ");
 8000cb2:	4824      	ldr	r0, [pc, #144]	; (8000d44 <main+0x4f0>)
 8000cb4:	f005 fbfb 	bl	80064ae <lcd_send_string>
 8000cb8:	e002      	b.n	8000cc0 <main+0x46c>
							 } else {
								 lcd_send_string("Tat  ");
 8000cba:	4823      	ldr	r0, [pc, #140]	; (8000d48 <main+0x4f4>)
 8000cbc:	f005 fbf7 	bl	80064ae <lcd_send_string>
							 }
							 if( bom % 2)
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <main+0x4fc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <main+0x480>
							 {
								 lcd_send_string("Bat  ");
 8000ccc:	481d      	ldr	r0, [pc, #116]	; (8000d44 <main+0x4f0>)
 8000cce:	f005 fbee 	bl	80064ae <lcd_send_string>
							 } else {
								 lcd_send_string("Tat  ");
							 }
							 break;
 8000cd2:	e020      	b.n	8000d16 <main+0x4c2>
								 lcd_send_string("Tat  ");
 8000cd4:	481c      	ldr	r0, [pc, #112]	; (8000d48 <main+0x4f4>)
 8000cd6:	f005 fbea 	bl	80064ae <lcd_send_string>
							 break;
 8000cda:	e01c      	b.n	8000d16 <main+0x4c2>
						}
						case 3:
						{
							lcd_clear();
 8000cdc:	f005 fb74 	bl	80063c8 <lcd_clear>
							 lcd_put_cur(0,5);
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f005 fb87 	bl	80063f6 <lcd_put_cur>
							 lcd_send_string("Mode ");
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <main+0x500>)
 8000cea:	f005 fbe0 	bl	80064ae <lcd_send_string>
							 lcd_put_cur(1,5);
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f005 fb80 	bl	80063f6 <lcd_put_cur>
							 if( mode % 2)
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <main+0x504>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <main+0x4b6>
							 {
								 lcd_send_string("Tu Dong");
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <main+0x508>)
 8000d04:	f005 fbd3 	bl	80064ae <lcd_send_string>
							 } else {
								 lcd_send_string("Bang Tay");
							 }
							 break;
 8000d08:	e005      	b.n	8000d16 <main+0x4c2>
								 lcd_send_string("Bang Tay");
 8000d0a:	4815      	ldr	r0, [pc, #84]	; (8000d60 <main+0x50c>)
 8000d0c:	f005 fbcf 	bl	80064ae <lcd_send_string>
							 break;
 8000d10:	e001      	b.n	8000d16 <main+0x4c2>
								break;
 8000d12:	bf00      	nop
 8000d14:	e5d9      	b.n	80008ca <main+0x76>
	  update();
 8000d16:	e5d8      	b.n	80008ca <main+0x76>
 8000d18:	2000067c 	.word	0x2000067c
 8000d1c:	200001fc 	.word	0x200001fc
 8000d20:	20000200 	.word	0x20000200
 8000d24:	08007828 	.word	0x08007828
 8000d28:	2000068c 	.word	0x2000068c
 8000d2c:	20000204 	.word	0x20000204
 8000d30:	0800783c 	.word	0x0800783c
 8000d34:	0800784c 	.word	0x0800784c
 8000d38:	0800785c 	.word	0x0800785c
 8000d3c:	08007860 	.word	0x08007860
 8000d40:	20000528 	.word	0x20000528
 8000d44:	08007870 	.word	0x08007870
 8000d48:	08007878 	.word	0x08007878
 8000d4c:	2000052c 	.word	0x2000052c
 8000d50:	20000530 	.word	0x20000530
 8000d54:	08007880 	.word	0x08007880
 8000d58:	200001f0 	.word	0x200001f0
 8000d5c:	08007888 	.word	0x08007888
 8000d60:	08007890 	.word	0x08007890

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6e:	2228      	movs	r2, #40	; 0x28
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f005 fbfc 	bl	8006570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	2301      	movs	r3, #1
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000db0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fa60 	bl	8004280 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc6:	f001 fa6f 	bl	80022a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fccc 	bl	8004784 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000df2:	f001 fa59 	bl	80022a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df6:	2302      	movs	r3, #2
 8000df8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000dfa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fe4c 	bl	8004aa0 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e0e:	f001 fa4b 	bl	80022a8 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e2e:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <MX_ADC1_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e5a:	f001 fd79 	bl	8002950 <HAL_ADC_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e64:	f001 fa20 	bl	80022a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e7a:	f001 ff27 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e84:	f001 fa10 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000028c 	.word	0x2000028c
 8000e94:	40012400 	.word	0x40012400

08000e98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <MX_ADC2_Init+0x78>)
 8000eac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000ec2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000ed6:	f001 fd3b 	bl	8002950 <HAL_ADC_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ee0:	f001 f9e2 	bl	80022a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_ADC2_Init+0x74>)
 8000ef6:	f001 fee9 	bl	8002ccc <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000f00:	f001 f9d2 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200002bc 	.word	0x200002bc
 8000f10:	40012800 	.word	0x40012800

08000f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_I2C1_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_I2C1_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f52:	f002 fcc9 	bl	80038e8 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f001 f9a4 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200002ec 	.word	0x200002ec
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_TIM1_Init+0x9c>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <MX_TIM1_Init+0xa0>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_TIM1_Init+0x9c>)
 8000f94:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM1_Init+0x9c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fa6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM1_Init+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fbc:	f003 fe26 	bl	8004c0c <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fc6:	f001 f96f 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM1_Init+0x9c>)
 8000fd8:	f003 fff0 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fe2:	f001 f961 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_TIM1_Init+0x9c>)
 8000ff4:	f004 f9c6 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ffe:	f001 f953 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000340 	.word	0x20000340
 8001010:	40012c00 	.word	0x40012c00

08001014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	463b      	mov	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_TIM2_Init+0x94>)
 800103a:	223f      	movs	r2, #63	; 0x3f
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM2_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM2_Init+0x94>)
 800105a:	f003 fdd7 	bl	8004c0c <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001064:	f001 f920 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001076:	f003 ffa1 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001080:	f001 f912 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001092:	f004 f977 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800109c:	f001 f904 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000388 	.word	0x20000388

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM3_Init+0x94>)
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <MX_TIM3_Init+0x98>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d0:	223f      	movs	r2, #63	; 0x3f
 80010d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_TIM3_Init+0x94>)
 80010dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_TIM3_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM3_Init+0x94>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_TIM3_Init+0x94>)
 80010f0:	f003 fd8c 	bl	8004c0c <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010fa:	f001 f8d5 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM3_Init+0x94>)
 800110c:	f003 ff56 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f001 f8c7 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM3_Init+0x94>)
 8001128:	f004 f92c 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001132:	f001 f8b9 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003d0 	.word	0x200003d0
 8001144:	40000400 	.word	0x40000400

08001148 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM4_Init+0x94>)
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <MX_TIM4_Init+0x98>)
 8001168:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_TIM4_Init+0x94>)
 800116c:	2240      	movs	r2, #64	; 0x40
 800116e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM4_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_TIM4_Init+0x94>)
 8001178:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800117c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_TIM4_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM4_Init+0x94>)
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_TIM4_Init+0x94>)
 800118c:	f003 fd3e 	bl	8004c0c <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001196:	f001 f887 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_TIM4_Init+0x94>)
 80011a8:	f003 ff08 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011b2:	f001 f879 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_TIM4_Init+0x94>)
 80011c4:	f004 f8de 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f001 f86b 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000418 	.word	0x20000418
 80011e0:	40000800 	.word	0x40000800

080011e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART1_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART1_UART_Init+0x4c>)
 800121c:	f004 f922 	bl	8005464 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f001 f83f 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000460 	.word	0x20000460
 8001234:	40013800 	.word	0x40013800

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <MX_GPIO_Init+0x208>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a7b      	ldr	r2, [pc, #492]	; (8001440 <MX_GPIO_Init+0x208>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b79      	ldr	r3, [pc, #484]	; (8001440 <MX_GPIO_Init+0x208>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <MX_GPIO_Init+0x208>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a75      	ldr	r2, [pc, #468]	; (8001440 <MX_GPIO_Init+0x208>)
 800126a:	f043 0320 	orr.w	r3, r3, #32
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <MX_GPIO_Init+0x208>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <MX_GPIO_Init+0x208>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a6f      	ldr	r2, [pc, #444]	; (8001440 <MX_GPIO_Init+0x208>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b6d      	ldr	r3, [pc, #436]	; (8001440 <MX_GPIO_Init+0x208>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <MX_GPIO_Init+0x208>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a69      	ldr	r2, [pc, #420]	; (8001440 <MX_GPIO_Init+0x208>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b67      	ldr	r3, [pc, #412]	; (8001440 <MX_GPIO_Init+0x208>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b2:	4864      	ldr	r0, [pc, #400]	; (8001444 <MX_GPIO_Init+0x20c>)
 80012b4:	f002 fae7 	bl	8003886 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f649 0101 	movw	r1, #38913	; 0x9801
 80012be:	4862      	ldr	r0, [pc, #392]	; (8001448 <MX_GPIO_Init+0x210>)
 80012c0:	f002 fae1 	bl	8003886 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80012c4:	2200      	movs	r2, #0
 80012c6:	f643 7139 	movw	r1, #16185	; 0x3f39
 80012ca:	4860      	ldr	r0, [pc, #384]	; (800144c <MX_GPIO_Init+0x214>)
 80012cc:	f002 fadb 	bl	8003886 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2302      	movs	r3, #2
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	4856      	ldr	r0, [pc, #344]	; (8001444 <MX_GPIO_Init+0x20c>)
 80012ea:	f002 f875 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11;
 80012ee:	f640 0301 	movw	r3, #2049	; 0x801
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4850      	ldr	r0, [pc, #320]	; (8001448 <MX_GPIO_Init+0x210>)
 8001308:	f002 f866 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <MX_GPIO_Init+0x218>)
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	484a      	ldr	r0, [pc, #296]	; (8001448 <MX_GPIO_Init+0x210>)
 8001320:	f002 f85a 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <MX_GPIO_Init+0x21c>)
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	4844      	ldr	r0, [pc, #272]	; (8001448 <MX_GPIO_Init+0x210>)
 8001338:	f002 f84e 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB12 PB13
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 800133c:	f243 7339 	movw	r3, #14137	; 0x3739
 8001340:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2302      	movs	r3, #2
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	483d      	ldr	r0, [pc, #244]	; (800144c <MX_GPIO_Init+0x214>)
 8001356:	f002 f83f 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800135a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	4836      	ldr	r0, [pc, #216]	; (800144c <MX_GPIO_Init+0x214>)
 8001374:	f002 f830 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001378:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800137c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	482f      	ldr	r0, [pc, #188]	; (800144c <MX_GPIO_Init+0x214>)
 800138e:	f002 f823 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4828      	ldr	r0, [pc, #160]	; (8001448 <MX_GPIO_Init+0x210>)
 80013a8:	f002 f816 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4619      	mov	r1, r3
 80013c4:	4820      	ldr	r0, [pc, #128]	; (8001448 <MX_GPIO_Init+0x210>)
 80013c6:	f002 f807 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4819      	ldr	r0, [pc, #100]	; (8001448 <MX_GPIO_Init+0x210>)
 80013e4:	f001 fff8 	bl	80033d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2102      	movs	r1, #2
 80013ec:	2007      	movs	r0, #7
 80013ee:	f001 fefc 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f001 ff15 	bl	8003222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 13, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	210d      	movs	r1, #13
 80013fc:	2008      	movs	r0, #8
 80013fe:	f001 fef4 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001402:	2008      	movs	r0, #8
 8001404:	f001 ff0d 	bl	8003222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 13, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	210d      	movs	r1, #13
 800140c:	2009      	movs	r0, #9
 800140e:	f001 feec 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001412:	2009      	movs	r0, #9
 8001414:	f001 ff05 	bl	8003222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 13, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	210d      	movs	r1, #13
 800141c:	200a      	movs	r0, #10
 800141e:	f001 fee4 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001422:	200a      	movs	r0, #10
 8001424:	f001 fefd 	bl	8003222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 13, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	210d      	movs	r1, #13
 800142c:	2017      	movs	r0, #23
 800142e:	f001 fedc 	bl	80031ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001432:	2017      	movs	r0, #23
 8001434:	f001 fef5 	bl	8003222 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	40011000 	.word	0x40011000
 8001448:	40010800 	.word	0x40010800
 800144c:	40010c00 	.word	0x40010c00
 8001450:	10310000 	.word	0x10310000
 8001454:	10210000 	.word	0x10210000

08001458 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t save_data_test[20];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af06      	add	r7, sp, #24
 800145e:	6078      	str	r0, [r7, #4]
//		}
//		HAL_UART_Transmit(huart, dataTX, strlen(dataTX), 10);
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		HAL_UART_Receive_IT(huart, dataRX, sizeof(dataRX));
//	}
	if(huart->Instance == huart1.Instance)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <HAL_UART_RxCpltCallback+0x250>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8119 	bne.w	80016a0 <HAL_UART_RxCpltCallback+0x248>
	{
		if(flag_check_OK)
 800146e:	4b8f      	ldr	r3, [pc, #572]	; (80016ac <HAL_UART_RxCpltCallback+0x254>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01a      	beq.n	80014ac <HAL_UART_RxCpltCallback+0x54>
		{
			save_data_chuoi_OK[0] = save_data_chuoi_OK[1];
 8001476:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <HAL_UART_RxCpltCallback+0x258>)
 8001478:	785a      	ldrb	r2, [r3, #1]
 800147a:	4b8d      	ldr	r3, [pc, #564]	; (80016b0 <HAL_UART_RxCpltCallback+0x258>)
 800147c:	701a      	strb	r2, [r3, #0]
			save_data_chuoi_OK[1]=*dataRX;
 800147e:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_UART_RxCpltCallback+0x258>)
 8001484:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT(huart, dataRX, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	498a      	ldr	r1, [pc, #552]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f004 f8bd 	bl	800560a <HAL_UART_Receive_IT>
//			for(int i=0; i < 19; i++){
//				save_data_test[i] = save_data_test[i+1];
//			}
//			save_data_test[19] = *dataRX;
			if(*dataRX == 'K') {
 8001490:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b4b      	cmp	r3, #75	; 0x4b
 8001496:	d109      	bne.n	80014ac <HAL_UART_RxCpltCallback+0x54>
				if(strcmp((const char*)save_data_chuoi_OK,(const char*)so_sanh_chuoi_OK)==0){
 8001498:	4987      	ldr	r1, [pc, #540]	; (80016b8 <HAL_UART_RxCpltCallback+0x260>)
 800149a:	4885      	ldr	r0, [pc, #532]	; (80016b0 <HAL_UART_RxCpltCallback+0x258>)
 800149c:	f7fe fe56 	bl	800014c <strcmp>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <HAL_UART_RxCpltCallback+0x54>
					flag_pass=1;
 80014a6:	4b85      	ldr	r3, [pc, #532]	; (80016bc <HAL_UART_RxCpltCallback+0x264>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
				}
			}
//			HAL_UART_Transmit(huart, dataTX, strlen(dataTX), 10);
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		}
		if(flag_check_CMQTT)
 80014ac:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <HAL_UART_RxCpltCallback+0x268>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d02b      	beq.n	800150c <HAL_UART_RxCpltCallback+0xb4>
		{
			for(int i=0; i < 4; i++){
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00b      	b.n	80014d2 <HAL_UART_RxCpltCallback+0x7a>
				save_data_chuoi_CMQTT[i] = save_data_chuoi_CMQTT[i+1];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a81      	ldr	r2, [pc, #516]	; (80016c4 <HAL_UART_RxCpltCallback+0x26c>)
 80014c0:	5cd1      	ldrb	r1, [r2, r3]
 80014c2:	4a80      	ldr	r2, [pc, #512]	; (80016c4 <HAL_UART_RxCpltCallback+0x26c>)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	4413      	add	r3, r2
 80014c8:	460a      	mov	r2, r1
 80014ca:	701a      	strb	r2, [r3, #0]
			for(int i=0; i < 4; i++){
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	ddf0      	ble.n	80014ba <HAL_UART_RxCpltCallback+0x62>
			}
			save_data_chuoi_CMQTT[4]=*dataRX;
 80014d8:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <HAL_UART_RxCpltCallback+0x26c>)
 80014de:	711a      	strb	r2, [r3, #4]
			if(strcmp((const char*)save_data_chuoi_CMQTT,(const char*)so_sanh_chuoi_CMQTT)==0){
 80014e0:	4979      	ldr	r1, [pc, #484]	; (80016c8 <HAL_UART_RxCpltCallback+0x270>)
 80014e2:	4878      	ldr	r0, [pc, #480]	; (80016c4 <HAL_UART_RxCpltCallback+0x26c>)
 80014e4:	f7fe fe32 	bl	800014c <strcmp>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_UART_RxCpltCallback+0xaa>
				HAL_UART_Transmit(huart, dataTX1, strlen((const char*)dataTX1), 10);
 80014ee:	4877      	ldr	r0, [pc, #476]	; (80016cc <HAL_UART_RxCpltCallback+0x274>)
 80014f0:	f7fe fe36 	bl	8000160 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	230a      	movs	r3, #10
 80014fa:	4974      	ldr	r1, [pc, #464]	; (80016cc <HAL_UART_RxCpltCallback+0x274>)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f004 f801 	bl	8005504 <HAL_UART_Transmit>
			}
//			HAL_UART_Transmit(huart, dataTX, strlen(dataTX), 10);
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			HAL_UART_Receive_IT(huart, dataRX, sizeof(dataRX));
 8001502:	2201      	movs	r2, #1
 8001504:	496b      	ldr	r1, [pc, #428]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f004 f87f 	bl	800560a <HAL_UART_Receive_IT>
		}
		if(flag_check_PB_DONE)
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_UART_RxCpltCallback+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d02b      	beq.n	800156c <HAL_UART_RxCpltCallback+0x114>
		{
			for(int i=0; i < 6; i++){
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	e00b      	b.n	8001532 <HAL_UART_RxCpltCallback+0xda>
				save_data_chuoi_PB_DONE[i] = save_data_chuoi_PB_DONE[i+1];
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	3301      	adds	r3, #1
 800151e:	4a6d      	ldr	r2, [pc, #436]	; (80016d4 <HAL_UART_RxCpltCallback+0x27c>)
 8001520:	5cd1      	ldrb	r1, [r2, r3]
 8001522:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_UART_RxCpltCallback+0x27c>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	460a      	mov	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
			for(int i=0; i < 6; i++){
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	3301      	adds	r3, #1
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b05      	cmp	r3, #5
 8001536:	ddf0      	ble.n	800151a <HAL_UART_RxCpltCallback+0xc2>
			}
			save_data_chuoi_PB_DONE[6]=*dataRX;
 8001538:	4b5e      	ldr	r3, [pc, #376]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_UART_RxCpltCallback+0x27c>)
 800153e:	719a      	strb	r2, [r3, #6]
			if(strcmp((const char*)save_data_chuoi_PB_DONE,(const char*)so_sanh_chuoi_PB_DONE)==0){
 8001540:	4965      	ldr	r1, [pc, #404]	; (80016d8 <HAL_UART_RxCpltCallback+0x280>)
 8001542:	4864      	ldr	r0, [pc, #400]	; (80016d4 <HAL_UART_RxCpltCallback+0x27c>)
 8001544:	f7fe fe02 	bl	800014c <strcmp>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_UART_RxCpltCallback+0x10a>
				HAL_UART_Transmit(huart, dataTX1, strlen((const char*)dataTX1), 10);
 800154e:	485f      	ldr	r0, [pc, #380]	; (80016cc <HAL_UART_RxCpltCallback+0x274>)
 8001550:	f7fe fe06 	bl	8000160 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	230a      	movs	r3, #10
 800155a:	495c      	ldr	r1, [pc, #368]	; (80016cc <HAL_UART_RxCpltCallback+0x274>)
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f003 ffd1 	bl	8005504 <HAL_UART_Transmit>
			}
			HAL_UART_Receive_IT(huart, dataRX, sizeof(dataRX));
 8001562:	2201      	movs	r2, #1
 8001564:	4953      	ldr	r1, [pc, #332]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f004 f84f 	bl	800560a <HAL_UART_Receive_IT>
		}
		if(flag_check_RX_PAYLOAD)
 800156c:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_UART_RxCpltCallback+0x284>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8095 	beq.w	80016a0 <HAL_UART_RxCpltCallback+0x248>
		{
			if(flag_pass_RX_PAYLOAD==0)
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_UART_RxCpltCallback+0x288>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11f      	bne.n	80015be <HAL_UART_RxCpltCallback+0x166>
			{
				for(int i=0; i < 14; i++){
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00b      	b.n	800159c <HAL_UART_RxCpltCallback+0x144>
					save_data_chuoi_RX_PAYLOAD[i] = save_data_chuoi_RX_PAYLOAD[i+1];
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <HAL_UART_RxCpltCallback+0x28c>)
 800158a:	5cd1      	ldrb	r1, [r2, r3]
 800158c:	4a55      	ldr	r2, [pc, #340]	; (80016e4 <HAL_UART_RxCpltCallback+0x28c>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4413      	add	r3, r2
 8001592:	460a      	mov	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
				for(int i=0; i < 14; i++){
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b0d      	cmp	r3, #13
 80015a0:	ddf0      	ble.n	8001584 <HAL_UART_RxCpltCallback+0x12c>
				}
				save_data_chuoi_RX_PAYLOAD[14]=*dataRX;
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <HAL_UART_RxCpltCallback+0x28c>)
 80015a8:	739a      	strb	r2, [r3, #14]
				if(strcmp((const char*)save_data_chuoi_RX_PAYLOAD,(const char*)so_sanh_chuoi_RX_PAYLOAD)==0){
 80015aa:	494f      	ldr	r1, [pc, #316]	; (80016e8 <HAL_UART_RxCpltCallback+0x290>)
 80015ac:	484d      	ldr	r0, [pc, #308]	; (80016e4 <HAL_UART_RxCpltCallback+0x28c>)
 80015ae:	f7fe fdcd 	bl	800014c <strcmp>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <HAL_UART_RxCpltCallback+0x166>
					flag_pass_RX_PAYLOAD = 1;
 80015b8:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_UART_RxCpltCallback+0x288>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
	//				HAL_UART_Transmit(huart, dataTX1, strlen(dataTX1), 10);
				}
			}
			if(flag_pass_RX_PAYLOAD) {
 80015be:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_UART_RxCpltCallback+0x288>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d064      	beq.n	8001690 <HAL_UART_RxCpltCallback+0x238>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_UART_RxCpltCallback+0x294>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Stop_IT(&htim1);
 80015ce:	4847      	ldr	r0, [pc, #284]	; (80016ec <HAL_UART_RxCpltCallback+0x294>)
 80015d0:	f003 fbbe 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
				if(flag_pass_RX_PAYLOAD_next)
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_UART_RxCpltCallback+0x298>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d047      	beq.n	800166c <HAL_UART_RxCpltCallback+0x214>
				{
					message[count_data_pass_RX_PAYLOAD] = *dataRX;
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_UART_RxCpltCallback+0x29c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a34      	ldr	r2, [pc, #208]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 80015e2:	7811      	ldrb	r1, [r2, #0]
 80015e4:	4a44      	ldr	r2, [pc, #272]	; (80016f8 <HAL_UART_RxCpltCallback+0x2a0>)
 80015e6:	54d1      	strb	r1, [r2, r3]
					count_data_pass_RX_PAYLOAD++;
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_UART_RxCpltCallback+0x29c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a41      	ldr	r2, [pc, #260]	; (80016f4 <HAL_UART_RxCpltCallback+0x29c>)
 80015f0:	6013      	str	r3, [r2, #0]
					if(*dataRX == '\n'){
 80015f2:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d138      	bne.n	800166c <HAL_UART_RxCpltCallback+0x214>
						count_data_pass_RX_PAYLOAD=0;
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <HAL_UART_RxCpltCallback+0x29c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
						flag_phan_biet_xuong_dong_data = 1;
 8001600:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <HAL_UART_RxCpltCallback+0x2a4>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
						flag_pass_RX_PAYLOAD_next =0;
 8001606:	4b3a      	ldr	r3, [pc, #232]	; (80016f0 <HAL_UART_RxCpltCallback+0x298>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
						flag_pass_all_RX_PAYLOAD =1;
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_UART_RxCpltCallback+0x2a8>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
						flag_pass_RX_PAYLOAD =0;
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_UART_RxCpltCallback+0x288>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
						flag_ngat_uart_xong_message=1;
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_UART_RxCpltCallback+0x2ac>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
						sscanf((const char*)message, "%d %d %d %d %d %d %d", &led, &quat, &bom,&mode,&nguong_adc_quang_tro,&nguong_adc_do_am_dat,&nguong_nhiet_do);
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_UART_RxCpltCallback+0x2b0>)
 8001620:	9304      	str	r3, [sp, #16]
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_UART_RxCpltCallback+0x2b4>)
 8001624:	9303      	str	r3, [sp, #12]
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_UART_RxCpltCallback+0x2b8>)
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_UART_RxCpltCallback+0x2bc>)
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <HAL_UART_RxCpltCallback+0x2c0>)
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <HAL_UART_RxCpltCallback+0x2c4>)
 8001634:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <HAL_UART_RxCpltCallback+0x2c8>)
 8001636:	493b      	ldr	r1, [pc, #236]	; (8001724 <HAL_UART_RxCpltCallback+0x2cc>)
 8001638:	482f      	ldr	r0, [pc, #188]	; (80016f8 <HAL_UART_RxCpltCallback+0x2a0>)
 800163a:	f004 ff6d 	bl	8006518 <siscanf>
						for(int i=0 ; i < sizeof(message); i++ )
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	e007      	b.n	8001654 <HAL_UART_RxCpltCallback+0x1fc>
						{
							message[i] = 0;
 8001644:	4a2c      	ldr	r2, [pc, #176]	; (80016f8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	4413      	add	r3, r2
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
						for(int i=0 ; i < sizeof(message); i++ )
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3301      	adds	r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b27      	cmp	r3, #39	; 0x27
 8001658:	d9f4      	bls.n	8001644 <HAL_UART_RxCpltCallback+0x1ec>
						}
						flag_ngat_keypad=1;
 800165a:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_UART_RxCpltCallback+0x2d0>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
						flag_send_data=1;
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_UART_RxCpltCallback+0x2d4>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim1);
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <HAL_UART_RxCpltCallback+0x294>)
 8001668:	f003 fb20 	bl	8004cac <HAL_TIM_Base_Start_IT>

					}

				}
				save_data_chuoi_RX_PAYLOAD_DATA[0] = *dataRX;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_UART_RxCpltCallback+0x2d8>)
 8001672:	701a      	strb	r2, [r3, #0]
				if(strcmp((const char*)save_data_chuoi_RX_PAYLOAD_DATA,(const char*)so_sanh_chuoi_xuong_dong)==0)
 8001674:	492f      	ldr	r1, [pc, #188]	; (8001734 <HAL_UART_RxCpltCallback+0x2dc>)
 8001676:	482e      	ldr	r0, [pc, #184]	; (8001730 <HAL_UART_RxCpltCallback+0x2d8>)
 8001678:	f7fe fd68 	bl	800014c <strcmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_UART_RxCpltCallback+0x238>
				{
					if(!flag_phan_biet_xuong_dong_data) {
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_UART_RxCpltCallback+0x2a4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <HAL_UART_RxCpltCallback+0x238>
						flag_pass_RX_PAYLOAD_next =1;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_UART_RxCpltCallback+0x298>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
					}

				}
			}
			flag_phan_biet_xuong_dong_data = 0;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_UART_RxCpltCallback+0x2a4>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, dataRX, 1);
 8001696:	2201      	movs	r2, #1
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <HAL_UART_RxCpltCallback+0x25c>)
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f003 ffb5 	bl	800560a <HAL_UART_Receive_IT>
		}

	}
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000460 	.word	0x20000460
 80016ac:	200004d4 	.word	0x200004d4
 80016b0:	200004ac 	.word	0x200004ac
 80016b4:	200004a8 	.word	0x200004a8
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	200004e4 	.word	0x200004e4
 80016c0:	200004d8 	.word	0x200004d8
 80016c4:	200004b0 	.word	0x200004b0
 80016c8:	20000010 	.word	0x20000010
 80016cc:	20000000 	.word	0x20000000
 80016d0:	200004dc 	.word	0x200004dc
 80016d4:	200004b8 	.word	0x200004b8
 80016d8:	20000018 	.word	0x20000018
 80016dc:	200004e0 	.word	0x200004e0
 80016e0:	200004e8 	.word	0x200004e8
 80016e4:	200004c0 	.word	0x200004c0
 80016e8:	20000020 	.word	0x20000020
 80016ec:	20000340 	.word	0x20000340
 80016f0:	200004f0 	.word	0x200004f0
 80016f4:	200004f4 	.word	0x200004f4
 80016f8:	20000500 	.word	0x20000500
 80016fc:	200004ec 	.word	0x200004ec
 8001700:	200004f8 	.word	0x200004f8
 8001704:	20000638 	.word	0x20000638
 8001708:	200001ec 	.word	0x200001ec
 800170c:	200001e8 	.word	0x200001e8
 8001710:	200001e4 	.word	0x200001e4
 8001714:	200001f0 	.word	0x200001f0
 8001718:	20000530 	.word	0x20000530
 800171c:	2000052c 	.word	0x2000052c
 8001720:	20000528 	.word	0x20000528
 8001724:	0800789c 	.word	0x0800789c
 8001728:	20000200 	.word	0x20000200
 800172c:	20000630 	.word	0x20000630
 8001730:	200004d0 	.word	0x200004d0
 8001734:	20000030 	.word	0x20000030

08001738 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d105      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
//		send_data_to_server();
		flag_send_data=1;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
		du_time_to_send_data=1;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175e:	d108      	bne.n	8001772 <HAL_TIM_PeriodElapsedCallback+0x3a>
		{
			count++;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	1c54      	adds	r4, r2, #1
 8001768:	f143 0500 	adc.w	r5, r3, #0
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800176e:	e9c3 4500 	strd	r4, r5, [r3]
		}
	if(htim->Instance == TIM3)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d105      	bne.n	8001788 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		flag_ngat_keypad=1;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 8001782:	480f      	ldr	r0, [pc, #60]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001784:	f003 fae4 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
	}
	if(htim->Instance == TIM4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d105      	bne.n	800179e <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		HAL_TIM_Base_Stop_IT(&htim4);
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001794:	f003 fadc 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
		flag_timer4=1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
	}
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bdb0      	pop	{r4, r5, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40012c00 	.word	0x40012c00
 80017ac:	20000630 	.word	0x20000630
 80017b0:	200004fc 	.word	0x200004fc
 80017b4:	200005f8 	.word	0x200005f8
 80017b8:	40000400 	.word	0x40000400
 80017bc:	20000200 	.word	0x20000200
 80017c0:	200003d0 	.word	0x200003d0
 80017c4:	40000800 	.word	0x40000800
 80017c8:	20000418 	.word	0x20000418
 80017cc:	20000690 	.word	0x20000690

080017d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	f040 80f9 	bne.w	80019d4 <HAL_GPIO_EXTI_Callback+0x204>
	{

		currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 80017e2:	f001 f887 	bl	80028f4 <HAL_GetTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4aa0      	ldr	r2, [pc, #640]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x29c>)
 80017ea:	6013      	str	r3, [r2, #0]
		if ((currentTime - lastDebounceTime) > debounceDelay)
 80017ec:	4b9f      	ldr	r3, [pc, #636]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x29c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b9f      	ldr	r3, [pc, #636]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1ad2      	subs	r2, r2, r3
 80017f6:	4b9f      	ldr	r3, [pc, #636]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	f240 80ea 	bls.w	80019d4 <HAL_GPIO_EXTI_Callback+0x204>
		{
			// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)
 8001800:	2104      	movs	r1, #4
 8001802:	489d      	ldr	r0, [pc, #628]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001804:	f002 f828 	bl	8003858 <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 80de 	bne.w	80019cc <HAL_GPIO_EXTI_Callback+0x1fc>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001816:	4899      	ldr	r0, [pc, #612]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001818:	f002 f835 	bl	8003886 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001822:	4896      	ldr	r0, [pc, #600]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001824:	f002 f82f 	bl	8003886 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182e:	4893      	ldr	r0, [pc, #588]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001830:	f002 f829 	bl	8003886 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001834:	2201      	movs	r2, #1
 8001836:	2101      	movs	r1, #1
 8001838:	4890      	ldr	r0, [pc, #576]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800183a:	f002 f824 	bl	8003886 <HAL_GPIO_WritePin>
				if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0) && (flag_disable_nut_nhan==0))
 800183e:	2104      	movs	r1, #4
 8001840:	488d      	ldr	r0, [pc, #564]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001842:	f002 f809 	bl	8003858 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d112      	bne.n	8001872 <HAL_GPIO_EXTI_Callback+0xa2>
 800184c:	4b8c      	ldr	r3, [pc, #560]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0xa2>
//					num1_state1++;
//					flag_number_state1=1;
//					flag_ngat_keypad_state1=1;
//					  state_ngat_2 =1;
//					  state_ngat_1=0;
					num1++;
 800185a:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	4a88      	ldr	r2, [pc, #544]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001862:	6013      	str	r3, [r2, #0]
					flag_number=1;
 8001864:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
					flag_ngat_keypad=1;
 800186a:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e095      	b.n	800199e <HAL_GPIO_EXTI_Callback+0x1ce>

				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	4880      	ldr	r0, [pc, #512]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800187a:	f002 f804 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001884:	487d      	ldr	r0, [pc, #500]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001886:	f001 fffe 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001890:	487a      	ldr	r0, [pc, #488]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001892:	f001 fff8 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001896:	2201      	movs	r2, #1
 8001898:	2101      	movs	r1, #1
 800189a:	4878      	ldr	r0, [pc, #480]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800189c:	f001 fff3 	bl	8003886 <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)&& (flag_disable_nut_nhan==0))
 80018a0:	2104      	movs	r1, #4
 80018a2:	4875      	ldr	r0, [pc, #468]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80018a4:	f001 ffd8 	bl	8003858 <HAL_GPIO_ReadPin>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d112      	bne.n	80018d4 <HAL_GPIO_EXTI_Callback+0x104>
 80018ae:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	f083 0301 	eor.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_GPIO_EXTI_Callback+0x104>
					{
						num2++;
 80018bc:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a73      	ldr	r2, [pc, #460]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80018c4:	6013      	str	r3, [r2, #0]
						flag_number=2;
 80018c6:	4b70      	ldr	r3, [pc, #448]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
						flag_ngat_keypad=1;
 80018cc:	4b6f      	ldr	r3, [pc, #444]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x2bc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e064      	b.n	800199e <HAL_GPIO_EXTI_Callback+0x1ce>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018da:	4868      	ldr	r0, [pc, #416]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80018dc:	f001 ffd3 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e6:	4865      	ldr	r0, [pc, #404]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80018e8:	f001 ffcd 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f2:	4862      	ldr	r0, [pc, #392]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80018f4:	f001 ffc7 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2101      	movs	r1, #1
 80018fc:	485f      	ldr	r0, [pc, #380]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80018fe:	f001 ffc2 	bl	8003886 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)&& (flag_disable_nut_nhan==0))
 8001902:	2104      	movs	r1, #4
 8001904:	485c      	ldr	r0, [pc, #368]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001906:	f001 ffa7 	bl	8003858 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d112      	bne.n	8001936 <HAL_GPIO_EXTI_Callback+0x166>
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f083 0301 	eor.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_GPIO_EXTI_Callback+0x166>
						{
							num3++;
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a5b      	ldr	r2, [pc, #364]	; (8001a94 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001926:	6013      	str	r3, [r2, #0]
							flag_number=3;
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800192a:	2203      	movs	r2, #3
 800192c:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad=1;
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e033      	b.n	800199e <HAL_GPIO_EXTI_Callback+0x1ce>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193c:	484f      	ldr	r0, [pc, #316]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800193e:	f001 ffa2 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001948:	484c      	ldr	r0, [pc, #304]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800194a:	f001 ff9c 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001954:	4849      	ldr	r0, [pc, #292]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001956:	f001 ff96 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800195a:	2200      	movs	r2, #0
 800195c:	2101      	movs	r1, #1
 800195e:	4847      	ldr	r0, [pc, #284]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001960:	f001 ff91 	bl	8003886 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0)&& (flag_disable_nut_nhan==0))
 8001964:	2104      	movs	r1, #4
 8001966:	4844      	ldr	r0, [pc, #272]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001968:	f001 ff76 	bl	8003858 <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d115      	bne.n	800199e <HAL_GPIO_EXTI_Callback+0x1ce>
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	f083 0301 	eor.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <HAL_GPIO_EXTI_Callback+0x1ce>
							{
								if( flag_di_qua_nhap_mat_khau )
 8001980:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00a      	beq.n	800199e <HAL_GPIO_EXTI_Callback+0x1ce>
								{
									led++;
 8001988:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x2cc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a43      	ldr	r2, [pc, #268]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001990:	6013      	str	r3, [r2, #0]
									flag_number=10;
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001994:	220a      	movs	r2, #10
 8001996:	601a      	str	r2, [r3, #0]
									flag_ngat_keypad=1;
 8001998:	4b3c      	ldr	r3, [pc, #240]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x2bc>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
							}
						}
					}
				}

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a4:	4835      	ldr	r0, [pc, #212]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80019a6:	f001 ff6e 	bl	8003886 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b0:	4832      	ldr	r0, [pc, #200]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80019b2:	f001 ff68 	bl	8003886 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019bc:	482f      	ldr	r0, [pc, #188]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80019be:	f001 ff62 	bl	8003886 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	482d      	ldr	r0, [pc, #180]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80019c8:	f001 ff5d 	bl	8003886 <HAL_GPIO_WritePin>
//					}
//				}
//				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
//			}

			lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x29c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80019d2:	6013      	str	r3, [r2, #0]
		}
	}


	if(GPIO_Pin == GPIO_PIN_3)
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	f040 8115 	bne.w	8001c06 <HAL_GPIO_EXTI_Callback+0x436>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 80019dc:	f000 ff8a 	bl	80028f4 <HAL_GetTick>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x29c>)
 80019e4:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x29c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad2      	subs	r2, r2, r3
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f240 8106 	bls.w	8001c06 <HAL_GPIO_EXTI_Callback+0x436>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)
 80019fa:	2108      	movs	r1, #8
 80019fc:	481e      	ldr	r0, [pc, #120]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80019fe:	f001 ff2b 	bl	8003858 <HAL_GPIO_ReadPin>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 80fa 	bne.w	8001bfe <HAL_GPIO_EXTI_Callback+0x42e>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a10:	481a      	ldr	r0, [pc, #104]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001a12:	f001 ff38 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a1c:	4817      	ldr	r0, [pc, #92]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001a1e:	f001 ff32 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a28:	4814      	ldr	r0, [pc, #80]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001a2a:	f001 ff2c 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2101      	movs	r1, #1
 8001a32:	4812      	ldr	r0, [pc, #72]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001a34:	f001 ff27 	bl	8003886 <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)&& (flag_disable_nut_nhan==0))
 8001a38:	2108      	movs	r1, #8
 8001a3a:	480f      	ldr	r0, [pc, #60]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001a3c:	f001 ff0c 	bl	8003858 <HAL_GPIO_ReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12e      	bne.n	8001aa4 <HAL_GPIO_EXTI_Callback+0x2d4>
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d027      	beq.n	8001aa4 <HAL_GPIO_EXTI_Callback+0x2d4>
					{
						num4++;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001a5c:	6013      	str	r3, [r2, #0]
						flag_number=4;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	601a      	str	r2, [r3, #0]
						flag_ngat_keypad=1;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e0b1      	b.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x400>
 8001a6c:	2000053c 	.word	0x2000053c
 8001a70:	20000538 	.word	0x20000538
 8001a74:	200001f8 	.word	0x200001f8
 8001a78:	40010800 	.word	0x40010800
 8001a7c:	40010c00 	.word	0x40010c00
 8001a80:	20000694 	.word	0x20000694
 8001a84:	20000540 	.word	0x20000540
 8001a88:	20000634 	.word	0x20000634
 8001a8c:	20000200 	.word	0x20000200
 8001a90:	20000544 	.word	0x20000544
 8001a94:	20000548 	.word	0x20000548
 8001a98:	2000068c 	.word	0x2000068c
 8001a9c:	20000528 	.word	0x20000528
 8001aa0:	2000054c 	.word	0x2000054c
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aaa:	4899      	ldr	r0, [pc, #612]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001aac:	f001 feeb 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab6:	4896      	ldr	r0, [pc, #600]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001ab8:	f001 fee5 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac2:	4893      	ldr	r0, [pc, #588]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001ac4:	f001 fedf 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2101      	movs	r1, #1
 8001acc:	4890      	ldr	r0, [pc, #576]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001ace:	f001 feda 	bl	8003886 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)&& (flag_disable_nut_nhan==0))
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	488f      	ldr	r0, [pc, #572]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x544>)
 8001ad6:	f001 febf 	bl	8003858 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d112      	bne.n	8001b06 <HAL_GPIO_EXTI_Callback+0x336>
 8001ae0:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x548>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f083 0301 	eor.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_GPIO_EXTI_Callback+0x336>
						{
							num5++;
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x54c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	4a89      	ldr	r2, [pc, #548]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x54c>)
 8001af6:	6013      	str	r3, [r2, #0]
							flag_number=5;
 8001af8:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x550>)
 8001afa:	2205      	movs	r2, #5
 8001afc:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad=1;
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x554>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e064      	b.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x400>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0c:	4880      	ldr	r0, [pc, #512]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b0e:	f001 feba 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b18:	487d      	ldr	r0, [pc, #500]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b1a:	f001 feb4 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b24:	487a      	ldr	r0, [pc, #488]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b26:	f001 feae 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	4878      	ldr	r0, [pc, #480]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b30:	f001 fea9 	bl	8003886 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)&& (flag_disable_nut_nhan==0))
 8001b34:	2108      	movs	r1, #8
 8001b36:	4877      	ldr	r0, [pc, #476]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x544>)
 8001b38:	f001 fe8e 	bl	8003858 <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d112      	bne.n	8001b68 <HAL_GPIO_EXTI_Callback+0x398>
 8001b42:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x548>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <HAL_GPIO_EXTI_Callback+0x398>
							{
								num6++;
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x558>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a74      	ldr	r2, [pc, #464]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x558>)
 8001b58:	6013      	str	r3, [r2, #0]
								flag_number=6;
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x550>)
 8001b5c:	2206      	movs	r2, #6
 8001b5e:	601a      	str	r2, [r3, #0]
								flag_ngat_keypad=1;
 8001b60:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x554>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e033      	b.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x400>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6e:	4868      	ldr	r0, [pc, #416]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b70:	f001 fe89 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7a:	4865      	ldr	r0, [pc, #404]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b7c:	f001 fe83 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b86:	4862      	ldr	r0, [pc, #392]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b88:	f001 fe7d 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	485f      	ldr	r0, [pc, #380]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001b92:	f001 fe78 	bl	8003886 <HAL_GPIO_WritePin>
								if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0)&& (flag_disable_nut_nhan==0))
 8001b96:	2108      	movs	r1, #8
 8001b98:	485e      	ldr	r0, [pc, #376]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x544>)
 8001b9a:	f001 fe5d 	bl	8003858 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d115      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x400>
 8001ba4:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x548>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x400>
								{
									if( flag_di_qua_nhap_mat_khau )
 8001bb2:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <HAL_GPIO_EXTI_Callback+0x55c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x400>
									{
										quat++;
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x560>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a5b      	ldr	r2, [pc, #364]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x560>)
 8001bc2:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8001bc4:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x550>)
 8001bc6:	220a      	movs	r2, #10
 8001bc8:	601a      	str	r2, [r3, #0]
										flag_ngat_keypad=1;
 8001bca:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x554>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd6:	484e      	ldr	r0, [pc, #312]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001bd8:	f001 fe55 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be2:	484b      	ldr	r0, [pc, #300]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001be4:	f001 fe4f 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bee:	4848      	ldr	r0, [pc, #288]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001bf0:	f001 fe49 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4845      	ldr	r0, [pc, #276]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001bfa:	f001 fe44 	bl	8003886 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001bfe:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x564>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x568>)
 8001c04:	6013      	str	r3, [r2, #0]
			}
		}


	if(GPIO_Pin == GPIO_PIN_4)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	f040 811d 	bne.w	8001e48 <HAL_GPIO_EXTI_Callback+0x678>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001c0e:	f000 fe71 	bl	80028f4 <HAL_GetTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x564>)
 8001c16:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001c18:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x564>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x568>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x56c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	f240 810e 	bls.w	8001e48 <HAL_GPIO_EXTI_Callback+0x678>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)&& (flag_disable_nut_nhan==0))
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4839      	ldr	r0, [pc, #228]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x544>)
 8001c30:	f001 fe12 	bl	8003858 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8102 	bne.w	8001e40 <HAL_GPIO_EXTI_Callback+0x670>
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x548>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80fa 	beq.w	8001e40 <HAL_GPIO_EXTI_Callback+0x670>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c52:	482f      	ldr	r0, [pc, #188]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001c54:	f001 fe17 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c5e:	482c      	ldr	r0, [pc, #176]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001c60:	f001 fe11 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6a:	4829      	ldr	r0, [pc, #164]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001c6c:	f001 fe0b 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2101      	movs	r1, #1
 8001c74:	4826      	ldr	r0, [pc, #152]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001c76:	f001 fe06 	bl	8003886 <HAL_GPIO_WritePin>
					if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)&& (flag_disable_nut_nhan==0))
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	4825      	ldr	r0, [pc, #148]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x544>)
 8001c7e:	f001 fdeb 	bl	8003858 <HAL_GPIO_ReadPin>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d112      	bne.n	8001cae <HAL_GPIO_EXTI_Callback+0x4de>
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x548>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_GPIO_EXTI_Callback+0x4de>
					{
						num7++;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x570>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x570>)
 8001c9e:	6013      	str	r3, [r2, #0]
						flag_number=7;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x550>)
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	601a      	str	r2, [r3, #0]
						flag_ngat_keypad=1;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x554>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e0b1      	b.n	8001e12 <HAL_GPIO_EXTI_Callback+0x642>
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb4:	4816      	ldr	r0, [pc, #88]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001cb6:	f001 fde6 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001cc2:	f001 fde0 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001cce:	f001 fdda 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x540>)
 8001cd8:	f001 fdd5 	bl	8003886 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)&& (flag_disable_nut_nhan==0))
 8001cdc:	2110      	movs	r1, #16
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x544>)
 8001ce0:	f001 fdba 	bl	8003858 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d12e      	bne.n	8001d48 <HAL_GPIO_EXTI_Callback+0x578>
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x548>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f083 0301 	eor.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d027      	beq.n	8001d48 <HAL_GPIO_EXTI_Callback+0x578>
						{
							num8++;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x574>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x574>)
 8001d00:	6013      	str	r3, [r2, #0]
							flag_number=8;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x550>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad=1;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x554>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e080      	b.n	8001e12 <HAL_GPIO_EXTI_Callback+0x642>
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	40010800 	.word	0x40010800
 8001d18:	20000694 	.word	0x20000694
 8001d1c:	20000550 	.word	0x20000550
 8001d20:	20000634 	.word	0x20000634
 8001d24:	20000200 	.word	0x20000200
 8001d28:	20000554 	.word	0x20000554
 8001d2c:	2000068c 	.word	0x2000068c
 8001d30:	2000052c 	.word	0x2000052c
 8001d34:	2000053c 	.word	0x2000053c
 8001d38:	20000538 	.word	0x20000538
 8001d3c:	200001f8 	.word	0x200001f8
 8001d40:	20000558 	.word	0x20000558
 8001d44:	2000055c 	.word	0x2000055c
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d4e:	4898      	ldr	r0, [pc, #608]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001d50:	f001 fd99 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d5a:	4895      	ldr	r0, [pc, #596]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001d5c:	f001 fd93 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d66:	4892      	ldr	r0, [pc, #584]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001d68:	f001 fd8d 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2101      	movs	r1, #1
 8001d70:	488f      	ldr	r0, [pc, #572]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001d72:	f001 fd88 	bl	8003886 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)&& (flag_disable_nut_nhan==0))
 8001d76:	2110      	movs	r1, #16
 8001d78:	488e      	ldr	r0, [pc, #568]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001d7a:	f001 fd6d 	bl	8003858 <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d112      	bne.n	8001daa <HAL_GPIO_EXTI_Callback+0x5da>
 8001d84:	4b8c      	ldr	r3, [pc, #560]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_GPIO_EXTI_Callback+0x5da>
							{
								num9++;
 8001d92:	4b8a      	ldr	r3, [pc, #552]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x7ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a88      	ldr	r2, [pc, #544]	; (8001fbc <HAL_GPIO_EXTI_Callback+0x7ec>)
 8001d9a:	6013      	str	r3, [r2, #0]
								flag_number=9;
 8001d9c:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001d9e:	2209      	movs	r2, #9
 8001da0:	601a      	str	r2, [r3, #0]
								flag_ngat_keypad=1;
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e033      	b.n	8001e12 <HAL_GPIO_EXTI_Callback+0x642>
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db0:	487f      	ldr	r0, [pc, #508]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001db2:	f001 fd68 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbc:	487c      	ldr	r0, [pc, #496]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001dbe:	f001 fd62 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc8:	4879      	ldr	r0, [pc, #484]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001dca:	f001 fd5c 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4877      	ldr	r0, [pc, #476]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001dd4:	f001 fd57 	bl	8003886 <HAL_GPIO_WritePin>
								if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)&& (flag_disable_nut_nhan==0))
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4876      	ldr	r0, [pc, #472]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001ddc:	f001 fd3c 	bl	8003858 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d115      	bne.n	8001e12 <HAL_GPIO_EXTI_Callback+0x642>
 8001de6:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <HAL_GPIO_EXTI_Callback+0x642>
								{
									if( flag_di_qua_nhap_mat_khau )
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x7f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <HAL_GPIO_EXTI_Callback+0x642>
									{
										bom++;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x7fc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x7fc>)
 8001e04:	6013      	str	r3, [r2, #0]
										flag_number=10;
 8001e06:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001e08:	220a      	movs	r2, #10
 8001e0a:	601a      	str	r2, [r3, #0]
										flag_ngat_keypad=1;
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e18:	4865      	ldr	r0, [pc, #404]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e1a:	f001 fd34 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e24:	4862      	ldr	r0, [pc, #392]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e26:	f001 fd2e 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e30:	485f      	ldr	r0, [pc, #380]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e32:	f001 fd28 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2101      	movs	r1, #1
 8001e3a:	485d      	ldr	r0, [pc, #372]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e3c:	f001 fd23 	bl	8003886 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8001e40:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x800>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a63      	ldr	r2, [pc, #396]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x804>)
 8001e46:	6013      	str	r3, [r2, #0]
			}
		}



	if(GPIO_Pin == GPIO_PIN_5)
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	f040 8118 	bne.w	8002080 <HAL_GPIO_EXTI_Callback+0x8b0>
		{
			currentTime = HAL_GetTick(); // Lấy th�?i gian hiện tại
 8001e50:	f000 fd50 	bl	80028f4 <HAL_GetTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a5e      	ldr	r2, [pc, #376]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x800>)
 8001e58:	6013      	str	r3, [r2, #0]
			if ((currentTime - lastDebounceTime) > debounceDelay)
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x800>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x804>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	1ad2      	subs	r2, r2, r3
 8001e64:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x808>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f240 8109 	bls.w	8002080 <HAL_GPIO_EXTI_Callback+0x8b0>
			{
				// Cập nhật trạng thái nút nhấn chỉ khi đã qua th�?i gian debounce
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001e6e:	2120      	movs	r1, #32
 8001e70:	4850      	ldr	r0, [pc, #320]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001e72:	f001 fcf1 	bl	8003858 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 80fd 	bne.w	8002078 <HAL_GPIO_EXTI_Callback+0x8a8>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e84:	484a      	ldr	r0, [pc, #296]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e86:	f001 fcfe 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e90:	4847      	ldr	r0, [pc, #284]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e92:	f001 fcf8 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9c:	4844      	ldr	r0, [pc, #272]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001e9e:	f001 fcf2 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4842      	ldr	r0, [pc, #264]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001ea8:	f001 fced 	bl	8003886 <HAL_GPIO_WritePin>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8001eac:	2120      	movs	r1, #32
 8001eae:	4841      	ldr	r0, [pc, #260]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001eb0:	f001 fcd2 	bl	8003858 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_GPIO_EXTI_Callback+0x71c>
					{
						if( flag_di_qua_nhap_mat_khau )
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x7f8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80c3 	beq.w	800204a <HAL_GPIO_EXTI_Callback+0x87a>
						{
							num_sao++;
 8001ec4:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x80c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x80c>)
 8001ecc:	6013      	str	r3, [r2, #0]
							count_state_lcd ++;
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x810>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a42      	ldr	r2, [pc, #264]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x810>)
 8001ed6:	6013      	str	r3, [r2, #0]
							flag_chuyen_lcd=1;
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x814>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
							flag_number=10;
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001ee0:	220a      	movs	r2, #10
 8001ee2:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad=1;
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e0ae      	b.n	800204a <HAL_GPIO_EXTI_Callback+0x87a>
						}
					} else {
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef2:	482f      	ldr	r0, [pc, #188]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001ef4:	f001 fcc7 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001efe:	482c      	ldr	r0, [pc, #176]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f00:	f001 fcc1 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f0a:	4829      	ldr	r0, [pc, #164]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f0c:	f001 fcbb 	bl	8003886 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2101      	movs	r1, #1
 8001f14:	4826      	ldr	r0, [pc, #152]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f16:	f001 fcb6 	bl	8003886 <HAL_GPIO_WritePin>
						if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)&& (flag_disable_nut_nhan==0))
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	4825      	ldr	r0, [pc, #148]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001f1e:	f001 fc9b 	bl	8003858 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d112      	bne.n	8001f4e <HAL_GPIO_EXTI_Callback+0x77e>
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_GPIO_EXTI_Callback+0x77e>
						{
							num0++;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x818>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x818>)
 8001f3e:	6013      	str	r3, [r2, #0]
							flag_number=0;
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
							flag_ngat_keypad=1;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e07d      	b.n	800204a <HAL_GPIO_EXTI_Callback+0x87a>
						} else {
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f54:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f56:	f001 fc96 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	4813      	ldr	r0, [pc, #76]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f62:	f001 fc90 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f6c:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f6e:	f001 fc8a 	bl	8003886 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2101      	movs	r1, #1
 8001f76:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001f78:	f001 fc85 	bl	8003886 <HAL_GPIO_WritePin>
							if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)&& (flag_disable_nut_nhan==0))
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0x7e4>)
 8001f80:	f001 fc6a 	bl	8003858 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d132      	bne.n	8001ff0 <HAL_GPIO_EXTI_Callback+0x820>
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d02b      	beq.n	8001ff0 <HAL_GPIO_EXTI_Callback+0x820>
							{
								num_thang++;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_GPIO_EXTI_Callback+0x81c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_GPIO_EXTI_Callback+0x81c>)
 8001fa0:	6013      	str	r3, [r2, #0]
								flag_number=11;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x7f0>)
 8001fa4:	220b      	movs	r2, #11
 8001fa6:	601a      	str	r2, [r3, #0]
								flag_ngat_keypad=1;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x7f4>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e04c      	b.n	800204a <HAL_GPIO_EXTI_Callback+0x87a>
 8001fb0:	40010c00 	.word	0x40010c00
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	20000694 	.word	0x20000694
 8001fbc:	20000560 	.word	0x20000560
 8001fc0:	20000634 	.word	0x20000634
 8001fc4:	20000200 	.word	0x20000200
 8001fc8:	2000068c 	.word	0x2000068c
 8001fcc:	20000530 	.word	0x20000530
 8001fd0:	2000053c 	.word	0x2000053c
 8001fd4:	20000538 	.word	0x20000538
 8001fd8:	200001f8 	.word	0x200001f8
 8001fdc:	20000568 	.word	0x20000568
 8001fe0:	200001fc 	.word	0x200001fc
 8001fe4:	20000204 	.word	0x20000204
 8001fe8:	20000564 	.word	0x20000564
 8001fec:	2000056c 	.word	0x2000056c
							} else {
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	4843      	ldr	r0, [pc, #268]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 8001ff8:	f001 fc45 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	4840      	ldr	r0, [pc, #256]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 8002004:	f001 fc3f 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800200e:	483d      	ldr	r0, [pc, #244]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 8002010:	f001 fc39 	bl	8003886 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8002014:	2200      	movs	r2, #0
 8002016:	2101      	movs	r1, #1
 8002018:	483a      	ldr	r0, [pc, #232]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 800201a:	f001 fc34 	bl	8003886 <HAL_GPIO_WritePin>
								if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 800201e:	2120      	movs	r1, #32
 8002020:	4839      	ldr	r0, [pc, #228]	; (8002108 <HAL_GPIO_EXTI_Callback+0x938>)
 8002022:	f001 fc19 	bl	8003858 <HAL_GPIO_ReadPin>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10e      	bne.n	800204a <HAL_GPIO_EXTI_Callback+0x87a>
								{
									if( flag_di_qua_nhap_mat_khau )
 800202c:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_GPIO_EXTI_Callback+0x93c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_GPIO_EXTI_Callback+0x87a>
									{
										mode++;
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_GPIO_EXTI_Callback+0x940>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4a35      	ldr	r2, [pc, #212]	; (8002110 <HAL_GPIO_EXTI_Callback+0x940>)
 800203c:	6013      	str	r3, [r2, #0]
										flag_number=10;
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_GPIO_EXTI_Callback+0x944>)
 8002040:	220a      	movs	r2, #10
 8002042:	601a      	str	r2, [r3, #0]
										flag_ngat_keypad=1;
 8002044:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_GPIO_EXTI_Callback+0x948>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
								}
							}
						}
					}

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002050:	482c      	ldr	r0, [pc, #176]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 8002052:	f001 fc18 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205c:	4829      	ldr	r0, [pc, #164]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 800205e:	f001 fc12 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	4826      	ldr	r0, [pc, #152]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 800206a:	f001 fc0c 	bl	8003886 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 800206e:	2200      	movs	r2, #0
 8002070:	2101      	movs	r1, #1
 8002072:	4824      	ldr	r0, [pc, #144]	; (8002104 <HAL_GPIO_EXTI_Callback+0x934>)
 8002074:	f001 fc07 	bl	8003886 <HAL_GPIO_WritePin>
				}

				lastDebounceTime = currentTime; // Cập nhật th�?i gian debounce cuối cùng
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_GPIO_EXTI_Callback+0x94c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_GPIO_EXTI_Callback+0x950>)
 800207e:	6013      	str	r3, [r2, #0]
			}
		}
	if(GPIO_Pin == GPIO_PIN_1)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d13a      	bne.n	80020fc <HAL_GPIO_EXTI_Callback+0x92c>
		{

				tick_hien_tai = __HAL_TIM_GET_COUNTER(&htim2);
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_GPIO_EXTI_Callback+0x954>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	4a26      	ldr	r2, [pc, #152]	; (8002128 <HAL_GPIO_EXTI_Callback+0x958>)
 800208e:	6013      	str	r3, [r2, #0]
				thoi_gian_tick = tick_hien_tai - tick_lan_truoc;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_GPIO_EXTI_Callback+0x958>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_GPIO_EXTI_Callback+0x95c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_GPIO_EXTI_Callback+0x960>)
 800209c:	6013      	str	r3, [r2, #0]
				tick_lan_truoc = tick_hien_tai;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_GPIO_EXTI_Callback+0x958>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a22      	ldr	r2, [pc, #136]	; (800212c <HAL_GPIO_EXTI_Callback+0x95c>)
 80020a4:	6013      	str	r3, [r2, #0]
				tick[count_tick] = thoi_gian_tick;
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_GPIO_EXTI_Callback+0x960>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_GPIO_EXTI_Callback+0x964>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b2d1      	uxtb	r1, r2
 80020b0:	4a21      	ldr	r2, [pc, #132]	; (8002138 <HAL_GPIO_EXTI_Callback+0x968>)
 80020b2:	54d1      	strb	r1, [r2, r3]
				count_tick++;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_GPIO_EXTI_Callback+0x964>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_GPIO_EXTI_Callback+0x964>)
 80020bc:	6013      	str	r3, [r2, #0]
				if(count_tick >84)
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_GPIO_EXTI_Callback+0x964>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b54      	cmp	r3, #84	; 0x54
 80020c4:	dd1a      	ble.n	80020fc <HAL_GPIO_EXTI_Callback+0x92c>
				{
					  HAL_TIM_Base_Stop_IT(&htim2);
 80020c6:	4817      	ldr	r0, [pc, #92]	; (8002124 <HAL_GPIO_EXTI_Callback+0x954>)
 80020c8:	f002 fe42 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
					  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80020cc:	2007      	movs	r0, #7
 80020ce:	f001 f8b6 	bl	800323e <HAL_NVIC_DisableIRQ>
					  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
					  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
					  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 80020e4:	2301      	movs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
					  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020e8:	2302      	movs	r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
					  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2302      	movs	r3, #2
 80020ee:	617b      	str	r3, [r7, #20]
					  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	4619      	mov	r1, r3
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <HAL_GPIO_EXTI_Callback+0x938>)
 80020f8:	f001 f96e 	bl	80033d8 <HAL_GPIO_Init>
				}
		}

}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40010c00 	.word	0x40010c00
 8002108:	40010800 	.word	0x40010800
 800210c:	2000068c 	.word	0x2000068c
 8002110:	200001f0 	.word	0x200001f0
 8002114:	20000634 	.word	0x20000634
 8002118:	20000200 	.word	0x20000200
 800211c:	2000053c 	.word	0x2000053c
 8002120:	20000538 	.word	0x20000538
 8002124:	20000388 	.word	0x20000388
 8002128:	20000584 	.word	0x20000584
 800212c:	20000580 	.word	0x20000580
 8002130:	20000588 	.word	0x20000588
 8002134:	200005f4 	.word	0x200005f4
 8002138:	2000058c 	.word	0x2000058c

0800213c <xu_ly_tick_dht11>:


void xu_ly_tick_dht11(uint8_t* tick,uint8_t* data_dht11)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8002146:	4828      	ldr	r0, [pc, #160]	; (80021e8 <xu_ly_tick_dht11+0xac>)
 8002148:	f002 fe02 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800214c:	2007      	movs	r0, #7
 800214e:	f001 f876 	bl	800323e <HAL_NVIC_DisableIRQ>
	int count_data_dht11=0;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 8002156:	2304      	movs	r3, #4
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	e03d      	b.n	80021d8 <xu_ly_tick_dht11+0x9c>
	{
			data_dht11[count_data_dht11/8] <<= 1;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	da00      	bge.n	8002164 <xu_ly_tick_dht11+0x28>
 8002162:	3307      	adds	r3, #7
 8002164:	10db      	asrs	r3, r3, #3
 8002166:	4619      	mov	r1, r3
 8002168:	460a      	mov	r2, r1
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	4413      	add	r3, r2
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	440b      	add	r3, r1
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
			if( tick[i] > tick[i+1] ) {
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	440b      	add	r3, r1
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d90d      	bls.n	80021ac <xu_ly_tick_dht11+0x70>
				data_dht11[count_data_dht11/8] |= 0;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	da00      	bge.n	8002198 <xu_ly_tick_dht11+0x5c>
 8002196:	3307      	adds	r3, #7
 8002198:	10db      	asrs	r3, r3, #3
 800219a:	4619      	mov	r1, r3
 800219c:	460a      	mov	r2, r1
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	441a      	add	r2, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	440b      	add	r3, r1
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e00f      	b.n	80021cc <xu_ly_tick_dht11+0x90>
			}	else {

				data_dht11[count_data_dht11/8] |= 1;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da00      	bge.n	80021b4 <xu_ly_tick_dht11+0x78>
 80021b2:	3307      	adds	r3, #7
 80021b4:	10db      	asrs	r3, r3, #3
 80021b6:	4619      	mov	r1, r3
 80021b8:	460a      	mov	r2, r1
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	440b      	add	r3, r1
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]
			}
		count_data_dht11++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3301      	adds	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
	for(int i =4;i<= 82;i+=2)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3302      	adds	r3, #2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b52      	cmp	r3, #82	; 0x52
 80021dc:	ddbe      	ble.n	800215c <xu_ly_tick_dht11+0x20>
	}

}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000388 	.word	0x20000388

080021ec <doc_dht11>:


void doc_dht11(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80021f2:	4828      	ldr	r0, [pc, #160]	; (8002294 <doc_dht11+0xa8>)
 80021f4:	f002 fd5a 	bl	8004cac <HAL_TIM_Base_Start_IT>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80021f8:	2007      	movs	r0, #7
 80021fa:	f001 f820 	bl	800323e <HAL_NVIC_DisableIRQ>
	count_tick =0;
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <doc_dht11+0xac>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002210:	2301      	movs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002218:	2302      	movs	r3, #2
 800221a:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2302      	movs	r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	463b      	mov	r3, r7
 8002222:	4619      	mov	r1, r3
 8002224:	481d      	ldr	r0, [pc, #116]	; (800229c <doc_dht11+0xb0>)
 8002226:	f001 f8d7 	bl	80033d8 <HAL_GPIO_Init>

	  HAL_Delay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fb6c 	bl	8002908 <HAL_Delay>

	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP  ;
 8002234:	2301      	movs	r3, #1
 8002236:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002238:	2302      	movs	r3, #2
 800223a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2302      	movs	r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	463b      	mov	r3, r7
 8002242:	4619      	mov	r1, r3
 8002244:	4815      	ldr	r0, [pc, #84]	; (800229c <doc_dht11+0xb0>)
 8002246:	f001 f8c7 	bl	80033d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2102      	movs	r1, #2
 800224e:	4813      	ldr	r0, [pc, #76]	; (800229c <doc_dht11+0xb0>)
 8002250:	f001 fb19 	bl	8003886 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 8002254:	2014      	movs	r0, #20
 8002256:	f000 fb57 	bl	8002908 <HAL_Delay>
	if(count_tick ==0)
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <doc_dht11+0xac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <doc_dht11+0x84>
	{
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <doc_dht11+0xa8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
		tick_lan_truoc=0;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <doc_dht11+0xb4>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
	}
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002270:	2302      	movs	r3, #2
 8002272:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <doc_dht11+0xb8>)
 8002276:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <doc_dht11+0xb0>)
 8002282:	f001 f8a9 	bl	80033d8 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002286:	2007      	movs	r0, #7
 8002288:	f000 ffcb 	bl	8003222 <HAL_NVIC_EnableIRQ>

}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000388 	.word	0x20000388
 8002298:	200005f4 	.word	0x200005f4
 800229c:	40010800 	.word	0x40010800
 80022a0:	20000580 	.word	0x20000580
 80022a4:	10310000 	.word	0x10310000

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_MspInit+0x40>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_MspInit+0x40>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_MspInit+0x40>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_MspInit+0x40>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_MspInit+0x40>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_MspInit+0x40>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000

080022f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0318 	add.w	r3, r7, #24
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_ADC_MspInit+0xbc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d122      	bne.n	800235e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6193      	str	r3, [r2, #24]
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002348:	2340      	movs	r3, #64	; 0x40
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234c:	2303      	movs	r3, #3
 800234e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0318 	add.w	r3, r7, #24
 8002354:	4619      	mov	r1, r3
 8002356:	4819      	ldr	r0, [pc, #100]	; (80023bc <HAL_ADC_MspInit+0xc4>)
 8002358:	f001 f83e 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800235c:	e026      	b.n	80023ac <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_ADC_MspInit+0xc8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d121      	bne.n	80023ac <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_ADC_MspInit+0xc0>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239c:	2303      	movs	r3, #3
 800239e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_ADC_MspInit+0xc4>)
 80023a8:	f001 f816 	bl	80033d8 <HAL_GPIO_Init>
}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40012400 	.word	0x40012400
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40012800 	.word	0x40012800

080023c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_I2C_MspInit+0x70>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d123      	bne.n	800242c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_I2C_MspInit+0x74>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <HAL_I2C_MspInit+0x74>)
 80023ea:	f043 0308 	orr.w	r3, r3, #8
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_I2C_MspInit+0x74>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fc:	23c0      	movs	r3, #192	; 0xc0
 80023fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002400:	2312      	movs	r3, #18
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4619      	mov	r1, r3
 800240e:	480b      	ldr	r0, [pc, #44]	; (800243c <HAL_I2C_MspInit+0x78>)
 8002410:	f000 ffe2 	bl	80033d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_I2C_MspInit+0x74>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_I2C_MspInit+0x74>)
 800241a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800241e:	61d3      	str	r3, [r2, #28]
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_I2C_MspInit+0x74>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40005400 	.word	0x40005400
 8002438:	40021000 	.word	0x40021000
 800243c:	40010c00 	.word	0x40010c00

08002440 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_I2C_MspDeInit+0x38>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10d      	bne.n	800246e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_I2C_MspDeInit+0x3c>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_I2C_MspDeInit+0x3c>)
 8002458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800245c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	4807      	ldr	r0, [pc, #28]	; (8002480 <HAL_I2C_MspDeInit+0x40>)
 8002462:	f001 f93d 	bl	80036e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <HAL_I2C_MspDeInit+0x40>)
 800246a:	f001 f939 	bl	80036e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40005400 	.word	0x40005400
 800247c:	40021000 	.word	0x40021000
 8002480:	40010c00 	.word	0x40010c00

08002484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a40      	ldr	r2, [pc, #256]	; (8002594 <HAL_TIM_Base_MspInit+0x110>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12c      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 800249c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024a0:	6193      	str	r3, [r2, #24]
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 10, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	210a      	movs	r1, #10
 80024b2:	2018      	movs	r0, #24
 80024b4:	f000 fe99 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80024b8:	2018      	movs	r0, #24
 80024ba:	f000 feb2 	bl	8003222 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 10, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	210a      	movs	r1, #10
 80024c2:	2019      	movs	r0, #25
 80024c4:	f000 fe91 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024c8:	2019      	movs	r0, #25
 80024ca:	f000 feaa 	bl	8003222 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 10, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	210a      	movs	r1, #10
 80024d2:	201a      	movs	r0, #26
 80024d4:	f000 fe89 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80024d8:	201a      	movs	r0, #26
 80024da:	f000 fea2 	bl	8003222 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 10, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	210a      	movs	r1, #10
 80024e2:	201b      	movs	r0, #27
 80024e4:	f000 fe81 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024e8:	201b      	movs	r0, #27
 80024ea:	f000 fe9a 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024ee:	e04c      	b.n	800258a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d114      	bne.n	8002524 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2102      	movs	r1, #2
 8002516:	201c      	movs	r0, #28
 8002518:	f000 fe67 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800251c:	201c      	movs	r0, #28
 800251e:	f000 fe80 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 8002522:	e032      	b.n	800258a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_TIM_Base_MspInit+0x118>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d114      	bne.n	8002558 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2107      	movs	r1, #7
 800254a:	201d      	movs	r0, #29
 800254c:	f000 fe4d 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002550:	201d      	movs	r0, #29
 8002552:	f000 fe66 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 8002556:	e018      	b.n	800258a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_TIM_Base_MspInit+0x11c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d113      	bne.n	800258a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_TIM_Base_MspInit+0x114>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201e      	movs	r0, #30
 8002580:	f000 fe33 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002584:	201e      	movs	r0, #30
 8002586:	f000 fe4c 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800

080025a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_UART_MspInit+0x9c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d139      	bne.n	8002638 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_UART_MspInit+0xa0>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_UART_MspInit+0xa0>)
 80025ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_UART_MspInit+0xa0>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_UART_MspInit+0xa0>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_UART_MspInit+0xa0>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_UART_MspInit+0xa0>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4619      	mov	r1, r3
 8002608:	480f      	ldr	r0, [pc, #60]	; (8002648 <HAL_UART_MspInit+0xa4>)
 800260a:	f000 fee5 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	f107 0310 	add.w	r3, r7, #16
 8002620:	4619      	mov	r1, r3
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <HAL_UART_MspInit+0xa4>)
 8002624:	f000 fed8 	bl	80033d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2101      	movs	r1, #1
 800262c:	2025      	movs	r0, #37	; 0x25
 800262e:	f000 fddc 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002632:	2025      	movs	r0, #37	; 0x25
 8002634:	f000 fdf5 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40013800 	.word	0x40013800
 8002644:	40021000 	.word	0x40021000
 8002648:	40010800 	.word	0x40010800

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <NMI_Handler+0x4>

08002652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <MemManage_Handler+0x4>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <UsageFault_Handler+0x4>

0800266a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002692:	f000 f91d 	bl	80028d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}

0800269a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800269e:	2002      	movs	r0, #2
 80026a0:	f001 f90a 	bl	80038b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80026ac:	2004      	movs	r0, #4
 80026ae:	f001 f903 	bl	80038b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80026ba:	2008      	movs	r0, #8
 80026bc:	f001 f8fc 	bl	80038b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80026c8:	2010      	movs	r0, #16
 80026ca:	f001 f8f5 	bl	80038b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80026d6:	2020      	movs	r0, #32
 80026d8:	f001 f8ee 	bl	80038b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM1_BRK_IRQHandler+0x10>)
 80026e6:	f002 fb61 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000340 	.word	0x20000340

080026f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <TIM1_UP_IRQHandler+0x10>)
 80026fa:	f002 fb57 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000340 	.word	0x20000340

08002708 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <TIM1_TRG_COM_IRQHandler+0x10>)
 800270e:	f002 fb4d 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000340 	.word	0x20000340

0800271c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <TIM1_CC_IRQHandler+0x10>)
 8002722:	f002 fb43 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000340 	.word	0x20000340

08002730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM2_IRQHandler+0x10>)
 8002736:	f002 fb39 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000388 	.word	0x20000388

08002744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM3_IRQHandler+0x10>)
 800274a:	f002 fb2f 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200003d0 	.word	0x200003d0

08002758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM4_IRQHandler+0x10>)
 800275e:	f002 fb25 	bl	8004dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000418 	.word	0x20000418

0800276c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <USART1_IRQHandler+0x10>)
 8002772:	f002 ff6f 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000460 	.word	0x20000460

08002780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <_sbrk+0x5c>)
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <_sbrk+0x60>)
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <_sbrk+0x64>)
 800279e:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <_sbrk+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d207      	bcs.n	80027c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b0:	f003 fee6 	bl	8006580 <__errno>
 80027b4:	4603      	mov	r3, r0
 80027b6:	220c      	movs	r2, #12
 80027b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e009      	b.n	80027d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <_sbrk+0x64>)
 80027d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20005000 	.word	0x20005000
 80027e0:	00000400 	.word	0x00000400
 80027e4:	200006a4 	.word	0x200006a4
 80027e8:	200007f8 	.word	0x200007f8

080027ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027f8:	f7ff fff8 	bl	80027ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027fe:	490c      	ldr	r1, [pc, #48]	; (8002830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002814:	4c09      	ldr	r4, [pc, #36]	; (800283c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002822:	f003 feb3 	bl	800658c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002826:	f7fe f815 	bl	8000854 <main>
  bx lr
 800282a:	4770      	bx	lr
  ldr r0, =_sdata
 800282c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002830:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002834:	08007a44 	.word	0x08007a44
  ldr r2, =_sbss
 8002838:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800283c:	200007f4 	.word	0x200007f4

08002840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC1_2_IRQHandler>
	...

08002844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_Init+0x28>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <HAL_Init+0x28>)
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002854:	2003      	movs	r0, #3
 8002856:	f000 fcbd 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285a:	200f      	movs	r0, #15
 800285c:	f000 f808 	bl	8002870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002860:	f7ff fd28 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40022000 	.word	0x40022000

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_InitTick+0x54>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x58>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002886:	fbb3 f3f1 	udiv	r3, r3, r1
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fce3 	bl	800325a <HAL_SYSTICK_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00e      	b.n	80028bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d80a      	bhi.n	80028ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a4:	2200      	movs	r2, #0
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f000 fc9d 	bl	80031ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <HAL_InitTick+0x5c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000210 	.word	0x20000210
 80028c8:	20000218 	.word	0x20000218
 80028cc:	20000214 	.word	0x20000214

080028d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_IncTick+0x1c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_IncTick+0x20>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a03      	ldr	r2, [pc, #12]	; (80028f0 <HAL_IncTick+0x20>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000218 	.word	0x20000218
 80028f0:	200006a8 	.word	0x200006a8

080028f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return uwTick;
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <HAL_GetTick+0x10>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	200006a8 	.word	0x200006a8

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff fff0 	bl	80028f4 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffe0 	bl	80028f4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000218 	.word	0x20000218

08002950 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0be      	b.n	8002af0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fcb2 	bl	80022f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 faeb 	bl	8002f70 <ADC_ConversionStop_Disable>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8099 	bne.w	8002ade <HAL_ADC_Init+0x18e>
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 8095 	bne.w	8002ade <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029bc:	f023 0302 	bic.w	r3, r3, #2
 80029c0:	f043 0202 	orr.w	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7b1b      	ldrb	r3, [r3, #12]
 80029d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e8:	d003      	beq.n	80029f2 <HAL_ADC_Init+0xa2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_ADC_Init+0xa8>
 80029f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f6:	e000      	b.n	80029fa <HAL_ADC_Init+0xaa>
 80029f8:	2300      	movs	r3, #0
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7d1b      	ldrb	r3, [r3, #20]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d119      	bne.n	8002a3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	035a      	lsls	r2, r3, #13
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	e00b      	b.n	8002a3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_ADC_Init+0x1a8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6c:	d003      	beq.n	8002a76 <HAL_ADC_Init+0x126>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d104      	bne.n	8002a80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	051b      	lsls	r3, r3, #20
 8002a7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_ADC_Init+0x1ac>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002aba:	e018      	b.n	8002aee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f023 0312 	bic.w	r3, r3, #18
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002adc:	e007      	b.n	8002aee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	ffe1f7fd 	.word	0xffe1f7fd
 8002afc:	ff1f0efe 	.word	0xff1f0efe

08002b00 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Start+0x1a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e098      	b.n	8002c4c <HAL_ADC_Start+0x14c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f9ca 	bl	8002ebc <ADC_Enable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 8087 	bne.w	8002c42 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <HAL_ADC_Start+0x154>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_Start+0x5e>
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_ADC_Start+0x158>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d026      	beq.n	8002bc6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b88:	e01d      	b.n	8002bc6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <HAL_ADC_Start+0x158>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_ADC_Start+0xaa>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <HAL_ADC_Start+0x154>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_ADC_Start+0xc6>
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_ADC_Start+0x158>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f023 0206 	bic.w	r2, r3, #6
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bde:	e002      	b.n	8002be6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0202 	mvn.w	r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c06:	d113      	bne.n	8002c30 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_ADC_Start+0x154>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d105      	bne.n	8002c1e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_ADC_Start+0x158>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d108      	bne.n	8002c30 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	e00c      	b.n	8002c4a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40012800 	.word	0x40012800
 8002c58:	40012400 	.word	0x40012400

08002c5c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Stop+0x1a>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e01a      	b.n	8002cac <HAL_ADC_Stop+0x50>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f976 	bl	8002f70 <ADC_ConversionStop_Disable>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x20>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0dc      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x1da>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d81c      	bhi.n	8002d36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b05      	subs	r3, #5
 8002d0e:	221f      	movs	r2, #31
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4019      	ands	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b05      	subs	r3, #5
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34
 8002d34:	e03c      	b.n	8002db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d81c      	bhi.n	8002d78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b23      	subs	r3, #35	; 0x23
 8002d50:	221f      	movs	r2, #31
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4019      	ands	r1, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	3b23      	subs	r3, #35	; 0x23
 8002d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
 8002d76:	e01b      	b.n	8002db0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b41      	subs	r3, #65	; 0x41
 8002d8a:	221f      	movs	r2, #31
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4019      	ands	r1, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b41      	subs	r3, #65	; 0x41
 8002da4:	fa00 f203 	lsl.w	r2, r0, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d91c      	bls.n	8002df2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68d9      	ldr	r1, [r3, #12]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b1e      	subs	r3, #30
 8002dca:	2207      	movs	r2, #7
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4019      	ands	r1, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6898      	ldr	r0, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	3b1e      	subs	r3, #30
 8002de4:	fa00 f203 	lsl.w	r2, r0, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e019      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6919      	ldr	r1, [r3, #16]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	2207      	movs	r2, #7
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4019      	ands	r1, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d003      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d132      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d125      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d126      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d11a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9a      	lsrs	r2, r3, #18
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e7c:	e002      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x1b2>
 8002e8a:	e007      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40012400 	.word	0x40012400
 8002eb4:	20000210 	.word	0x20000210
 8002eb8:	431bde83 	.word	0x431bde83

08002ebc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d040      	beq.n	8002f5c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <ADC_Enable+0xac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <ADC_Enable+0xb0>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0c9b      	lsrs	r3, r3, #18
 8002ef6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ef8:	e002      	b.n	8002f00 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f9      	bne.n	8002efa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f06:	f7ff fcf5 	bl	80028f4 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f0c:	e01f      	b.n	8002f4e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0e:	f7ff fcf1 	bl	80028f4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d918      	bls.n	8002f4e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d011      	beq.n	8002f4e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d1d8      	bne.n	8002f0e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000210 	.word	0x20000210
 8002f6c:	431bde83 	.word	0x431bde83

08002f70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d12e      	bne.n	8002fe8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f9a:	f7ff fcab 	bl	80028f4 <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fa0:	e01b      	b.n	8002fda <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fa2:	f7ff fca7 	bl	80028f4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d914      	bls.n	8002fda <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10d      	bne.n	8002fda <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	f043 0210 	orr.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e007      	b.n	8002fea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d0dc      	beq.n	8002fa2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4906      	ldr	r1, [pc, #24]	; (800308c <__NVIC_EnableIRQ+0x34>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db12      	blt.n	80030c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	490a      	ldr	r1, [pc, #40]	; (80030d4 <__NVIC_DisableIRQ+0x44>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	3320      	adds	r3, #32
 80030b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030bc:	f3bf 8f4f 	dsb	sy
}
 80030c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030c2:	f3bf 8f6f 	isb	sy
}
 80030c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f7ff ff90 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff09 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff1e 	bl	800303c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff90 	bl	800312c <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5f 	bl	80030d8 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff11 	bl	8003058 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff1f 	bl	8003090 <__NVIC_DisableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff94 	bl	8003190 <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d008      	beq.n	800329c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2204      	movs	r2, #4
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e020      	b.n	80032de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 020e 	bic.w	r2, r2, #14
 80032aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d005      	beq.n	800330c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2204      	movs	r2, #4
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	e051      	b.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020e 	bic.w	r2, r2, #14
 800331a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_DMA_Abort_IT+0xd4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d029      	beq.n	800338a <HAL_DMA_Abort_IT+0xa2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <HAL_DMA_Abort_IT+0xd8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_Abort_IT+0x9e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_DMA_Abort_IT+0xdc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01a      	beq.n	8003380 <HAL_DMA_Abort_IT+0x98>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_DMA_Abort_IT+0xe0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d012      	beq.n	800337a <HAL_DMA_Abort_IT+0x92>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_DMA_Abort_IT+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x8c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_DMA_Abort_IT+0xe8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <HAL_DMA_Abort_IT+0x86>
 8003368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800336c:	e00e      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 800336e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003372:	e00b      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 8003374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003378:	e008      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 800337a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337e:	e005      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 8003380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003384:	e002      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 8003386:	2310      	movs	r3, #16
 8003388:	e000      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 800338a:	2301      	movs	r3, #1
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_DMA_Abort_IT+0xec>)
 800338e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
    } 
  }
  return status;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40020008 	.word	0x40020008
 80033c0:	4002001c 	.word	0x4002001c
 80033c4:	40020030 	.word	0x40020030
 80033c8:	40020044 	.word	0x40020044
 80033cc:	40020058 	.word	0x40020058
 80033d0:	4002006c 	.word	0x4002006c
 80033d4:	40020000 	.word	0x40020000

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b08b      	sub	sp, #44	; 0x2c
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ea:	e169      	b.n	80036c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033ec:	2201      	movs	r2, #1
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	f040 8158 	bne.w	80036ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a9a      	ldr	r2, [pc, #616]	; (8003678 <HAL_GPIO_Init+0x2a0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d05e      	beq.n	80034d2 <HAL_GPIO_Init+0xfa>
 8003414:	4a98      	ldr	r2, [pc, #608]	; (8003678 <HAL_GPIO_Init+0x2a0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d875      	bhi.n	8003506 <HAL_GPIO_Init+0x12e>
 800341a:	4a98      	ldr	r2, [pc, #608]	; (800367c <HAL_GPIO_Init+0x2a4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d058      	beq.n	80034d2 <HAL_GPIO_Init+0xfa>
 8003420:	4a96      	ldr	r2, [pc, #600]	; (800367c <HAL_GPIO_Init+0x2a4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d86f      	bhi.n	8003506 <HAL_GPIO_Init+0x12e>
 8003426:	4a96      	ldr	r2, [pc, #600]	; (8003680 <HAL_GPIO_Init+0x2a8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d052      	beq.n	80034d2 <HAL_GPIO_Init+0xfa>
 800342c:	4a94      	ldr	r2, [pc, #592]	; (8003680 <HAL_GPIO_Init+0x2a8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d869      	bhi.n	8003506 <HAL_GPIO_Init+0x12e>
 8003432:	4a94      	ldr	r2, [pc, #592]	; (8003684 <HAL_GPIO_Init+0x2ac>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d04c      	beq.n	80034d2 <HAL_GPIO_Init+0xfa>
 8003438:	4a92      	ldr	r2, [pc, #584]	; (8003684 <HAL_GPIO_Init+0x2ac>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d863      	bhi.n	8003506 <HAL_GPIO_Init+0x12e>
 800343e:	4a92      	ldr	r2, [pc, #584]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d046      	beq.n	80034d2 <HAL_GPIO_Init+0xfa>
 8003444:	4a90      	ldr	r2, [pc, #576]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d85d      	bhi.n	8003506 <HAL_GPIO_Init+0x12e>
 800344a:	2b12      	cmp	r3, #18
 800344c:	d82a      	bhi.n	80034a4 <HAL_GPIO_Init+0xcc>
 800344e:	2b12      	cmp	r3, #18
 8003450:	d859      	bhi.n	8003506 <HAL_GPIO_Init+0x12e>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <HAL_GPIO_Init+0x80>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	080034d3 	.word	0x080034d3
 800345c:	080034ad 	.word	0x080034ad
 8003460:	080034bf 	.word	0x080034bf
 8003464:	08003501 	.word	0x08003501
 8003468:	08003507 	.word	0x08003507
 800346c:	08003507 	.word	0x08003507
 8003470:	08003507 	.word	0x08003507
 8003474:	08003507 	.word	0x08003507
 8003478:	08003507 	.word	0x08003507
 800347c:	08003507 	.word	0x08003507
 8003480:	08003507 	.word	0x08003507
 8003484:	08003507 	.word	0x08003507
 8003488:	08003507 	.word	0x08003507
 800348c:	08003507 	.word	0x08003507
 8003490:	08003507 	.word	0x08003507
 8003494:	08003507 	.word	0x08003507
 8003498:	08003507 	.word	0x08003507
 800349c:	080034b5 	.word	0x080034b5
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	4a79      	ldr	r2, [pc, #484]	; (800368c <HAL_GPIO_Init+0x2b4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034aa:	e02c      	b.n	8003506 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	623b      	str	r3, [r7, #32]
          break;
 80034b2:	e029      	b.n	8003508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	3304      	adds	r3, #4
 80034ba:	623b      	str	r3, [r7, #32]
          break;
 80034bc:	e024      	b.n	8003508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	3308      	adds	r3, #8
 80034c4:	623b      	str	r3, [r7, #32]
          break;
 80034c6:	e01f      	b.n	8003508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	330c      	adds	r3, #12
 80034ce:	623b      	str	r3, [r7, #32]
          break;
 80034d0:	e01a      	b.n	8003508 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034da:	2304      	movs	r3, #4
 80034dc:	623b      	str	r3, [r7, #32]
          break;
 80034de:	e013      	b.n	8003508 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e8:	2308      	movs	r3, #8
 80034ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	611a      	str	r2, [r3, #16]
          break;
 80034f2:	e009      	b.n	8003508 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f4:	2308      	movs	r3, #8
 80034f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	615a      	str	r2, [r3, #20]
          break;
 80034fe:	e003      	b.n	8003508 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003500:	2300      	movs	r3, #0
 8003502:	623b      	str	r3, [r7, #32]
          break;
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x130>
          break;
 8003506:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2bff      	cmp	r3, #255	; 0xff
 800350c:	d801      	bhi.n	8003512 <HAL_GPIO_Init+0x13a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	e001      	b.n	8003516 <HAL_GPIO_Init+0x13e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2bff      	cmp	r3, #255	; 0xff
 800351c:	d802      	bhi.n	8003524 <HAL_GPIO_Init+0x14c>
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	e002      	b.n	800352a <HAL_GPIO_Init+0x152>
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	3b08      	subs	r3, #8
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	210f      	movs	r1, #15
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	401a      	ands	r2, r3
 800353c:	6a39      	ldr	r1, [r7, #32]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	431a      	orrs	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80b1 	beq.w	80036ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003558:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_GPIO_Init+0x2b8>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <HAL_GPIO_Init+0x2b8>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6193      	str	r3, [r2, #24]
 8003564:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_GPIO_Init+0x2b8>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003570:	4a48      	ldr	r2, [pc, #288]	; (8003694 <HAL_GPIO_Init+0x2bc>)
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	3302      	adds	r3, #2
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	220f      	movs	r2, #15
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a40      	ldr	r2, [pc, #256]	; (8003698 <HAL_GPIO_Init+0x2c0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <HAL_GPIO_Init+0x1ec>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3f      	ldr	r2, [pc, #252]	; (800369c <HAL_GPIO_Init+0x2c4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00d      	beq.n	80035c0 <HAL_GPIO_Init+0x1e8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3e      	ldr	r2, [pc, #248]	; (80036a0 <HAL_GPIO_Init+0x2c8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <HAL_GPIO_Init+0x1e4>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <HAL_GPIO_Init+0x2cc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_GPIO_Init+0x1e0>
 80035b4:	2303      	movs	r3, #3
 80035b6:	e006      	b.n	80035c6 <HAL_GPIO_Init+0x1ee>
 80035b8:	2304      	movs	r3, #4
 80035ba:	e004      	b.n	80035c6 <HAL_GPIO_Init+0x1ee>
 80035bc:	2302      	movs	r3, #2
 80035be:	e002      	b.n	80035c6 <HAL_GPIO_Init+0x1ee>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_GPIO_Init+0x1ee>
 80035c4:	2300      	movs	r3, #0
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	f002 0203 	and.w	r2, r2, #3
 80035cc:	0092      	lsls	r2, r2, #2
 80035ce:	4093      	lsls	r3, r2
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035d6:	492f      	ldr	r1, [pc, #188]	; (8003694 <HAL_GPIO_Init+0x2bc>)
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	3302      	adds	r3, #2
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	492c      	ldr	r1, [pc, #176]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	608b      	str	r3, [r1, #8]
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	43db      	mvns	r3, r3
 8003606:	4928      	ldr	r1, [pc, #160]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003608:	4013      	ands	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d006      	beq.n	8003626 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003618:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4922      	ldr	r1, [pc, #136]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
 8003624:	e006      	b.n	8003634 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	43db      	mvns	r3, r3
 800362e:	491e      	ldr	r1, [pc, #120]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003630:	4013      	ands	r3, r2
 8003632:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4918      	ldr	r1, [pc, #96]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
 800364c:	e006      	b.n	800365c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	43db      	mvns	r3, r3
 8003656:	4914      	ldr	r1, [pc, #80]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 8003658:	4013      	ands	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d021      	beq.n	80036ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_GPIO_Init+0x2d0>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	e021      	b.n	80036ba <HAL_GPIO_Init+0x2e2>
 8003676:	bf00      	nop
 8003678:	10320000 	.word	0x10320000
 800367c:	10310000 	.word	0x10310000
 8003680:	10220000 	.word	0x10220000
 8003684:	10210000 	.word	0x10210000
 8003688:	10120000 	.word	0x10120000
 800368c:	10110000 	.word	0x10110000
 8003690:	40021000 	.word	0x40021000
 8003694:	40010000 	.word	0x40010000
 8003698:	40010800 	.word	0x40010800
 800369c:	40010c00 	.word	0x40010c00
 80036a0:	40011000 	.word	0x40011000
 80036a4:	40011400 	.word	0x40011400
 80036a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_GPIO_Init+0x304>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	4909      	ldr	r1, [pc, #36]	; (80036dc <HAL_GPIO_Init+0x304>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f47f ae8e 	bne.w	80033ec <HAL_GPIO_Init+0x14>
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	372c      	adds	r7, #44	; 0x2c
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40010400 	.word	0x40010400

080036e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80036ee:	e09a      	b.n	8003826 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 808d 	beq.w	8003820 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_GPIO_DeInit+0x160>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4013      	ands	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a46      	ldr	r2, [pc, #280]	; (8003844 <HAL_GPIO_DeInit+0x164>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_GPIO_DeInit+0x78>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a45      	ldr	r2, [pc, #276]	; (8003848 <HAL_GPIO_DeInit+0x168>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00d      	beq.n	8003754 <HAL_GPIO_DeInit+0x74>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a44      	ldr	r2, [pc, #272]	; (800384c <HAL_GPIO_DeInit+0x16c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <HAL_GPIO_DeInit+0x70>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_GPIO_DeInit+0x170>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_GPIO_DeInit+0x6c>
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <HAL_GPIO_DeInit+0x7a>
 800374c:	2304      	movs	r3, #4
 800374e:	e004      	b.n	800375a <HAL_GPIO_DeInit+0x7a>
 8003750:	2302      	movs	r3, #2
 8003752:	e002      	b.n	800375a <HAL_GPIO_DeInit+0x7a>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_GPIO_DeInit+0x7a>
 8003758:	2300      	movs	r3, #0
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	4093      	lsls	r3, r2
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	429a      	cmp	r2, r3
 8003768:	d132      	bne.n	80037d0 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800376a:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4938      	ldr	r1, [pc, #224]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 8003774:	4013      	ands	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	43db      	mvns	r3, r3
 8003780:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 8003782:	4013      	ands	r3, r2
 8003784:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	43db      	mvns	r3, r3
 800378e:	4931      	ldr	r1, [pc, #196]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 8003790:	4013      	ands	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003794:	4b2f      	ldr	r3, [pc, #188]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	43db      	mvns	r3, r3
 800379c:	492d      	ldr	r1, [pc, #180]	; (8003854 <HAL_GPIO_DeInit+0x174>)
 800379e:	4013      	ands	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220f      	movs	r2, #15
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80037b2:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_GPIO_DeInit+0x160>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	3302      	adds	r3, #2
 80037ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	481f      	ldr	r0, [pc, #124]	; (8003840 <HAL_GPIO_DeInit+0x160>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	400a      	ands	r2, r1
 80037ca:	3302      	adds	r3, #2
 80037cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2bff      	cmp	r3, #255	; 0xff
 80037d4:	d801      	bhi.n	80037da <HAL_GPIO_DeInit+0xfa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	e001      	b.n	80037de <HAL_GPIO_DeInit+0xfe>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d802      	bhi.n	80037ec <HAL_GPIO_DeInit+0x10c>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	e002      	b.n	80037f2 <HAL_GPIO_DeInit+0x112>
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3b08      	subs	r3, #8
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	210f      	movs	r1, #15
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	2104      	movs	r1, #4
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3301      	adds	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	f47f af5e 	bne.w	80036f0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40010000 	.word	0x40010000
 8003844:	40010800 	.word	0x40010800
 8003848:	40010c00 	.word	0x40010c00
 800384c:	40011000 	.word	0x40011000
 8003850:	40011400 	.word	0x40011400
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	807b      	strh	r3, [r7, #2]
 8003892:	4613      	mov	r3, r2
 8003894:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003896:	787b      	ldrb	r3, [r7, #1]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389c:	887a      	ldrh	r2, [r7, #2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038a2:	e003      	b.n	80038ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d006      	beq.n	80038dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd ff7a 	bl	80017d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40010400 	.word	0x40010400

080038e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e12b      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe fd58 	bl	80023c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800393a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800394c:	f001 f862 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a81      	ldr	r2, [pc, #516]	; (8003b5c <HAL_I2C_Init+0x274>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d807      	bhi.n	800396c <HAL_I2C_Init+0x84>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a80      	ldr	r2, [pc, #512]	; (8003b60 <HAL_I2C_Init+0x278>)
 8003960:	4293      	cmp	r3, r2
 8003962:	bf94      	ite	ls
 8003964:	2301      	movls	r3, #1
 8003966:	2300      	movhi	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e006      	b.n	800397a <HAL_I2C_Init+0x92>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a7d      	ldr	r2, [pc, #500]	; (8003b64 <HAL_I2C_Init+0x27c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0e7      	b.n	8003b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a78      	ldr	r2, [pc, #480]	; (8003b68 <HAL_I2C_Init+0x280>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a6a      	ldr	r2, [pc, #424]	; (8003b5c <HAL_I2C_Init+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <HAL_I2C_Init+0xd4>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	e009      	b.n	80039d0 <HAL_I2C_Init+0xe8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_I2C_Init+0x284>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	3301      	adds	r3, #1
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	495c      	ldr	r1, [pc, #368]	; (8003b5c <HAL_I2C_Init+0x274>)
 80039ec:	428b      	cmp	r3, r1
 80039ee:	d819      	bhi.n	8003a24 <HAL_I2C_Init+0x13c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e59      	subs	r1, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fe:	1c59      	adds	r1, r3, #1
 8003a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a04:	400b      	ands	r3, r1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_I2C_Init+0x138>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1e59      	subs	r1, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	e051      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a20:	2304      	movs	r3, #4
 8003a22:	e04f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d111      	bne.n	8003a50 <HAL_I2C_Init+0x168>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	440b      	add	r3, r1
 8003a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e012      	b.n	8003a76 <HAL_I2C_Init+0x18e>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	0099      	lsls	r1, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Init+0x196>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_I2C_Init+0x1bc>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e58      	subs	r0, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6859      	ldr	r1, [r3, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	440b      	add	r3, r1
 8003a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Init+0x1dc>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6809      	ldr	r1, [r1, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6911      	ldr	r1, [r2, #16]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	4311      	orrs	r1, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	000186a0 	.word	0x000186a0
 8003b60:	001e847f 	.word	0x001e847f
 8003b64:	003d08ff 	.word	0x003d08ff
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	10624dd3 	.word	0x10624dd3

08003b70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e021      	b.n	8003bc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2224      	movs	r2, #36	; 0x24
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe fc50 	bl	8002440 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	817b      	strh	r3, [r7, #10]
 8003be0:	4613      	mov	r3, r2
 8003be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7fe fe86 	bl	80028f4 <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 80e0 	bne.w	8003db8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2319      	movs	r3, #25
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4970      	ldr	r1, [pc, #448]	; (8003dc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f964 	bl	8003ed0 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0d3      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2C_Master_Transmit+0x50>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e0cc      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1ea>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d007      	beq.n	8003c46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2221      	movs	r2, #33	; 0x21
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2210      	movs	r2, #16
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	893a      	ldrh	r2, [r7, #8]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a50      	ldr	r2, [pc, #320]	; (8003dc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c88:	8979      	ldrh	r1, [r7, #10]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f89c 	bl	8003dcc <I2C_MasterRequestWrite>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e08d      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cb4:	e066      	b.n	8003d84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	6a39      	ldr	r1, [r7, #32]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fa22 	bl	8004104 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d107      	bne.n	8003cde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e06b      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d11b      	bne.n	8003d58 <HAL_I2C_Master_Transmit+0x188>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d017      	beq.n	8003d58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	6a39      	ldr	r1, [r7, #32]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fa19 	bl	8004194 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d107      	bne.n	8003d80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e01a      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d194      	bne.n	8003cb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	00100002 	.word	0x00100002
 8003dc8:	ffff0000 	.word	0xffff0000

08003dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d006      	beq.n	8003df6 <I2C_MasterRequestWrite+0x2a>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d003      	beq.n	8003df6 <I2C_MasterRequestWrite+0x2a>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df4:	d108      	bne.n	8003e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e00b      	b.n	8003e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	2b12      	cmp	r3, #18
 8003e0e:	d107      	bne.n	8003e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f84f 	bl	8003ed0 <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00d      	beq.n	8003e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e46:	d103      	bne.n	8003e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e035      	b.n	8003ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5c:	d108      	bne.n	8003e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e6c:	611a      	str	r2, [r3, #16]
 8003e6e:	e01b      	b.n	8003ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e70:	897b      	ldrh	r3, [r7, #10]
 8003e72:	11db      	asrs	r3, r3, #7
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0306 	and.w	r3, r3, #6
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f063 030f 	orn	r3, r3, #15
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <I2C_MasterRequestWrite+0xfc>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f898 	bl	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e010      	b.n	8003ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4907      	ldr	r1, [pc, #28]	; (8003ecc <I2C_MasterRequestWrite+0x100>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f888 	bl	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	00010008 	.word	0x00010008
 8003ecc:	00010002 	.word	0x00010002

08003ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	e048      	b.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d044      	beq.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fd03 	bl	80028f4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d139      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10d      	bne.n	8003f26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	e00c      	b.n	8003f40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d116      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e023      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10d      	bne.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	43da      	mvns	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	e00c      	b.n	8003fb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	43da      	mvns	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d093      	beq.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd2:	e071      	b.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d123      	bne.n	800402c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e067      	b.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d041      	beq.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004034:	f7fe fc5e 	bl	80028f4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d136      	bne.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10c      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e00b      	b.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e021      	b.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10c      	bne.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	43da      	mvns	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e00b      	b.n	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f af6d 	bne.w	8003fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004110:	e034      	b.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f886 	bl	8004224 <I2C_IsAcknowledgeFailed>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e034      	b.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d028      	beq.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412a:	f7fe fbe3 	bl	80028f4 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11d      	bne.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d016      	beq.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e007      	b.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d1c3      	bne.n	8004112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a0:	e034      	b.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f83e 	bl	8004224 <I2C_IsAcknowledgeFailed>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e034      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d028      	beq.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fe fb9b 	bl	80028f4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d11d      	bne.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d016      	beq.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e007      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d1c3      	bne.n	80041a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d11b      	bne.n	8004274 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004244:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e272      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8087 	beq.w	80043ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a0:	4b92      	ldr	r3, [pc, #584]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042ac:	4b8f      	ldr	r3, [pc, #572]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d112      	bne.n	80042de <HAL_RCC_OscConfig+0x5e>
 80042b8:	4b8c      	ldr	r3, [pc, #560]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c4:	d10b      	bne.n	80042de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	4b89      	ldr	r3, [pc, #548]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d06c      	beq.n	80043ac <HAL_RCC_OscConfig+0x12c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d168      	bne.n	80043ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e24c      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d106      	bne.n	80042f6 <HAL_RCC_OscConfig+0x76>
 80042e8:	4b80      	ldr	r3, [pc, #512]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7f      	ldr	r2, [pc, #508]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e02e      	b.n	8004354 <HAL_RCC_OscConfig+0xd4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x98>
 80042fe:	4b7b      	ldr	r3, [pc, #492]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7a      	ldr	r2, [pc, #488]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b78      	ldr	r3, [pc, #480]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a77      	ldr	r2, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e01d      	b.n	8004354 <HAL_RCC_OscConfig+0xd4>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0xbc>
 8004322:	4b72      	ldr	r3, [pc, #456]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a71      	ldr	r2, [pc, #452]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6e      	ldr	r2, [pc, #440]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0xd4>
 800433c:	4b6b      	ldr	r3, [pc, #428]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a6a      	ldr	r2, [pc, #424]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b68      	ldr	r3, [pc, #416]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a67      	ldr	r2, [pc, #412]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 800434e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fe faca 	bl	80028f4 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fe fac6 	bl	80028f4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e200      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0xe4>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fab6 	bl	80028f4 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7fe fab2 	bl	80028f4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	; 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1ec      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	4b53      	ldr	r3, [pc, #332]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x10c>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ba:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043c6:	4b49      	ldr	r3, [pc, #292]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x18c>
 80043d2:	4b46      	ldr	r3, [pc, #280]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	4b43      	ldr	r3, [pc, #268]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x176>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1c0      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4939      	ldr	r1, [pc, #228]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e03a      	b.n	8004482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fe fa6b 	bl	80028f4 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004422:	f7fe fa67 	bl	80028f4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1a1      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	4b2d      	ldr	r3, [pc, #180]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4927      	ldr	r1, [pc, #156]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_RCC_OscConfig+0x270>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe fa4a 	bl	80028f4 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004464:	f7fe fa46 	bl	80028f4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e180      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d03a      	beq.n	8004504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d019      	beq.n	80044ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449c:	f7fe fa2a 	bl	80028f4 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fe fa26 	bl	80028f4 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e160      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HAL_RCC_OscConfig+0x26c>)
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f000 face 	bl	8004a64 <RCC_Delay>
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fe fa10 	bl	80028f4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d6:	e00f      	b.n	80044f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fe fa0c 	bl	80028f4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d908      	bls.n	80044f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e146      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	42420000 	.word	0x42420000
 80044f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	4b92      	ldr	r3, [pc, #584]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e9      	bne.n	80044d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a6 	beq.w	800465e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	4b8b      	ldr	r3, [pc, #556]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4a87      	ldr	r2, [pc, #540]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	61d3      	str	r3, [r2, #28]
 800452e:	4b85      	ldr	r3, [pc, #532]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b82      	ldr	r3, [pc, #520]	; (8004748 <HAL_RCC_OscConfig+0x4c8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b7f      	ldr	r3, [pc, #508]	; (8004748 <HAL_RCC_OscConfig+0x4c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7e      	ldr	r2, [pc, #504]	; (8004748 <HAL_RCC_OscConfig+0x4c8>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fe f9cd 	bl	80028f4 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fe f9c9 	bl	80028f4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e103      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b75      	ldr	r3, [pc, #468]	; (8004748 <HAL_RCC_OscConfig+0x4c8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x312>
 8004584:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a6e      	ldr	r2, [pc, #440]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	e02d      	b.n	80045ee <HAL_RCC_OscConfig+0x36e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x334>
 800459a:	4b6a      	ldr	r3, [pc, #424]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4a69      	ldr	r2, [pc, #420]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6213      	str	r3, [r2, #32]
 80045a6:	4b67      	ldr	r3, [pc, #412]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a66      	ldr	r2, [pc, #408]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6213      	str	r3, [r2, #32]
 80045b2:	e01c      	b.n	80045ee <HAL_RCC_OscConfig+0x36e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x356>
 80045bc:	4b61      	ldr	r3, [pc, #388]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4a60      	ldr	r2, [pc, #384]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6213      	str	r3, [r2, #32]
 80045c8:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a5d      	ldr	r2, [pc, #372]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6213      	str	r3, [r2, #32]
 80045d4:	e00b      	b.n	80045ee <HAL_RCC_OscConfig+0x36e>
 80045d6:	4b5b      	ldr	r3, [pc, #364]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a5a      	ldr	r2, [pc, #360]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6213      	str	r3, [r2, #32]
 80045e2:	4b58      	ldr	r3, [pc, #352]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a57      	ldr	r2, [pc, #348]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d015      	beq.n	8004622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fe f97d 	bl	80028f4 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fe f979 	bl	80028f4 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0b1      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0ee      	beq.n	80045fe <HAL_RCC_OscConfig+0x37e>
 8004620:	e014      	b.n	800464c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fe f967 	bl	80028f4 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	e00a      	b.n	8004640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462a:	f7fe f963 	bl	80028f4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f241 3288 	movw	r2, #5000	; 0x1388
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e09b      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	4b40      	ldr	r3, [pc, #256]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ee      	bne.n	800462a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4b3c      	ldr	r3, [pc, #240]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4a3b      	ldr	r2, [pc, #236]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8087 	beq.w	8004776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d061      	beq.n	8004738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d146      	bne.n	800470a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b33      	ldr	r3, [pc, #204]	; (800474c <HAL_RCC_OscConfig+0x4cc>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe f937 	bl	80028f4 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe f933 	bl	80028f4 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e06d      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469c:	4b29      	ldr	r3, [pc, #164]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d108      	bne.n	80046c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4921      	ldr	r1, [pc, #132]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c4:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a19      	ldr	r1, [r3, #32]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	430b      	orrs	r3, r1
 80046d6:	491b      	ldr	r1, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_RCC_OscConfig+0x4cc>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e2:	f7fe f907 	bl	80028f4 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fe f903 	bl	80028f4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e03d      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x46a>
 8004708:	e035      	b.n	8004776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <HAL_RCC_OscConfig+0x4cc>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe f8f0 	bl	80028f4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004718:	f7fe f8ec 	bl	80028f4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e026      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x498>
 8004736:	e01e      	b.n	8004776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d107      	bne.n	8004750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e019      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
 8004744:	40021000 	.word	0x40021000
 8004748:	40007000 	.word	0x40007000
 800474c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_OscConfig+0x500>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	429a      	cmp	r2, r3
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000

08004784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d0      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004798:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d910      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 0207 	bic.w	r2, r3, #7
 80047ae:	4965      	ldr	r1, [pc, #404]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b8      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a58      	ldr	r2, [pc, #352]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4b53      	ldr	r3, [pc, #332]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4a52      	ldr	r2, [pc, #328]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b50      	ldr	r3, [pc, #320]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	494d      	ldr	r1, [pc, #308]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d040      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d115      	bne.n	8004862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004842:	4b41      	ldr	r3, [pc, #260]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e073      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004852:	4b3d      	ldr	r3, [pc, #244]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06b      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4936      	ldr	r1, [pc, #216]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004874:	f7fe f83e 	bl	80028f4 <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	e00a      	b.n	8004892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7fe f83a 	bl	80028f4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e053      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 020c 	and.w	r2, r3, #12
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1eb      	bne.n	800487c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d210      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0207 	bic.w	r2, r3, #7
 80048ba:	4922      	ldr	r1, [pc, #136]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <HAL_RCC_ClockConfig+0x1c0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e032      	b.n	800493a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4916      	ldr	r1, [pc, #88]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	490e      	ldr	r1, [pc, #56]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004912:	f000 f821 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490a      	ldr	r1, [pc, #40]	; (800494c <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1cc>)
 800492c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_ClockConfig+0x1d0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd ff9c 	bl	8002870 <HAL_InitTick>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40022000 	.word	0x40022000
 8004948:	40021000 	.word	0x40021000
 800494c:	080078c0 	.word	0x080078c0
 8004950:	20000210 	.word	0x20000210
 8004954:	20000214 	.word	0x20000214

08004958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_RCC_GetSysClockFreq+0x94>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b04      	cmp	r3, #4
 8004980:	d002      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x30>
 8004982:	2b08      	cmp	r3, #8
 8004984:	d003      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x36>
 8004986:	e027      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800498a:	613b      	str	r3, [r7, #16]
      break;
 800498c:	e027      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	0c9b      	lsrs	r3, r3, #18
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d010      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_RCC_GetSysClockFreq+0x94>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	0c5b      	lsrs	r3, r3, #17
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a0d      	ldr	r2, [pc, #52]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ba:	fb03 f202 	mul.w	r2, r3, r2
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e004      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80049cc:	fb02 f303 	mul.w	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	613b      	str	r3, [r7, #16]
      break;
 80049d6:	e002      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049da:	613b      	str	r3, [r7, #16]
      break;
 80049dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049de:	693b      	ldr	r3, [r7, #16]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	007a1200 	.word	0x007a1200
 80049f4:	080078d8 	.word	0x080078d8
 80049f8:	080078e8 	.word	0x080078e8
 80049fc:	003d0900 	.word	0x003d0900

08004a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr
 8004a10:	20000210 	.word	0x20000210

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a18:	f7ff fff2 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	080078d0 	.word	0x080078d0

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a40:	f7ff ffde 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	0adb      	lsrs	r3, r3, #11
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	080078d0 	.word	0x080078d0

08004a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <RCC_Delay+0x34>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <RCC_Delay+0x38>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a5b      	lsrs	r3, r3, #9
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a80:	bf00      	nop
  }
  while (Delay --);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	60fa      	str	r2, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f9      	bne.n	8004a80 <RCC_Delay+0x1c>
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	20000210 	.word	0x20000210
 8004a9c:	10624dd3 	.word	0x10624dd3

08004aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d07d      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004abc:	2300      	movs	r3, #0
 8004abe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac0:	4b4f      	ldr	r3, [pc, #316]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10d      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b4c      	ldr	r3, [pc, #304]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	61d3      	str	r3, [r2, #28]
 8004ad8:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d118      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af4:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a42      	ldr	r2, [pc, #264]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b00:	f7fd fef8 	bl	80028f4 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b08:	f7fd fef4 	bl	80028f4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e06d      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1a:	4b3a      	ldr	r3, [pc, #232]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02e      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d027      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4e:	4b2e      	ldr	r3, [pc, #184]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b5a:	4a29      	ldr	r2, [pc, #164]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fec3 	bl	80028f4 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fd febf 	bl	80028f4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e036      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4917      	ldr	r1, [pc, #92]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	490b      	ldr	r1, [pc, #44]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4904      	ldr	r1, [pc, #16]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42420440 	.word	0x42420440

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fd fc26 	bl	8002484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 faa2 	bl	8005194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e03a      	b.n	8004d3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_TIM_Base_Start_IT+0x98>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x58>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d009      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x58>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x58>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <HAL_TIM_Base_Start_IT+0xa0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d111      	bne.n	8004d28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d010      	beq.n	8004d38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	e007      	b.n	8004d38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800

08004d50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10f      	bne.n	8004d98 <HAL_TIM_Base_Stop_IT+0x48>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	f240 4344 	movw	r3, #1092	; 0x444
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d107      	bne.n	8004d98 <HAL_TIM_Base_Stop_IT+0x48>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d122      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d11b      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0202 	mvn.w	r2, #2
 8004dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9b4 	bl	800515c <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9a7 	bl	800514a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f9b6 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d122      	bne.n	8004e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11b      	bne.n	8004e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0204 	mvn.w	r2, #4
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2202      	movs	r2, #2
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f98a 	bl	800515c <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f97d 	bl	800514a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f98c 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d122      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d11b      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0208 	mvn.w	r2, #8
 8004e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f960 	bl	800515c <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f953 	bl	800514a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f962 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0210 	mvn.w	r2, #16
 8004ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f936 	bl	800515c <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f929 	bl	800514a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f938 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10e      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0201 	mvn.w	r2, #1
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fc04 	bl	8001738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b80      	cmp	r3, #128	; 0x80
 8004f3c:	d10e      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d107      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa7b 	bl	8005452 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b40      	cmp	r3, #64	; 0x40
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8fc 	bl	8005180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0220 	mvn.w	r2, #32
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa46 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e0b4      	b.n	8005142 <HAL_TIM_ConfigClockSource+0x186>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d03e      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0xd4>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	f200 8087 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	f000 8086 	beq.w	800512e <HAL_TIM_ConfigClockSource+0x172>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d87f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b70      	cmp	r3, #112	; 0x70
 800502a:	d01a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0xa6>
 800502c:	2b70      	cmp	r3, #112	; 0x70
 800502e:	d87b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d050      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d877      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b50      	cmp	r3, #80	; 0x50
 800503a:	d03c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xfa>
 800503c:	2b50      	cmp	r3, #80	; 0x50
 800503e:	d873      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d058      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d86f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d86b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d060      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d867      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d05a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x15a>
 8005060:	e062      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	f000 f968 	bl	8005346 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
      break;
 800508e:	e04f      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	f000 f951 	bl	8005346 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b2:	609a      	str	r2, [r3, #8]
      break;
 80050b4:	e03c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f8c8 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2150      	movs	r1, #80	; 0x50
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f91f 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 80050d4:	e02c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 f8e6 	bl	80052b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2160      	movs	r1, #96	; 0x60
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f90f 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 80050f4:	e01c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	461a      	mov	r2, r3
 8005104:	f000 f8a8 	bl	8005258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f8ff 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 8005114:	e00c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 f8f6 	bl	8005312 <TIM_ITRx_SetConfig>
      break;
 8005126:	e003      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e000      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800512e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
	...

08005194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a29      	ldr	r2, [pc, #164]	; (800524c <TIM_Base_SetConfig+0xb8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_Base_SetConfig+0x30>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b2:	d007      	beq.n	80051c4 <TIM_Base_SetConfig+0x30>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a26      	ldr	r2, [pc, #152]	; (8005250 <TIM_Base_SetConfig+0xbc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0x30>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a25      	ldr	r2, [pc, #148]	; (8005254 <TIM_Base_SetConfig+0xc0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d108      	bne.n	80051d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <TIM_Base_SetConfig+0xb8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e4:	d007      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <TIM_Base_SetConfig+0xbc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_Base_SetConfig+0x62>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <TIM_Base_SetConfig+0xc0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a07      	ldr	r2, [pc, #28]	; (800524c <TIM_Base_SetConfig+0xb8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d103      	bne.n	800523c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	615a      	str	r2, [r3, #20]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800

08005258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 030a 	bic.w	r3, r3, #10
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr

080052b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0210 	bic.w	r2, r3, #16
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	031b      	lsls	r3, r3, #12
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	621a      	str	r2, [r3, #32]
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	f043 0307 	orr.w	r3, r3, #7
 8005334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
 8005352:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005360:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	431a      	orrs	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	609a      	str	r2, [r3, #8]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e046      	b.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a16      	ldr	r2, [pc, #88]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e8:	d009      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a10      	ldr	r2, [pc, #64]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10c      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4313      	orrs	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e042      	b.n	80054fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fd f88a 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fdc5 	bl	8006038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	; 0x28
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b20      	cmp	r3, #32
 8005522:	d16d      	bne.n	8005600 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_UART_Transmit+0x2c>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e066      	b.n	8005602 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2221      	movs	r2, #33	; 0x21
 800553e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005542:	f7fd f9d7 	bl	80028f4 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555c:	d108      	bne.n	8005570 <HAL_UART_Transmit+0x6c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	e003      	b.n	8005578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005578:	e02a      	b.n	80055d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fb14 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e036      	b.n	8005602 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3302      	adds	r3, #2
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e007      	b.n	80055c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1cf      	bne.n	800557a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2140      	movs	r1, #64	; 0x40
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fae4 	bl	8005bb2 <UART_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e006      	b.n	8005602 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e000      	b.n	8005602 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005600:	2302      	movs	r3, #2
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	4613      	mov	r3, r2
 8005616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b20      	cmp	r3, #32
 8005622:	d112      	bne.n	800564a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_UART_Receive_IT+0x26>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e00b      	b.n	800564c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	461a      	mov	r2, r3
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fb24 	bl	8005c8e <UART_Start_Receive_IT>
 8005646:	4603      	mov	r3, r0
 8005648:	e000      	b.n	800564c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b0ba      	sub	sp, #232	; 0xe8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800567a:	2300      	movs	r3, #0
 800567c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10f      	bne.n	80056ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_UART_IRQHandler+0x66>
 80056a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fc01 	bl	8005eba <UART_Receive_IT>
      return;
 80056b8:	e25b      	b.n	8005b72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80de 	beq.w	8005880 <HAL_UART_IRQHandler+0x22c>
 80056c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80d1 	beq.w	8005880 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_UART_IRQHandler+0xae>
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f043 0201 	orr.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_UART_IRQHandler+0xd2>
 800570e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	f043 0202 	orr.w	r2, r3, #2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_UART_IRQHandler+0xf6>
 8005732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	f043 0204 	orr.w	r2, r3, #4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d011      	beq.n	800577a <HAL_UART_IRQHandler+0x126>
 8005756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005772:	f043 0208 	orr.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 81f2 	beq.w	8005b68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d008      	beq.n	80057a2 <HAL_UART_IRQHandler+0x14e>
 8005790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb8c 	bl	8005eba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <HAL_UART_IRQHandler+0x17a>
 80057c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d04f      	beq.n	800586e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa96 	bl	8005d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d041      	beq.n	8005866 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800580e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800581a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1d9      	bne.n	80057e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d013      	beq.n	800585e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583a:	4a7e      	ldr	r2, [pc, #504]	; (8005a34 <HAL_UART_IRQHandler+0x3e0>)
 800583c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	4618      	mov	r0, r3
 8005844:	f7fd fd50 	bl	80032e8 <HAL_DMA_Abort_IT>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005858:	4610      	mov	r0, r2
 800585a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585c:	e00e      	b.n	800587c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f993 	bl	8005b8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	e00a      	b.n	800587c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f98f 	bl	8005b8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	e006      	b.n	800587c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f98b 	bl	8005b8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800587a:	e175      	b.n	8005b68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	bf00      	nop
    return;
 800587e:	e173      	b.n	8005b68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	2b01      	cmp	r3, #1
 8005886:	f040 814f 	bne.w	8005b28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8148 	beq.w	8005b28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8141 	beq.w	8005b28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80b6 	beq.w	8005a38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8145 	beq.w	8005b6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ea:	429a      	cmp	r2, r3
 80058ec:	f080 813e 	bcs.w	8005b6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	2b20      	cmp	r3, #32
 8005900:	f000 8088 	beq.w	8005a14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800591a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800591e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005930:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800593c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1d9      	bne.n	8005904 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3314      	adds	r3, #20
 8005970:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005974:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005978:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800597c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e1      	bne.n	8005950 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3314      	adds	r3, #20
 8005992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800599c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3314      	adds	r3, #20
 80059ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e3      	bne.n	800598c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e3      	bne.n	80059d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd fc2f 	bl	8003272 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8b6 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a30:	e09c      	b.n	8005b6c <HAL_UART_IRQHandler+0x518>
 8005a32:	bf00      	nop
 8005a34:	08005dc5 	.word	0x08005dc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 808e 	beq.w	8005b70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8089 	beq.w	8005b70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	330c      	adds	r3, #12
 8005a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a82:	647a      	str	r2, [r7, #68]	; 0x44
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e3      	bne.n	8005a5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aba:	633a      	str	r2, [r7, #48]	; 0x30
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e3      	bne.n	8005a96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e3      	bne.n	8005adc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f83b 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b26:	e023      	b.n	8005b70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <HAL_UART_IRQHandler+0x4f4>
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f953 	bl	8005dec <UART_Transmit_IT>
    return;
 8005b46:	e014      	b.n	8005b72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00e      	beq.n	8005b72 <HAL_UART_IRQHandler+0x51e>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f992 	bl	8005e8a <UART_EndTransmit_IT>
    return;
 8005b66:	e004      	b.n	8005b72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b70:	bf00      	nop
  }
}
 8005b72:	37e8      	adds	r7, #232	; 0xe8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b090      	sub	sp, #64	; 0x40
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc2:	e050      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d04c      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bd2:	f7fc fe8f 	bl	80028f4 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d241      	bcs.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c02:	637a      	str	r2, [r7, #52]	; 0x34
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e5      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	613b      	str	r3, [r7, #16]
   return(result);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c36:	623a      	str	r2, [r7, #32]
 8005c38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	69f9      	ldr	r1, [r7, #28]
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e5      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d09f      	beq.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3740      	adds	r7, #64	; 0x40
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2222      	movs	r2, #34	; 0x22
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0220 	orr.w	r2, r2, #32
 8005cf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b095      	sub	sp, #84	; 0x54
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d28:	643a      	str	r2, [r7, #64]	; 0x40
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e5      	bne.n	8005d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3314      	adds	r3, #20
 8005d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e5      	bne.n	8005d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d119      	bne.n	8005dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0310 	bic.w	r3, r3, #16
 8005d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d98:	61ba      	str	r2, [r7, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dba:	bf00      	nop
 8005dbc:	3754      	adds	r7, #84	; 0x54
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff fed3 	bl	8005b8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b21      	cmp	r3, #33	; 0x21
 8005dfe:	d13e      	bne.n	8005e7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e08:	d114      	bne.n	8005e34 <UART_Transmit_IT+0x48>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d110      	bne.n	8005e34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	1c9a      	adds	r2, r3, #2
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]
 8005e32:	e008      	b.n	8005e46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	1c59      	adds	r1, r3, #1
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6211      	str	r1, [r2, #32]
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4619      	mov	r1, r3
 8005e54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10f      	bne.n	8005e7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fe64 	bl	8005b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b08c      	sub	sp, #48	; 0x30
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b22      	cmp	r3, #34	; 0x22
 8005ecc:	f040 80ae 	bne.w	800602c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d117      	bne.n	8005f0a <UART_Receive_IT+0x50>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d113      	bne.n	8005f0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	1c9a      	adds	r2, r3, #2
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
 8005f08:	e026      	b.n	8005f58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1c:	d007      	beq.n	8005f2e <UART_Receive_IT+0x74>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <UART_Receive_IT+0x82>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e008      	b.n	8005f4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4619      	mov	r1, r3
 8005f66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d15d      	bne.n	8006028 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0220 	bic.w	r2, r2, #32
 8005f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d135      	bne.n	800601e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	623a      	str	r2, [r7, #32]
 8005fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b10      	cmp	r3, #16
 8005ff8:	d10a      	bne.n	8006010 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fdc0 	bl	8005b9c <HAL_UARTEx_RxEventCallback>
 800601c:	e002      	b.n	8006024 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fb fa1a 	bl	8001458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e002      	b.n	800602e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	e000      	b.n	800602e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800602c:	2302      	movs	r3, #2
  }
}
 800602e:	4618      	mov	r0, r3
 8006030:	3730      	adds	r7, #48	; 0x30
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006072:	f023 030c 	bic.w	r3, r3, #12
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	430b      	orrs	r3, r1
 800607e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2c      	ldr	r2, [pc, #176]	; (800614c <UART_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060a0:	f7fe fccc 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	e002      	b.n	80060ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fe fcb4 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80060ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009a      	lsls	r2, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <UART_SetConfig+0x118>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	0119      	lsls	r1, r3, #4
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e4:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <UART_SetConfig+0x118>)
 80060e6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2064      	movs	r0, #100	; 0x64
 80060ee:	fb00 f303 	mul.w	r3, r0, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <UART_SetConfig+0x118>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006104:	4419      	add	r1, r3
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009a      	lsls	r2, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	fbb2 f2f3 	udiv	r2, r2, r3
 800611c:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <UART_SetConfig+0x118>)
 800611e:	fba3 0302 	umull	r0, r3, r3, r2
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2064      	movs	r0, #100	; 0x64
 8006126:	fb00 f303 	mul.w	r3, r0, r3
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	3332      	adds	r3, #50	; 0x32
 8006130:	4a07      	ldr	r2, [pc, #28]	; (8006150 <UART_SetConfig+0x118>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	f003 020f 	and.w	r2, r3, #15
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	440a      	add	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40013800 	.word	0x40013800
 8006150:	51eb851f 	.word	0x51eb851f

08006154 <wait_for_gpio_state_timeout>:
#define I2C1_SCL_GPIO_Port GPIOB
#define I2C1_SDA_Pin GPIO_PIN_7
#define I2C1_SDA_GPIO_Port GPIOB

static bool wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	817b      	strh	r3, [r7, #10]
 8006162:	4613      	mov	r3, r2
 8006164:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8006166:	f7fc fbc5 	bl	80028f4 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]
    bool ret = true;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8006170:	e011      	b.n	8006196 <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d00c      	beq.n	8006194 <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <wait_for_gpio_state_timeout+0x3c>
 8006180:	f7fc fbb8 	bl	80028f4 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d201      	bcs.n	8006194 <wait_for_gpio_state_timeout+0x40>
            {
                ret = false;
 8006190:	2300      	movs	r3, #0
 8006192:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 8006194:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8006196:	897b      	ldrh	r3, [r7, #10]
 8006198:	4619      	mov	r1, r3
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7fd fb5c 	bl	8003858 <HAL_GPIO_ReadPin>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	7a7b      	ldrb	r3, [r7, #9]
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d002      	beq.n	80061b0 <wait_for_gpio_state_timeout+0x5c>
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e0      	bne.n	8006172 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fd fcca 	bl	8003b70 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80061dc:	2311      	movs	r3, #17
 80061de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 80061e4:	2340      	movs	r3, #64	; 0x40
 80061e6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	4619      	mov	r1, r3
 80061ee:	4840      	ldr	r0, [pc, #256]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 80061f0:	f7fd f8f2 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	4619      	mov	r1, r3
 80061fe:	483c      	ldr	r0, [pc, #240]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006200:	f7fd f8ea 	bl	80033d8 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8006204:	2201      	movs	r2, #1
 8006206:	2180      	movs	r1, #128	; 0x80
 8006208:	4839      	ldr	r0, [pc, #228]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 800620a:	f7fd fb3c 	bl	8003886 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 800620e:	2201      	movs	r2, #1
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	4837      	ldr	r0, [pc, #220]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006214:	f7fd fb37 	bl	8003886 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	2140      	movs	r1, #64	; 0x40
 800621e:	4834      	ldr	r0, [pc, #208]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006220:	f7ff ff98 	bl	8006154 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2201      	movs	r2, #1
 8006228:	2180      	movs	r1, #128	; 0x80
 800622a:	4831      	ldr	r0, [pc, #196]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 800622c:	f7ff ff92 	bl	8006154 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 8006230:	2200      	movs	r2, #0
 8006232:	2180      	movs	r1, #128	; 0x80
 8006234:	482e      	ldr	r0, [pc, #184]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006236:	f7fd fb26 	bl	8003886 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	2180      	movs	r1, #128	; 0x80
 8006240:	482b      	ldr	r0, [pc, #172]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006242:	f7ff ff87 	bl	8006154 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 8006246:	2200      	movs	r2, #0
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	4829      	ldr	r0, [pc, #164]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 800624c:	f7fd fb1b 	bl	8003886 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	4826      	ldr	r0, [pc, #152]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006258:	f7ff ff7c 	bl	8006154 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 800625c:	2201      	movs	r2, #1
 800625e:	2140      	movs	r1, #64	; 0x40
 8006260:	4823      	ldr	r0, [pc, #140]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006262:	f7fd fb10 	bl	8003886 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	2140      	movs	r1, #64	; 0x40
 800626c:	4820      	ldr	r0, [pc, #128]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 800626e:	f7ff ff71 	bl	8006154 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8006272:	2201      	movs	r2, #1
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	481e      	ldr	r0, [pc, #120]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006278:	f7fd fb05 	bl	8003886 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	2180      	movs	r1, #128	; 0x80
 8006282:	481b      	ldr	r0, [pc, #108]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006284:	f7ff ff66 	bl	8006154 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8006288:	2312      	movs	r3, #18
 800628a:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStructure.Alternate = GPIO_AF1_I2C1;
//    HAL_GPIO_ConfigPinAF(GPIOB, I2C1_SDA_Pin, GPIO_AF1_I2C1);
    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 8006290:	f107 0308 	add.w	r3, r7, #8
 8006294:	4619      	mov	r1, r3
 8006296:	4816      	ldr	r0, [pc, #88]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 8006298:	f7fd f89e 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4619      	mov	r1, r3
 80062a6:	4812      	ldr	r0, [pc, #72]	; (80062f0 <I2C_ClearBusyFlagErratum+0x134>)
 80062a8:	f7fd f896 	bl	80033d8 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ba:	601a      	str	r2, [r3, #0]
    asm("nop");
 80062bc:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062cc:	601a      	str	r2, [r3, #0]
    asm("nop");
 80062ce:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
    asm("nop");
 80062e0:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fd fb00 	bl	80038e8 <HAL_I2C_Init>
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40010c00 	.word	0x40010c00

080062f4 <lcd_send_cmd>:




void lcd_send_cmd (char cmd)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	4603      	mov	r3, r0
 80062fc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	f023 030f 	bic.w	r3, r3, #15
 8006304:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	f043 030c 	orr.w	r3, r3, #12
 8006312:	b2db      	uxtb	r3, r3
 8006314:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	f043 0308 	orr.w	r3, r3, #8
 800631c:	b2db      	uxtb	r3, r3
 800631e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	f043 030c 	orr.w	r3, r3, #12
 8006326:	b2db      	uxtb	r3, r3
 8006328:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	f043 0308 	orr.w	r3, r3, #8
 8006330:	b2db      	uxtb	r3, r3
 8006332:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 5000);
 8006334:	f107 0208 	add.w	r2, r7, #8
 8006338:	f241 3388 	movw	r3, #5000	; 0x1388
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2304      	movs	r3, #4
 8006340:	214e      	movs	r1, #78	; 0x4e
 8006342:	4803      	ldr	r0, [pc, #12]	; (8006350 <lcd_send_cmd+0x5c>)
 8006344:	f7fd fc44 	bl	8003bd0 <HAL_I2C_Master_Transmit>
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200002ec 	.word	0x200002ec

08006354 <lcd_send_data>:

void lcd_send_data (char data)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af02      	add	r7, sp, #8
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	f023 030f 	bic.w	r3, r3, #15
 8006364:	75fb      	strb	r3, [r7, #23]
	data_l = ((data<<4)&0xf0);
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	75bb      	strb	r3, [r7, #22]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	f043 030d 	orr.w	r3, r3, #13
 8006372:	b2db      	uxtb	r3, r3
 8006374:	733b      	strb	r3, [r7, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	f043 0309 	orr.w	r3, r3, #9
 800637c:	b2db      	uxtb	r3, r3
 800637e:	737b      	strb	r3, [r7, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8006380:	7dbb      	ldrb	r3, [r7, #22]
 8006382:	f043 030d 	orr.w	r3, r3, #13
 8006386:	b2db      	uxtb	r3, r3
 8006388:	73bb      	strb	r3, [r7, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800638a:	7dbb      	ldrb	r3, [r7, #22]
 800638c:	f043 0309 	orr.w	r3, r3, #9
 8006390:	b2db      	uxtb	r3, r3
 8006392:	73fb      	strb	r3, [r7, #15]
	int ret = HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 1000);
 8006394:	f107 020c 	add.w	r2, r7, #12
 8006398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	2304      	movs	r3, #4
 80063a0:	214e      	movs	r1, #78	; 0x4e
 80063a2:	4808      	ldr	r0, [pc, #32]	; (80063c4 <lcd_send_data+0x70>)
 80063a4:	f7fd fc14 	bl	8003bd0 <HAL_I2C_Master_Transmit>
 80063a8:	4603      	mov	r3, r0
 80063aa:	613b      	str	r3, [r7, #16]
	if (HAL_BUSY == ret)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d104      	bne.n	80063bc <lcd_send_data+0x68>
    {
        I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80063b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063b6:	4803      	ldr	r0, [pc, #12]	; (80063c4 <lcd_send_data+0x70>)
 80063b8:	f7ff ff00 	bl	80061bc <I2C_ClearBusyFlagErratum>
    }

}
 80063bc:	bf00      	nop
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200002ec 	.word	0x200002ec

080063c8 <lcd_clear>:

void lcd_clear (void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80063ce:	2080      	movs	r0, #128	; 0x80
 80063d0:	f7ff ff90 	bl	80062f4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	e005      	b.n	80063e6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80063da:	2020      	movs	r0, #32
 80063dc:	f7ff ffba 	bl	8006354 <lcd_send_data>
	for (int i=0; i<70; i++)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3301      	adds	r3, #1
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b45      	cmp	r3, #69	; 0x45
 80063ea:	ddf6      	ble.n	80063da <lcd_clear+0x12>
	}
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
    switch (row)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <lcd_put_cur+0x18>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d005      	beq.n	8006418 <lcd_put_cur+0x22>
 800640c:	e009      	b.n	8006422 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006414:	603b      	str	r3, [r7, #0]
            break;
 8006416:	e004      	b.n	8006422 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641e:	603b      	str	r3, [r7, #0]
            break;
 8006420:	bf00      	nop
    }

    lcd_send_cmd (col);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ff64 	bl	80062f4 <lcd_send_cmd>
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <lcd_init>:


void lcd_init (void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8006438:	2032      	movs	r0, #50	; 0x32
 800643a:	f7fc fa65 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x30);
 800643e:	2030      	movs	r0, #48	; 0x30
 8006440:	f7ff ff58 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8006444:	2005      	movs	r0, #5
 8006446:	f7fc fa5f 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x30);
 800644a:	2030      	movs	r0, #48	; 0x30
 800644c:	f7ff ff52 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8006450:	2001      	movs	r0, #1
 8006452:	f7fc fa59 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x30);
 8006456:	2030      	movs	r0, #48	; 0x30
 8006458:	f7ff ff4c 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(10);
 800645c:	200a      	movs	r0, #10
 800645e:	f7fc fa53 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8006462:	2020      	movs	r0, #32
 8006464:	f7ff ff46 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(10);
 8006468:	200a      	movs	r0, #10
 800646a:	f7fc fa4d 	bl	8002908 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800646e:	2028      	movs	r0, #40	; 0x28
 8006470:	f7ff ff40 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(1);
 8006474:	2001      	movs	r0, #1
 8006476:	f7fc fa47 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800647a:	2008      	movs	r0, #8
 800647c:	f7ff ff3a 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(1);
 8006480:	2001      	movs	r0, #1
 8006482:	f7fc fa41 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8006486:	2001      	movs	r0, #1
 8006488:	f7ff ff34 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(1);
 800648c:	2001      	movs	r0, #1
 800648e:	f7fc fa3b 	bl	8002908 <HAL_Delay>
	HAL_Delay(1);
 8006492:	2001      	movs	r0, #1
 8006494:	f7fc fa38 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8006498:	2006      	movs	r0, #6
 800649a:	f7ff ff2b 	bl	80062f4 <lcd_send_cmd>
	HAL_Delay(1);
 800649e:	2001      	movs	r0, #1
 80064a0:	f7fc fa32 	bl	8002908 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80064a4:	200c      	movs	r0, #12
 80064a6:	f7ff ff25 	bl	80062f4 <lcd_send_cmd>
}
 80064aa:	bf00      	nop
 80064ac:	bd80      	pop	{r7, pc}

080064ae <lcd_send_string>:

void lcd_send_string (char *str)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80064b6:	e006      	b.n	80064c6 <lcd_send_string+0x18>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff47 	bl	8006354 <lcd_send_data>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1f4      	bne.n	80064b8 <lcd_send_string+0xa>
}
 80064ce:	bf00      	nop
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <siprintf>:
 80064d8:	b40e      	push	{r1, r2, r3}
 80064da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064de:	b500      	push	{lr}
 80064e0:	b09c      	sub	sp, #112	; 0x70
 80064e2:	ab1d      	add	r3, sp, #116	; 0x74
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	9006      	str	r0, [sp, #24]
 80064e8:	9107      	str	r1, [sp, #28]
 80064ea:	9104      	str	r1, [sp, #16]
 80064ec:	4808      	ldr	r0, [pc, #32]	; (8006510 <siprintf+0x38>)
 80064ee:	4909      	ldr	r1, [pc, #36]	; (8006514 <siprintf+0x3c>)
 80064f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f4:	9105      	str	r1, [sp, #20]
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	a902      	add	r1, sp, #8
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	f000 f9ba 	bl	8006874 <_svfiprintf_r>
 8006500:	2200      	movs	r2, #0
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	b01c      	add	sp, #112	; 0x70
 8006508:	f85d eb04 	ldr.w	lr, [sp], #4
 800650c:	b003      	add	sp, #12
 800650e:	4770      	bx	lr
 8006510:	20000268 	.word	0x20000268
 8006514:	ffff0208 	.word	0xffff0208

08006518 <siscanf>:
 8006518:	b40e      	push	{r1, r2, r3}
 800651a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800651e:	b530      	push	{r4, r5, lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	ac1f      	add	r4, sp, #124	; 0x7c
 8006524:	f854 5b04 	ldr.w	r5, [r4], #4
 8006528:	f8ad 2014 	strh.w	r2, [sp, #20]
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f7f9 fe16 	bl	8000160 <strlen>
 8006534:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <siscanf+0x4c>)
 8006536:	9003      	str	r0, [sp, #12]
 8006538:	930b      	str	r3, [sp, #44]	; 0x2c
 800653a:	2300      	movs	r3, #0
 800653c:	930f      	str	r3, [sp, #60]	; 0x3c
 800653e:	9314      	str	r3, [sp, #80]	; 0x50
 8006540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006544:	9007      	str	r0, [sp, #28]
 8006546:	4808      	ldr	r0, [pc, #32]	; (8006568 <siscanf+0x50>)
 8006548:	f8ad 3016 	strh.w	r3, [sp, #22]
 800654c:	462a      	mov	r2, r5
 800654e:	4623      	mov	r3, r4
 8006550:	a902      	add	r1, sp, #8
 8006552:	6800      	ldr	r0, [r0, #0]
 8006554:	9401      	str	r4, [sp, #4]
 8006556:	f000 fae5 	bl	8006b24 <__ssvfiscanf_r>
 800655a:	b01c      	add	sp, #112	; 0x70
 800655c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006560:	b003      	add	sp, #12
 8006562:	4770      	bx	lr
 8006564:	0800656d 	.word	0x0800656d
 8006568:	20000268 	.word	0x20000268

0800656c <__seofread>:
 800656c:	2000      	movs	r0, #0
 800656e:	4770      	bx	lr

08006570 <memset>:
 8006570:	4603      	mov	r3, r0
 8006572:	4402      	add	r2, r0
 8006574:	4293      	cmp	r3, r2
 8006576:	d100      	bne.n	800657a <memset+0xa>
 8006578:	4770      	bx	lr
 800657a:	f803 1b01 	strb.w	r1, [r3], #1
 800657e:	e7f9      	b.n	8006574 <memset+0x4>

08006580 <__errno>:
 8006580:	4b01      	ldr	r3, [pc, #4]	; (8006588 <__errno+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000268 	.word	0x20000268

0800658c <__libc_init_array>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	2600      	movs	r6, #0
 8006590:	4d0c      	ldr	r5, [pc, #48]	; (80065c4 <__libc_init_array+0x38>)
 8006592:	4c0d      	ldr	r4, [pc, #52]	; (80065c8 <__libc_init_array+0x3c>)
 8006594:	1b64      	subs	r4, r4, r5
 8006596:	10a4      	asrs	r4, r4, #2
 8006598:	42a6      	cmp	r6, r4
 800659a:	d109      	bne.n	80065b0 <__libc_init_array+0x24>
 800659c:	f001 f8fe 	bl	800779c <_init>
 80065a0:	2600      	movs	r6, #0
 80065a2:	4d0a      	ldr	r5, [pc, #40]	; (80065cc <__libc_init_array+0x40>)
 80065a4:	4c0a      	ldr	r4, [pc, #40]	; (80065d0 <__libc_init_array+0x44>)
 80065a6:	1b64      	subs	r4, r4, r5
 80065a8:	10a4      	asrs	r4, r4, #2
 80065aa:	42a6      	cmp	r6, r4
 80065ac:	d105      	bne.n	80065ba <__libc_init_array+0x2e>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b4:	4798      	blx	r3
 80065b6:	3601      	adds	r6, #1
 80065b8:	e7ee      	b.n	8006598 <__libc_init_array+0xc>
 80065ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80065be:	4798      	blx	r3
 80065c0:	3601      	adds	r6, #1
 80065c2:	e7f2      	b.n	80065aa <__libc_init_array+0x1e>
 80065c4:	08007a3c 	.word	0x08007a3c
 80065c8:	08007a3c 	.word	0x08007a3c
 80065cc:	08007a3c 	.word	0x08007a3c
 80065d0:	08007a40 	.word	0x08007a40

080065d4 <__retarget_lock_acquire_recursive>:
 80065d4:	4770      	bx	lr

080065d6 <__retarget_lock_release_recursive>:
 80065d6:	4770      	bx	lr

080065d8 <_free_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4605      	mov	r5, r0
 80065dc:	2900      	cmp	r1, #0
 80065de:	d040      	beq.n	8006662 <_free_r+0x8a>
 80065e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e4:	1f0c      	subs	r4, r1, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfb8      	it	lt
 80065ea:	18e4      	addlt	r4, r4, r3
 80065ec:	f000 f8dc 	bl	80067a8 <__malloc_lock>
 80065f0:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <_free_r+0x8c>)
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	b933      	cbnz	r3, 8006604 <_free_r+0x2c>
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6014      	str	r4, [r2, #0]
 80065fa:	4628      	mov	r0, r5
 80065fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006600:	f000 b8d8 	b.w	80067b4 <__malloc_unlock>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d908      	bls.n	800661a <_free_r+0x42>
 8006608:	6820      	ldr	r0, [r4, #0]
 800660a:	1821      	adds	r1, r4, r0
 800660c:	428b      	cmp	r3, r1
 800660e:	bf01      	itttt	eq
 8006610:	6819      	ldreq	r1, [r3, #0]
 8006612:	685b      	ldreq	r3, [r3, #4]
 8006614:	1809      	addeq	r1, r1, r0
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	e7ed      	b.n	80065f6 <_free_r+0x1e>
 800661a:	461a      	mov	r2, r3
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b10b      	cbz	r3, 8006624 <_free_r+0x4c>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d9fa      	bls.n	800661a <_free_r+0x42>
 8006624:	6811      	ldr	r1, [r2, #0]
 8006626:	1850      	adds	r0, r2, r1
 8006628:	42a0      	cmp	r0, r4
 800662a:	d10b      	bne.n	8006644 <_free_r+0x6c>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	4401      	add	r1, r0
 8006630:	1850      	adds	r0, r2, r1
 8006632:	4283      	cmp	r3, r0
 8006634:	6011      	str	r1, [r2, #0]
 8006636:	d1e0      	bne.n	80065fa <_free_r+0x22>
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4408      	add	r0, r1
 800663e:	6010      	str	r0, [r2, #0]
 8006640:	6053      	str	r3, [r2, #4]
 8006642:	e7da      	b.n	80065fa <_free_r+0x22>
 8006644:	d902      	bls.n	800664c <_free_r+0x74>
 8006646:	230c      	movs	r3, #12
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	e7d6      	b.n	80065fa <_free_r+0x22>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	1821      	adds	r1, r4, r0
 8006650:	428b      	cmp	r3, r1
 8006652:	bf01      	itttt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	1809      	addeq	r1, r1, r0
 800665a:	6021      	streq	r1, [r4, #0]
 800665c:	6063      	str	r3, [r4, #4]
 800665e:	6054      	str	r4, [r2, #4]
 8006660:	e7cb      	b.n	80065fa <_free_r+0x22>
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200007ec 	.word	0x200007ec

08006668 <sbrk_aligned>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	4e0e      	ldr	r6, [pc, #56]	; (80066a4 <sbrk_aligned+0x3c>)
 800666c:	460c      	mov	r4, r1
 800666e:	6831      	ldr	r1, [r6, #0]
 8006670:	4605      	mov	r5, r0
 8006672:	b911      	cbnz	r1, 800667a <sbrk_aligned+0x12>
 8006674:	f000 ff3a 	bl	80074ec <_sbrk_r>
 8006678:	6030      	str	r0, [r6, #0]
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 ff35 	bl	80074ec <_sbrk_r>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	d00a      	beq.n	800669c <sbrk_aligned+0x34>
 8006686:	1cc4      	adds	r4, r0, #3
 8006688:	f024 0403 	bic.w	r4, r4, #3
 800668c:	42a0      	cmp	r0, r4
 800668e:	d007      	beq.n	80066a0 <sbrk_aligned+0x38>
 8006690:	1a21      	subs	r1, r4, r0
 8006692:	4628      	mov	r0, r5
 8006694:	f000 ff2a 	bl	80074ec <_sbrk_r>
 8006698:	3001      	adds	r0, #1
 800669a:	d101      	bne.n	80066a0 <sbrk_aligned+0x38>
 800669c:	f04f 34ff 	mov.w	r4, #4294967295
 80066a0:	4620      	mov	r0, r4
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	200007f0 	.word	0x200007f0

080066a8 <_malloc_r>:
 80066a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	1ccd      	adds	r5, r1, #3
 80066ae:	f025 0503 	bic.w	r5, r5, #3
 80066b2:	3508      	adds	r5, #8
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	bf38      	it	cc
 80066b8:	250c      	movcc	r5, #12
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	4607      	mov	r7, r0
 80066be:	db01      	blt.n	80066c4 <_malloc_r+0x1c>
 80066c0:	42a9      	cmp	r1, r5
 80066c2:	d905      	bls.n	80066d0 <_malloc_r+0x28>
 80066c4:	230c      	movs	r3, #12
 80066c6:	2600      	movs	r6, #0
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4630      	mov	r0, r6
 80066cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067a4 <_malloc_r+0xfc>
 80066d4:	f000 f868 	bl	80067a8 <__malloc_lock>
 80066d8:	f8d8 3000 	ldr.w	r3, [r8]
 80066dc:	461c      	mov	r4, r3
 80066de:	bb5c      	cbnz	r4, 8006738 <_malloc_r+0x90>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4638      	mov	r0, r7
 80066e4:	f7ff ffc0 	bl	8006668 <sbrk_aligned>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	4604      	mov	r4, r0
 80066ec:	d155      	bne.n	800679a <_malloc_r+0xf2>
 80066ee:	f8d8 4000 	ldr.w	r4, [r8]
 80066f2:	4626      	mov	r6, r4
 80066f4:	2e00      	cmp	r6, #0
 80066f6:	d145      	bne.n	8006784 <_malloc_r+0xdc>
 80066f8:	2c00      	cmp	r4, #0
 80066fa:	d048      	beq.n	800678e <_malloc_r+0xe6>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	4631      	mov	r1, r6
 8006700:	4638      	mov	r0, r7
 8006702:	eb04 0903 	add.w	r9, r4, r3
 8006706:	f000 fef1 	bl	80074ec <_sbrk_r>
 800670a:	4581      	cmp	r9, r0
 800670c:	d13f      	bne.n	800678e <_malloc_r+0xe6>
 800670e:	6821      	ldr	r1, [r4, #0]
 8006710:	4638      	mov	r0, r7
 8006712:	1a6d      	subs	r5, r5, r1
 8006714:	4629      	mov	r1, r5
 8006716:	f7ff ffa7 	bl	8006668 <sbrk_aligned>
 800671a:	3001      	adds	r0, #1
 800671c:	d037      	beq.n	800678e <_malloc_r+0xe6>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	442b      	add	r3, r5
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	f8d8 3000 	ldr.w	r3, [r8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d038      	beq.n	800679e <_malloc_r+0xf6>
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	42a2      	cmp	r2, r4
 8006730:	d12b      	bne.n	800678a <_malloc_r+0xe2>
 8006732:	2200      	movs	r2, #0
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	e00f      	b.n	8006758 <_malloc_r+0xb0>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	1b52      	subs	r2, r2, r5
 800673c:	d41f      	bmi.n	800677e <_malloc_r+0xd6>
 800673e:	2a0b      	cmp	r2, #11
 8006740:	d917      	bls.n	8006772 <_malloc_r+0xca>
 8006742:	1961      	adds	r1, r4, r5
 8006744:	42a3      	cmp	r3, r4
 8006746:	6025      	str	r5, [r4, #0]
 8006748:	bf18      	it	ne
 800674a:	6059      	strne	r1, [r3, #4]
 800674c:	6863      	ldr	r3, [r4, #4]
 800674e:	bf08      	it	eq
 8006750:	f8c8 1000 	streq.w	r1, [r8]
 8006754:	5162      	str	r2, [r4, r5]
 8006756:	604b      	str	r3, [r1, #4]
 8006758:	4638      	mov	r0, r7
 800675a:	f104 060b 	add.w	r6, r4, #11
 800675e:	f000 f829 	bl	80067b4 <__malloc_unlock>
 8006762:	f026 0607 	bic.w	r6, r6, #7
 8006766:	1d23      	adds	r3, r4, #4
 8006768:	1af2      	subs	r2, r6, r3
 800676a:	d0ae      	beq.n	80066ca <_malloc_r+0x22>
 800676c:	1b9b      	subs	r3, r3, r6
 800676e:	50a3      	str	r3, [r4, r2]
 8006770:	e7ab      	b.n	80066ca <_malloc_r+0x22>
 8006772:	42a3      	cmp	r3, r4
 8006774:	6862      	ldr	r2, [r4, #4]
 8006776:	d1dd      	bne.n	8006734 <_malloc_r+0x8c>
 8006778:	f8c8 2000 	str.w	r2, [r8]
 800677c:	e7ec      	b.n	8006758 <_malloc_r+0xb0>
 800677e:	4623      	mov	r3, r4
 8006780:	6864      	ldr	r4, [r4, #4]
 8006782:	e7ac      	b.n	80066de <_malloc_r+0x36>
 8006784:	4634      	mov	r4, r6
 8006786:	6876      	ldr	r6, [r6, #4]
 8006788:	e7b4      	b.n	80066f4 <_malloc_r+0x4c>
 800678a:	4613      	mov	r3, r2
 800678c:	e7cc      	b.n	8006728 <_malloc_r+0x80>
 800678e:	230c      	movs	r3, #12
 8006790:	4638      	mov	r0, r7
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	f000 f80e 	bl	80067b4 <__malloc_unlock>
 8006798:	e797      	b.n	80066ca <_malloc_r+0x22>
 800679a:	6025      	str	r5, [r4, #0]
 800679c:	e7dc      	b.n	8006758 <_malloc_r+0xb0>
 800679e:	605b      	str	r3, [r3, #4]
 80067a0:	deff      	udf	#255	; 0xff
 80067a2:	bf00      	nop
 80067a4:	200007ec 	.word	0x200007ec

080067a8 <__malloc_lock>:
 80067a8:	4801      	ldr	r0, [pc, #4]	; (80067b0 <__malloc_lock+0x8>)
 80067aa:	f7ff bf13 	b.w	80065d4 <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	200007e8 	.word	0x200007e8

080067b4 <__malloc_unlock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__malloc_unlock+0x8>)
 80067b6:	f7ff bf0e 	b.w	80065d6 <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	200007e8 	.word	0x200007e8

080067c0 <__ssputs_r>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	461f      	mov	r7, r3
 80067c6:	688e      	ldr	r6, [r1, #8]
 80067c8:	4682      	mov	sl, r0
 80067ca:	42be      	cmp	r6, r7
 80067cc:	460c      	mov	r4, r1
 80067ce:	4690      	mov	r8, r2
 80067d0:	680b      	ldr	r3, [r1, #0]
 80067d2:	d82c      	bhi.n	800682e <__ssputs_r+0x6e>
 80067d4:	898a      	ldrh	r2, [r1, #12]
 80067d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067da:	d026      	beq.n	800682a <__ssputs_r+0x6a>
 80067dc:	6965      	ldr	r5, [r4, #20]
 80067de:	6909      	ldr	r1, [r1, #16]
 80067e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e4:	eba3 0901 	sub.w	r9, r3, r1
 80067e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067ec:	1c7b      	adds	r3, r7, #1
 80067ee:	444b      	add	r3, r9
 80067f0:	106d      	asrs	r5, r5, #1
 80067f2:	429d      	cmp	r5, r3
 80067f4:	bf38      	it	cc
 80067f6:	461d      	movcc	r5, r3
 80067f8:	0553      	lsls	r3, r2, #21
 80067fa:	d527      	bpl.n	800684c <__ssputs_r+0x8c>
 80067fc:	4629      	mov	r1, r5
 80067fe:	f7ff ff53 	bl	80066a8 <_malloc_r>
 8006802:	4606      	mov	r6, r0
 8006804:	b360      	cbz	r0, 8006860 <__ssputs_r+0xa0>
 8006806:	464a      	mov	r2, r9
 8006808:	6921      	ldr	r1, [r4, #16]
 800680a:	f000 fe8d 	bl	8007528 <memcpy>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	6126      	str	r6, [r4, #16]
 800681c:	444e      	add	r6, r9
 800681e:	6026      	str	r6, [r4, #0]
 8006820:	463e      	mov	r6, r7
 8006822:	6165      	str	r5, [r4, #20]
 8006824:	eba5 0509 	sub.w	r5, r5, r9
 8006828:	60a5      	str	r5, [r4, #8]
 800682a:	42be      	cmp	r6, r7
 800682c:	d900      	bls.n	8006830 <__ssputs_r+0x70>
 800682e:	463e      	mov	r6, r7
 8006830:	4632      	mov	r2, r6
 8006832:	4641      	mov	r1, r8
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	f000 fe3e 	bl	80074b6 <memmove>
 800683a:	2000      	movs	r0, #0
 800683c:	68a3      	ldr	r3, [r4, #8]
 800683e:	1b9b      	subs	r3, r3, r6
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	4433      	add	r3, r6
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	462a      	mov	r2, r5
 800684e:	f000 fe79 	bl	8007544 <_realloc_r>
 8006852:	4606      	mov	r6, r0
 8006854:	2800      	cmp	r0, #0
 8006856:	d1e0      	bne.n	800681a <__ssputs_r+0x5a>
 8006858:	4650      	mov	r0, sl
 800685a:	6921      	ldr	r1, [r4, #16]
 800685c:	f7ff febc 	bl	80065d8 <_free_r>
 8006860:	230c      	movs	r3, #12
 8006862:	f8ca 3000 	str.w	r3, [sl]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	e7e9      	b.n	8006848 <__ssputs_r+0x88>

08006874 <_svfiprintf_r>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	4698      	mov	r8, r3
 800687a:	898b      	ldrh	r3, [r1, #12]
 800687c:	4607      	mov	r7, r0
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	460d      	mov	r5, r1
 8006882:	4614      	mov	r4, r2
 8006884:	b09d      	sub	sp, #116	; 0x74
 8006886:	d50e      	bpl.n	80068a6 <_svfiprintf_r+0x32>
 8006888:	690b      	ldr	r3, [r1, #16]
 800688a:	b963      	cbnz	r3, 80068a6 <_svfiprintf_r+0x32>
 800688c:	2140      	movs	r1, #64	; 0x40
 800688e:	f7ff ff0b 	bl	80066a8 <_malloc_r>
 8006892:	6028      	str	r0, [r5, #0]
 8006894:	6128      	str	r0, [r5, #16]
 8006896:	b920      	cbnz	r0, 80068a2 <_svfiprintf_r+0x2e>
 8006898:	230c      	movs	r3, #12
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	e0d0      	b.n	8006a44 <_svfiprintf_r+0x1d0>
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	616b      	str	r3, [r5, #20]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9309      	str	r3, [sp, #36]	; 0x24
 80068aa:	2320      	movs	r3, #32
 80068ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b0:	2330      	movs	r3, #48	; 0x30
 80068b2:	f04f 0901 	mov.w	r9, #1
 80068b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006a5c <_svfiprintf_r+0x1e8>
 80068be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c2:	4623      	mov	r3, r4
 80068c4:	469a      	mov	sl, r3
 80068c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ca:	b10a      	cbz	r2, 80068d0 <_svfiprintf_r+0x5c>
 80068cc:	2a25      	cmp	r2, #37	; 0x25
 80068ce:	d1f9      	bne.n	80068c4 <_svfiprintf_r+0x50>
 80068d0:	ebba 0b04 	subs.w	fp, sl, r4
 80068d4:	d00b      	beq.n	80068ee <_svfiprintf_r+0x7a>
 80068d6:	465b      	mov	r3, fp
 80068d8:	4622      	mov	r2, r4
 80068da:	4629      	mov	r1, r5
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff ff6f 	bl	80067c0 <__ssputs_r>
 80068e2:	3001      	adds	r0, #1
 80068e4:	f000 80a9 	beq.w	8006a3a <_svfiprintf_r+0x1c6>
 80068e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ea:	445a      	add	r2, fp
 80068ec:	9209      	str	r2, [sp, #36]	; 0x24
 80068ee:	f89a 3000 	ldrb.w	r3, [sl]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80a1 	beq.w	8006a3a <_svfiprintf_r+0x1c6>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006902:	f10a 0a01 	add.w	sl, sl, #1
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	9307      	str	r3, [sp, #28]
 800690a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800690e:	931a      	str	r3, [sp, #104]	; 0x68
 8006910:	4654      	mov	r4, sl
 8006912:	2205      	movs	r2, #5
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	4850      	ldr	r0, [pc, #320]	; (8006a5c <_svfiprintf_r+0x1e8>)
 800691a:	f000 fdf7 	bl	800750c <memchr>
 800691e:	9a04      	ldr	r2, [sp, #16]
 8006920:	b9d8      	cbnz	r0, 800695a <_svfiprintf_r+0xe6>
 8006922:	06d0      	lsls	r0, r2, #27
 8006924:	bf44      	itt	mi
 8006926:	2320      	movmi	r3, #32
 8006928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692c:	0711      	lsls	r1, r2, #28
 800692e:	bf44      	itt	mi
 8006930:	232b      	movmi	r3, #43	; 0x2b
 8006932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006936:	f89a 3000 	ldrb.w	r3, [sl]
 800693a:	2b2a      	cmp	r3, #42	; 0x2a
 800693c:	d015      	beq.n	800696a <_svfiprintf_r+0xf6>
 800693e:	4654      	mov	r4, sl
 8006940:	2000      	movs	r0, #0
 8006942:	f04f 0c0a 	mov.w	ip, #10
 8006946:	9a07      	ldr	r2, [sp, #28]
 8006948:	4621      	mov	r1, r4
 800694a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694e:	3b30      	subs	r3, #48	; 0x30
 8006950:	2b09      	cmp	r3, #9
 8006952:	d94d      	bls.n	80069f0 <_svfiprintf_r+0x17c>
 8006954:	b1b0      	cbz	r0, 8006984 <_svfiprintf_r+0x110>
 8006956:	9207      	str	r2, [sp, #28]
 8006958:	e014      	b.n	8006984 <_svfiprintf_r+0x110>
 800695a:	eba0 0308 	sub.w	r3, r0, r8
 800695e:	fa09 f303 	lsl.w	r3, r9, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	46a2      	mov	sl, r4
 8006966:	9304      	str	r3, [sp, #16]
 8006968:	e7d2      	b.n	8006910 <_svfiprintf_r+0x9c>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	1d19      	adds	r1, r3, #4
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	9103      	str	r1, [sp, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	bfbb      	ittet	lt
 8006976:	425b      	neglt	r3, r3
 8006978:	f042 0202 	orrlt.w	r2, r2, #2
 800697c:	9307      	strge	r3, [sp, #28]
 800697e:	9307      	strlt	r3, [sp, #28]
 8006980:	bfb8      	it	lt
 8006982:	9204      	strlt	r2, [sp, #16]
 8006984:	7823      	ldrb	r3, [r4, #0]
 8006986:	2b2e      	cmp	r3, #46	; 0x2e
 8006988:	d10c      	bne.n	80069a4 <_svfiprintf_r+0x130>
 800698a:	7863      	ldrb	r3, [r4, #1]
 800698c:	2b2a      	cmp	r3, #42	; 0x2a
 800698e:	d134      	bne.n	80069fa <_svfiprintf_r+0x186>
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	3402      	adds	r4, #2
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	9203      	str	r2, [sp, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfb8      	it	lt
 800699e:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006a60 <_svfiprintf_r+0x1ec>
 80069a8:	2203      	movs	r2, #3
 80069aa:	4650      	mov	r0, sl
 80069ac:	7821      	ldrb	r1, [r4, #0]
 80069ae:	f000 fdad 	bl	800750c <memchr>
 80069b2:	b138      	cbz	r0, 80069c4 <_svfiprintf_r+0x150>
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	eba0 000a 	sub.w	r0, r0, sl
 80069bc:	4082      	lsls	r2, r0
 80069be:	4313      	orrs	r3, r2
 80069c0:	3401      	adds	r4, #1
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c8:	2206      	movs	r2, #6
 80069ca:	4826      	ldr	r0, [pc, #152]	; (8006a64 <_svfiprintf_r+0x1f0>)
 80069cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d0:	f000 fd9c 	bl	800750c <memchr>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d038      	beq.n	8006a4a <_svfiprintf_r+0x1d6>
 80069d8:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <_svfiprintf_r+0x1f4>)
 80069da:	bb1b      	cbnz	r3, 8006a24 <_svfiprintf_r+0x1b0>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	3307      	adds	r3, #7
 80069e0:	f023 0307 	bic.w	r3, r3, #7
 80069e4:	3308      	adds	r3, #8
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ea:	4433      	add	r3, r6
 80069ec:	9309      	str	r3, [sp, #36]	; 0x24
 80069ee:	e768      	b.n	80068c2 <_svfiprintf_r+0x4e>
 80069f0:	460c      	mov	r4, r1
 80069f2:	2001      	movs	r0, #1
 80069f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f8:	e7a6      	b.n	8006948 <_svfiprintf_r+0xd4>
 80069fa:	2300      	movs	r3, #0
 80069fc:	f04f 0c0a 	mov.w	ip, #10
 8006a00:	4619      	mov	r1, r3
 8006a02:	3401      	adds	r4, #1
 8006a04:	9305      	str	r3, [sp, #20]
 8006a06:	4620      	mov	r0, r4
 8006a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a0c:	3a30      	subs	r2, #48	; 0x30
 8006a0e:	2a09      	cmp	r2, #9
 8006a10:	d903      	bls.n	8006a1a <_svfiprintf_r+0x1a6>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0c6      	beq.n	80069a4 <_svfiprintf_r+0x130>
 8006a16:	9105      	str	r1, [sp, #20]
 8006a18:	e7c4      	b.n	80069a4 <_svfiprintf_r+0x130>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a22:	e7f0      	b.n	8006a06 <_svfiprintf_r+0x192>
 8006a24:	ab03      	add	r3, sp, #12
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <_svfiprintf_r+0x1f8>)
 8006a2e:	a904      	add	r1, sp, #16
 8006a30:	f3af 8000 	nop.w
 8006a34:	1c42      	adds	r2, r0, #1
 8006a36:	4606      	mov	r6, r0
 8006a38:	d1d6      	bne.n	80069e8 <_svfiprintf_r+0x174>
 8006a3a:	89ab      	ldrh	r3, [r5, #12]
 8006a3c:	065b      	lsls	r3, r3, #25
 8006a3e:	f53f af2d 	bmi.w	800689c <_svfiprintf_r+0x28>
 8006a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a44:	b01d      	add	sp, #116	; 0x74
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	ab03      	add	r3, sp, #12
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	462a      	mov	r2, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <_svfiprintf_r+0x1f8>)
 8006a54:	a904      	add	r1, sp, #16
 8006a56:	f000 fa4f 	bl	8006ef8 <_printf_i>
 8006a5a:	e7eb      	b.n	8006a34 <_svfiprintf_r+0x1c0>
 8006a5c:	080078ea 	.word	0x080078ea
 8006a60:	080078f0 	.word	0x080078f0
 8006a64:	080078f4 	.word	0x080078f4
 8006a68:	00000000 	.word	0x00000000
 8006a6c:	080067c1 	.word	0x080067c1

08006a70 <_sungetc_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	1c4b      	adds	r3, r1, #1
 8006a74:	4614      	mov	r4, r2
 8006a76:	d103      	bne.n	8006a80 <_sungetc_r+0x10>
 8006a78:	f04f 35ff 	mov.w	r5, #4294967295
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	8993      	ldrh	r3, [r2, #12]
 8006a82:	b2cd      	uxtb	r5, r1
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	8193      	strh	r3, [r2, #12]
 8006a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a8c:	6852      	ldr	r2, [r2, #4]
 8006a8e:	b18b      	cbz	r3, 8006ab4 <_sungetc_r+0x44>
 8006a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a92:	4293      	cmp	r3, r2
 8006a94:	dd08      	ble.n	8006aa8 <_sungetc_r+0x38>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006aa0:	6863      	ldr	r3, [r4, #4]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	e7e9      	b.n	8006a7c <_sungetc_r+0xc>
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	f000 fccc 	bl	8007446 <__submore>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0f1      	beq.n	8006a96 <_sungetc_r+0x26>
 8006ab2:	e7e1      	b.n	8006a78 <_sungetc_r+0x8>
 8006ab4:	6921      	ldr	r1, [r4, #16]
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	b151      	cbz	r1, 8006ad0 <_sungetc_r+0x60>
 8006aba:	4299      	cmp	r1, r3
 8006abc:	d208      	bcs.n	8006ad0 <_sungetc_r+0x60>
 8006abe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006ac2:	42a9      	cmp	r1, r5
 8006ac4:	d104      	bne.n	8006ad0 <_sungetc_r+0x60>
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	3201      	adds	r2, #1
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	6062      	str	r2, [r4, #4]
 8006ace:	e7d5      	b.n	8006a7c <_sungetc_r+0xc>
 8006ad0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8006ada:	2303      	movs	r3, #3
 8006adc:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ade:	4623      	mov	r3, r4
 8006ae0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7dc      	b.n	8006aa4 <_sungetc_r+0x34>

08006aea <__ssrefill_r>:
 8006aea:	b510      	push	{r4, lr}
 8006aec:	460c      	mov	r4, r1
 8006aee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006af0:	b169      	cbz	r1, 8006b0e <__ssrefill_r+0x24>
 8006af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af6:	4299      	cmp	r1, r3
 8006af8:	d001      	beq.n	8006afe <__ssrefill_r+0x14>
 8006afa:	f7ff fd6d 	bl	80065d8 <_free_r>
 8006afe:	2000      	movs	r0, #0
 8006b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b02:	6360      	str	r0, [r4, #52]	; 0x34
 8006b04:	6063      	str	r3, [r4, #4]
 8006b06:	b113      	cbz	r3, 8006b0e <__ssrefill_r+0x24>
 8006b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	2300      	movs	r3, #0
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0320 	orr.w	r3, r3, #32
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7f3      	b.n	8006b0c <__ssrefill_r+0x22>

08006b24 <__ssvfiscanf_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	460c      	mov	r4, r1
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006b32:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006b36:	49a6      	ldr	r1, [pc, #664]	; (8006dd0 <__ssvfiscanf_r+0x2ac>)
 8006b38:	f10d 0804 	add.w	r8, sp, #4
 8006b3c:	91a0      	str	r1, [sp, #640]	; 0x280
 8006b3e:	49a5      	ldr	r1, [pc, #660]	; (8006dd4 <__ssvfiscanf_r+0x2b0>)
 8006b40:	4fa5      	ldr	r7, [pc, #660]	; (8006dd8 <__ssvfiscanf_r+0x2b4>)
 8006b42:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006ddc <__ssvfiscanf_r+0x2b8>
 8006b46:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006b4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	7813      	ldrb	r3, [r2, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 815a 	beq.w	8006e0a <__ssvfiscanf_r+0x2e6>
 8006b56:	5cf9      	ldrb	r1, [r7, r3]
 8006b58:	1c55      	adds	r5, r2, #1
 8006b5a:	f011 0108 	ands.w	r1, r1, #8
 8006b5e:	d019      	beq.n	8006b94 <__ssvfiscanf_r+0x70>
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd0f      	ble.n	8006b86 <__ssvfiscanf_r+0x62>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	5cba      	ldrb	r2, [r7, r2]
 8006b6c:	0712      	lsls	r2, r2, #28
 8006b6e:	d401      	bmi.n	8006b74 <__ssvfiscanf_r+0x50>
 8006b70:	462a      	mov	r2, r5
 8006b72:	e7ec      	b.n	8006b4e <__ssvfiscanf_r+0x2a>
 8006b74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b76:	3301      	adds	r3, #1
 8006b78:	3201      	adds	r2, #1
 8006b7a:	9245      	str	r2, [sp, #276]	; 0x114
 8006b7c:	6862      	ldr	r2, [r4, #4]
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	3a01      	subs	r2, #1
 8006b82:	6062      	str	r2, [r4, #4]
 8006b84:	e7ec      	b.n	8006b60 <__ssvfiscanf_r+0x3c>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4630      	mov	r0, r6
 8006b8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b8c:	4798      	blx	r3
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0e9      	beq.n	8006b66 <__ssvfiscanf_r+0x42>
 8006b92:	e7ed      	b.n	8006b70 <__ssvfiscanf_r+0x4c>
 8006b94:	2b25      	cmp	r3, #37	; 0x25
 8006b96:	d012      	beq.n	8006bbe <__ssvfiscanf_r+0x9a>
 8006b98:	469a      	mov	sl, r3
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f340 8092 	ble.w	8006cc6 <__ssvfiscanf_r+0x1a2>
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	7813      	ldrb	r3, [r2, #0]
 8006ba6:	4553      	cmp	r3, sl
 8006ba8:	f040 812f 	bne.w	8006e0a <__ssvfiscanf_r+0x2e6>
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	3201      	adds	r2, #1
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	6063      	str	r3, [r4, #4]
 8006bb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	9345      	str	r3, [sp, #276]	; 0x114
 8006bbc:	e7d8      	b.n	8006b70 <__ssvfiscanf_r+0x4c>
 8006bbe:	9141      	str	r1, [sp, #260]	; 0x104
 8006bc0:	9143      	str	r1, [sp, #268]	; 0x10c
 8006bc2:	7853      	ldrb	r3, [r2, #1]
 8006bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc6:	bf04      	itt	eq
 8006bc8:	2310      	moveq	r3, #16
 8006bca:	1c95      	addeq	r5, r2, #2
 8006bcc:	f04f 020a 	mov.w	r2, #10
 8006bd0:	bf08      	it	eq
 8006bd2:	9341      	streq	r3, [sp, #260]	; 0x104
 8006bd4:	46aa      	mov	sl, r5
 8006bd6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006bda:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d91c      	bls.n	8006c1c <__ssvfiscanf_r+0xf8>
 8006be2:	2203      	movs	r2, #3
 8006be4:	487d      	ldr	r0, [pc, #500]	; (8006ddc <__ssvfiscanf_r+0x2b8>)
 8006be6:	f000 fc91 	bl	800750c <memchr>
 8006bea:	b138      	cbz	r0, 8006bfc <__ssvfiscanf_r+0xd8>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4655      	mov	r5, sl
 8006bf0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006bf2:	eba0 0009 	sub.w	r0, r0, r9
 8006bf6:	4083      	lsls	r3, r0
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	9341      	str	r3, [sp, #260]	; 0x104
 8006bfc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c00:	2b78      	cmp	r3, #120	; 0x78
 8006c02:	d806      	bhi.n	8006c12 <__ssvfiscanf_r+0xee>
 8006c04:	2b57      	cmp	r3, #87	; 0x57
 8006c06:	d810      	bhi.n	8006c2a <__ssvfiscanf_r+0x106>
 8006c08:	2b25      	cmp	r3, #37	; 0x25
 8006c0a:	d0c5      	beq.n	8006b98 <__ssvfiscanf_r+0x74>
 8006c0c:	d856      	bhi.n	8006cbc <__ssvfiscanf_r+0x198>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d064      	beq.n	8006cdc <__ssvfiscanf_r+0x1b8>
 8006c12:	2303      	movs	r3, #3
 8006c14:	9347      	str	r3, [sp, #284]	; 0x11c
 8006c16:	230a      	movs	r3, #10
 8006c18:	9342      	str	r3, [sp, #264]	; 0x108
 8006c1a:	e075      	b.n	8006d08 <__ssvfiscanf_r+0x1e4>
 8006c1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006c1e:	4655      	mov	r5, sl
 8006c20:	fb02 1103 	mla	r1, r2, r3, r1
 8006c24:	3930      	subs	r1, #48	; 0x30
 8006c26:	9143      	str	r1, [sp, #268]	; 0x10c
 8006c28:	e7d4      	b.n	8006bd4 <__ssvfiscanf_r+0xb0>
 8006c2a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006c2e:	2a20      	cmp	r2, #32
 8006c30:	d8ef      	bhi.n	8006c12 <__ssvfiscanf_r+0xee>
 8006c32:	a101      	add	r1, pc, #4	; (adr r1, 8006c38 <__ssvfiscanf_r+0x114>)
 8006c34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c38:	08006ceb 	.word	0x08006ceb
 8006c3c:	08006c13 	.word	0x08006c13
 8006c40:	08006c13 	.word	0x08006c13
 8006c44:	08006d49 	.word	0x08006d49
 8006c48:	08006c13 	.word	0x08006c13
 8006c4c:	08006c13 	.word	0x08006c13
 8006c50:	08006c13 	.word	0x08006c13
 8006c54:	08006c13 	.word	0x08006c13
 8006c58:	08006c13 	.word	0x08006c13
 8006c5c:	08006c13 	.word	0x08006c13
 8006c60:	08006c13 	.word	0x08006c13
 8006c64:	08006d5f 	.word	0x08006d5f
 8006c68:	08006d45 	.word	0x08006d45
 8006c6c:	08006cc3 	.word	0x08006cc3
 8006c70:	08006cc3 	.word	0x08006cc3
 8006c74:	08006cc3 	.word	0x08006cc3
 8006c78:	08006c13 	.word	0x08006c13
 8006c7c:	08006d01 	.word	0x08006d01
 8006c80:	08006c13 	.word	0x08006c13
 8006c84:	08006c13 	.word	0x08006c13
 8006c88:	08006c13 	.word	0x08006c13
 8006c8c:	08006c13 	.word	0x08006c13
 8006c90:	08006d6f 	.word	0x08006d6f
 8006c94:	08006d3d 	.word	0x08006d3d
 8006c98:	08006ce3 	.word	0x08006ce3
 8006c9c:	08006c13 	.word	0x08006c13
 8006ca0:	08006c13 	.word	0x08006c13
 8006ca4:	08006d6b 	.word	0x08006d6b
 8006ca8:	08006c13 	.word	0x08006c13
 8006cac:	08006d45 	.word	0x08006d45
 8006cb0:	08006c13 	.word	0x08006c13
 8006cb4:	08006c13 	.word	0x08006c13
 8006cb8:	08006ceb 	.word	0x08006ceb
 8006cbc:	3b45      	subs	r3, #69	; 0x45
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d8a7      	bhi.n	8006c12 <__ssvfiscanf_r+0xee>
 8006cc2:	2305      	movs	r3, #5
 8006cc4:	e01f      	b.n	8006d06 <__ssvfiscanf_r+0x1e2>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4630      	mov	r0, r6
 8006cca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ccc:	4798      	blx	r3
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f af67 	beq.w	8006ba2 <__ssvfiscanf_r+0x7e>
 8006cd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f040 808d 	bne.w	8006df6 <__ssvfiscanf_r+0x2d2>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	e08f      	b.n	8006e02 <__ssvfiscanf_r+0x2de>
 8006ce2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ce4:	f042 0220 	orr.w	r2, r2, #32
 8006ce8:	9241      	str	r2, [sp, #260]	; 0x104
 8006cea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf0:	9241      	str	r2, [sp, #260]	; 0x104
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	2b6f      	cmp	r3, #111	; 0x6f
 8006cf6:	bf34      	ite	cc
 8006cf8:	2303      	movcc	r3, #3
 8006cfa:	2304      	movcs	r3, #4
 8006cfc:	9242      	str	r2, [sp, #264]	; 0x108
 8006cfe:	e002      	b.n	8006d06 <__ssvfiscanf_r+0x1e2>
 8006d00:	2300      	movs	r3, #0
 8006d02:	9342      	str	r3, [sp, #264]	; 0x108
 8006d04:	2303      	movs	r3, #3
 8006d06:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dd3d      	ble.n	8006d8a <__ssvfiscanf_r+0x266>
 8006d0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d10:	0659      	lsls	r1, r3, #25
 8006d12:	d404      	bmi.n	8006d1e <__ssvfiscanf_r+0x1fa>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	5cba      	ldrb	r2, [r7, r2]
 8006d1a:	0712      	lsls	r2, r2, #28
 8006d1c:	d43c      	bmi.n	8006d98 <__ssvfiscanf_r+0x274>
 8006d1e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	dc4b      	bgt.n	8006dbc <__ssvfiscanf_r+0x298>
 8006d24:	466b      	mov	r3, sp
 8006d26:	4622      	mov	r2, r4
 8006d28:	4630      	mov	r0, r6
 8006d2a:	a941      	add	r1, sp, #260	; 0x104
 8006d2c:	f000 fa06 	bl	800713c <_scanf_chars>
 8006d30:	2801      	cmp	r0, #1
 8006d32:	d06a      	beq.n	8006e0a <__ssvfiscanf_r+0x2e6>
 8006d34:	2802      	cmp	r0, #2
 8006d36:	f47f af1b 	bne.w	8006b70 <__ssvfiscanf_r+0x4c>
 8006d3a:	e7cb      	b.n	8006cd4 <__ssvfiscanf_r+0x1b0>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	9342      	str	r3, [sp, #264]	; 0x108
 8006d40:	2304      	movs	r3, #4
 8006d42:	e7e0      	b.n	8006d06 <__ssvfiscanf_r+0x1e2>
 8006d44:	220a      	movs	r2, #10
 8006d46:	e7d5      	b.n	8006cf4 <__ssvfiscanf_r+0x1d0>
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f000 fb42 	bl	80073d4 <__sccl>
 8006d50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d52:	4605      	mov	r5, r0
 8006d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d58:	9341      	str	r3, [sp, #260]	; 0x104
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e7d3      	b.n	8006d06 <__ssvfiscanf_r+0x1e2>
 8006d5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d64:	9341      	str	r3, [sp, #260]	; 0x104
 8006d66:	2300      	movs	r3, #0
 8006d68:	e7cd      	b.n	8006d06 <__ssvfiscanf_r+0x1e2>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e7cb      	b.n	8006d06 <__ssvfiscanf_r+0x1e2>
 8006d6e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006d70:	06c3      	lsls	r3, r0, #27
 8006d72:	f53f aefd 	bmi.w	8006b70 <__ssvfiscanf_r+0x4c>
 8006d76:	9b00      	ldr	r3, [sp, #0]
 8006d78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d7a:	1d19      	adds	r1, r3, #4
 8006d7c:	9100      	str	r1, [sp, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	07c0      	lsls	r0, r0, #31
 8006d82:	bf4c      	ite	mi
 8006d84:	801a      	strhmi	r2, [r3, #0]
 8006d86:	601a      	strpl	r2, [r3, #0]
 8006d88:	e6f2      	b.n	8006b70 <__ssvfiscanf_r+0x4c>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d90:	4798      	blx	r3
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d0bb      	beq.n	8006d0e <__ssvfiscanf_r+0x1ea>
 8006d96:	e79d      	b.n	8006cd4 <__ssvfiscanf_r+0x1b0>
 8006d98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	9245      	str	r2, [sp, #276]	; 0x114
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	3a01      	subs	r2, #1
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	6062      	str	r2, [r4, #4]
 8006da6:	dd02      	ble.n	8006dae <__ssvfiscanf_r+0x28a>
 8006da8:	3301      	adds	r3, #1
 8006daa:	6023      	str	r3, [r4, #0]
 8006dac:	e7b2      	b.n	8006d14 <__ssvfiscanf_r+0x1f0>
 8006dae:	4621      	mov	r1, r4
 8006db0:	4630      	mov	r0, r6
 8006db2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006db4:	4798      	blx	r3
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d0ac      	beq.n	8006d14 <__ssvfiscanf_r+0x1f0>
 8006dba:	e78b      	b.n	8006cd4 <__ssvfiscanf_r+0x1b0>
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	dc0f      	bgt.n	8006de0 <__ssvfiscanf_r+0x2bc>
 8006dc0:	466b      	mov	r3, sp
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	a941      	add	r1, sp, #260	; 0x104
 8006dc8:	f000 fa12 	bl	80071f0 <_scanf_i>
 8006dcc:	e7b0      	b.n	8006d30 <__ssvfiscanf_r+0x20c>
 8006dce:	bf00      	nop
 8006dd0:	08006a71 	.word	0x08006a71
 8006dd4:	08006aeb 	.word	0x08006aeb
 8006dd8:	08007939 	.word	0x08007939
 8006ddc:	080078f0 	.word	0x080078f0
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <__ssvfiscanf_r+0x2ec>)
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f43f aec4 	beq.w	8006b70 <__ssvfiscanf_r+0x4c>
 8006de8:	466b      	mov	r3, sp
 8006dea:	4622      	mov	r2, r4
 8006dec:	4630      	mov	r0, r6
 8006dee:	a941      	add	r1, sp, #260	; 0x104
 8006df0:	f3af 8000 	nop.w
 8006df4:	e79c      	b.n	8006d30 <__ssvfiscanf_r+0x20c>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dfc:	bf18      	it	ne
 8006dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8006e02:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e0c:	e7f9      	b.n	8006e02 <__ssvfiscanf_r+0x2de>
 8006e0e:	bf00      	nop
 8006e10:	00000000 	.word	0x00000000

08006e14 <_printf_common>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	4616      	mov	r6, r2
 8006e1a:	4699      	mov	r9, r3
 8006e1c:	688a      	ldr	r2, [r1, #8]
 8006e1e:	690b      	ldr	r3, [r1, #16]
 8006e20:	4607      	mov	r7, r0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bfb8      	it	lt
 8006e26:	4613      	movlt	r3, r2
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e34:	b10a      	cbz	r2, 8006e3a <_printf_common+0x26>
 8006e36:	3301      	adds	r3, #1
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	0699      	lsls	r1, r3, #26
 8006e3e:	bf42      	ittt	mi
 8006e40:	6833      	ldrmi	r3, [r6, #0]
 8006e42:	3302      	addmi	r3, #2
 8006e44:	6033      	strmi	r3, [r6, #0]
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	f015 0506 	ands.w	r5, r5, #6
 8006e4c:	d106      	bne.n	8006e5c <_printf_common+0x48>
 8006e4e:	f104 0a19 	add.w	sl, r4, #25
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	6832      	ldr	r2, [r6, #0]
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	42ab      	cmp	r3, r5
 8006e5a:	dc2b      	bgt.n	8006eb4 <_printf_common+0xa0>
 8006e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e60:	1e13      	subs	r3, r2, #0
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	bf18      	it	ne
 8006e66:	2301      	movne	r3, #1
 8006e68:	0692      	lsls	r2, r2, #26
 8006e6a:	d430      	bmi.n	8006ece <_printf_common+0xba>
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e74:	47c0      	blx	r8
 8006e76:	3001      	adds	r0, #1
 8006e78:	d023      	beq.n	8006ec2 <_printf_common+0xae>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	f003 0306 	and.w	r3, r3, #6
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	bf14      	ite	ne
 8006e86:	2500      	movne	r5, #0
 8006e88:	6833      	ldreq	r3, [r6, #0]
 8006e8a:	f04f 0600 	mov.w	r6, #0
 8006e8e:	bf08      	it	eq
 8006e90:	68e5      	ldreq	r5, [r4, #12]
 8006e92:	f104 041a 	add.w	r4, r4, #26
 8006e96:	bf08      	it	eq
 8006e98:	1aed      	subeq	r5, r5, r3
 8006e9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e9e:	bf08      	it	eq
 8006ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bfc4      	itt	gt
 8006ea8:	1a9b      	subgt	r3, r3, r2
 8006eaa:	18ed      	addgt	r5, r5, r3
 8006eac:	42b5      	cmp	r5, r6
 8006eae:	d11a      	bne.n	8006ee6 <_printf_common+0xd2>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e008      	b.n	8006ec6 <_printf_common+0xb2>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4652      	mov	r2, sl
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d103      	bne.n	8006eca <_printf_common+0xb6>
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eca:	3501      	adds	r5, #1
 8006ecc:	e7c1      	b.n	8006e52 <_printf_common+0x3e>
 8006ece:	2030      	movs	r0, #48	; 0x30
 8006ed0:	18e1      	adds	r1, r4, r3
 8006ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006edc:	4422      	add	r2, r4
 8006ede:	3302      	adds	r3, #2
 8006ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ee4:	e7c2      	b.n	8006e6c <_printf_common+0x58>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4649      	mov	r1, r9
 8006eec:	4638      	mov	r0, r7
 8006eee:	47c0      	blx	r8
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0e6      	beq.n	8006ec2 <_printf_common+0xae>
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7d9      	b.n	8006eac <_printf_common+0x98>

08006ef8 <_printf_i>:
 8006ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	7e0f      	ldrb	r7, [r1, #24]
 8006efe:	4691      	mov	r9, r2
 8006f00:	2f78      	cmp	r7, #120	; 0x78
 8006f02:	4680      	mov	r8, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	469a      	mov	sl, r3
 8006f08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f0e:	d807      	bhi.n	8006f20 <_printf_i+0x28>
 8006f10:	2f62      	cmp	r7, #98	; 0x62
 8006f12:	d80a      	bhi.n	8006f2a <_printf_i+0x32>
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	f000 80d5 	beq.w	80070c4 <_printf_i+0x1cc>
 8006f1a:	2f58      	cmp	r7, #88	; 0x58
 8006f1c:	f000 80c1 	beq.w	80070a2 <_printf_i+0x1aa>
 8006f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f28:	e03a      	b.n	8006fa0 <_printf_i+0xa8>
 8006f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f2e:	2b15      	cmp	r3, #21
 8006f30:	d8f6      	bhi.n	8006f20 <_printf_i+0x28>
 8006f32:	a101      	add	r1, pc, #4	; (adr r1, 8006f38 <_printf_i+0x40>)
 8006f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f38:	08006f91 	.word	0x08006f91
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006f21 	.word	0x08006f21
 8006f44:	08006f21 	.word	0x08006f21
 8006f48:	08006f21 	.word	0x08006f21
 8006f4c:	08006f21 	.word	0x08006f21
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006f21 	.word	0x08006f21
 8006f58:	08006f21 	.word	0x08006f21
 8006f5c:	08006f21 	.word	0x08006f21
 8006f60:	08006f21 	.word	0x08006f21
 8006f64:	080070ab 	.word	0x080070ab
 8006f68:	08006fd1 	.word	0x08006fd1
 8006f6c:	08007065 	.word	0x08007065
 8006f70:	08006f21 	.word	0x08006f21
 8006f74:	08006f21 	.word	0x08006f21
 8006f78:	080070cd 	.word	0x080070cd
 8006f7c:	08006f21 	.word	0x08006f21
 8006f80:	08006fd1 	.word	0x08006fd1
 8006f84:	08006f21 	.word	0x08006f21
 8006f88:	08006f21 	.word	0x08006f21
 8006f8c:	0800706d 	.word	0x0800706d
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	602a      	str	r2, [r5, #0]
 8006f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0a0      	b.n	80070e6 <_printf_i+0x1ee>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	0607      	lsls	r7, r0, #24
 8006faa:	f103 0104 	add.w	r1, r3, #4
 8006fae:	6029      	str	r1, [r5, #0]
 8006fb0:	d501      	bpl.n	8006fb6 <_printf_i+0xbe>
 8006fb2:	681e      	ldr	r6, [r3, #0]
 8006fb4:	e003      	b.n	8006fbe <_printf_i+0xc6>
 8006fb6:	0646      	lsls	r6, r0, #25
 8006fb8:	d5fb      	bpl.n	8006fb2 <_printf_i+0xba>
 8006fba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	da03      	bge.n	8006fca <_printf_i+0xd2>
 8006fc2:	232d      	movs	r3, #45	; 0x2d
 8006fc4:	4276      	negs	r6, r6
 8006fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fca:	230a      	movs	r3, #10
 8006fcc:	4859      	ldr	r0, [pc, #356]	; (8007134 <_printf_i+0x23c>)
 8006fce:	e012      	b.n	8006ff6 <_printf_i+0xfe>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	1d19      	adds	r1, r3, #4
 8006fd6:	6029      	str	r1, [r5, #0]
 8006fd8:	0605      	lsls	r5, r0, #24
 8006fda:	d501      	bpl.n	8006fe0 <_printf_i+0xe8>
 8006fdc:	681e      	ldr	r6, [r3, #0]
 8006fde:	e002      	b.n	8006fe6 <_printf_i+0xee>
 8006fe0:	0641      	lsls	r1, r0, #25
 8006fe2:	d5fb      	bpl.n	8006fdc <_printf_i+0xe4>
 8006fe4:	881e      	ldrh	r6, [r3, #0]
 8006fe6:	2f6f      	cmp	r7, #111	; 0x6f
 8006fe8:	bf0c      	ite	eq
 8006fea:	2308      	moveq	r3, #8
 8006fec:	230a      	movne	r3, #10
 8006fee:	4851      	ldr	r0, [pc, #324]	; (8007134 <_printf_i+0x23c>)
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ff6:	6865      	ldr	r5, [r4, #4]
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	bfa8      	it	ge
 8006ffc:	6821      	ldrge	r1, [r4, #0]
 8006ffe:	60a5      	str	r5, [r4, #8]
 8007000:	bfa4      	itt	ge
 8007002:	f021 0104 	bicge.w	r1, r1, #4
 8007006:	6021      	strge	r1, [r4, #0]
 8007008:	b90e      	cbnz	r6, 800700e <_printf_i+0x116>
 800700a:	2d00      	cmp	r5, #0
 800700c:	d04b      	beq.n	80070a6 <_printf_i+0x1ae>
 800700e:	4615      	mov	r5, r2
 8007010:	fbb6 f1f3 	udiv	r1, r6, r3
 8007014:	fb03 6711 	mls	r7, r3, r1, r6
 8007018:	5dc7      	ldrb	r7, [r0, r7]
 800701a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800701e:	4637      	mov	r7, r6
 8007020:	42bb      	cmp	r3, r7
 8007022:	460e      	mov	r6, r1
 8007024:	d9f4      	bls.n	8007010 <_printf_i+0x118>
 8007026:	2b08      	cmp	r3, #8
 8007028:	d10b      	bne.n	8007042 <_printf_i+0x14a>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	07de      	lsls	r6, r3, #31
 800702e:	d508      	bpl.n	8007042 <_printf_i+0x14a>
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	6861      	ldr	r1, [r4, #4]
 8007034:	4299      	cmp	r1, r3
 8007036:	bfde      	ittt	le
 8007038:	2330      	movle	r3, #48	; 0x30
 800703a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800703e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007042:	1b52      	subs	r2, r2, r5
 8007044:	6122      	str	r2, [r4, #16]
 8007046:	464b      	mov	r3, r9
 8007048:	4621      	mov	r1, r4
 800704a:	4640      	mov	r0, r8
 800704c:	f8cd a000 	str.w	sl, [sp]
 8007050:	aa03      	add	r2, sp, #12
 8007052:	f7ff fedf 	bl	8006e14 <_printf_common>
 8007056:	3001      	adds	r0, #1
 8007058:	d14a      	bne.n	80070f0 <_printf_i+0x1f8>
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	b004      	add	sp, #16
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f043 0320 	orr.w	r3, r3, #32
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	2778      	movs	r7, #120	; 0x78
 800706e:	4832      	ldr	r0, [pc, #200]	; (8007138 <_printf_i+0x240>)
 8007070:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	6829      	ldr	r1, [r5, #0]
 8007078:	061f      	lsls	r7, r3, #24
 800707a:	f851 6b04 	ldr.w	r6, [r1], #4
 800707e:	d402      	bmi.n	8007086 <_printf_i+0x18e>
 8007080:	065f      	lsls	r7, r3, #25
 8007082:	bf48      	it	mi
 8007084:	b2b6      	uxthmi	r6, r6
 8007086:	07df      	lsls	r7, r3, #31
 8007088:	bf48      	it	mi
 800708a:	f043 0320 	orrmi.w	r3, r3, #32
 800708e:	6029      	str	r1, [r5, #0]
 8007090:	bf48      	it	mi
 8007092:	6023      	strmi	r3, [r4, #0]
 8007094:	b91e      	cbnz	r6, 800709e <_printf_i+0x1a6>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f023 0320 	bic.w	r3, r3, #32
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	2310      	movs	r3, #16
 80070a0:	e7a6      	b.n	8006ff0 <_printf_i+0xf8>
 80070a2:	4824      	ldr	r0, [pc, #144]	; (8007134 <_printf_i+0x23c>)
 80070a4:	e7e4      	b.n	8007070 <_printf_i+0x178>
 80070a6:	4615      	mov	r5, r2
 80070a8:	e7bd      	b.n	8007026 <_printf_i+0x12e>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	6826      	ldr	r6, [r4, #0]
 80070ae:	1d18      	adds	r0, r3, #4
 80070b0:	6961      	ldr	r1, [r4, #20]
 80070b2:	6028      	str	r0, [r5, #0]
 80070b4:	0635      	lsls	r5, r6, #24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	d501      	bpl.n	80070be <_printf_i+0x1c6>
 80070ba:	6019      	str	r1, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <_printf_i+0x1cc>
 80070be:	0670      	lsls	r0, r6, #25
 80070c0:	d5fb      	bpl.n	80070ba <_printf_i+0x1c2>
 80070c2:	8019      	strh	r1, [r3, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	4615      	mov	r5, r2
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	e7bc      	b.n	8007046 <_printf_i+0x14e>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	2100      	movs	r1, #0
 80070d0:	1d1a      	adds	r2, r3, #4
 80070d2:	602a      	str	r2, [r5, #0]
 80070d4:	681d      	ldr	r5, [r3, #0]
 80070d6:	6862      	ldr	r2, [r4, #4]
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 fa17 	bl	800750c <memchr>
 80070de:	b108      	cbz	r0, 80070e4 <_printf_i+0x1ec>
 80070e0:	1b40      	subs	r0, r0, r5
 80070e2:	6060      	str	r0, [r4, #4]
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	2300      	movs	r3, #0
 80070ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ee:	e7aa      	b.n	8007046 <_printf_i+0x14e>
 80070f0:	462a      	mov	r2, r5
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	47d0      	blx	sl
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0ad      	beq.n	800705a <_printf_i+0x162>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	079b      	lsls	r3, r3, #30
 8007102:	d413      	bmi.n	800712c <_printf_i+0x234>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e7a6      	b.n	800705e <_printf_i+0x166>
 8007110:	2301      	movs	r3, #1
 8007112:	4632      	mov	r2, r6
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	47d0      	blx	sl
 800711a:	3001      	adds	r0, #1
 800711c:	d09d      	beq.n	800705a <_printf_i+0x162>
 800711e:	3501      	adds	r5, #1
 8007120:	68e3      	ldr	r3, [r4, #12]
 8007122:	9903      	ldr	r1, [sp, #12]
 8007124:	1a5b      	subs	r3, r3, r1
 8007126:	42ab      	cmp	r3, r5
 8007128:	dcf2      	bgt.n	8007110 <_printf_i+0x218>
 800712a:	e7eb      	b.n	8007104 <_printf_i+0x20c>
 800712c:	2500      	movs	r5, #0
 800712e:	f104 0619 	add.w	r6, r4, #25
 8007132:	e7f5      	b.n	8007120 <_printf_i+0x228>
 8007134:	080078fb 	.word	0x080078fb
 8007138:	0800790c 	.word	0x0800790c

0800713c <_scanf_chars>:
 800713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4615      	mov	r5, r2
 8007142:	688a      	ldr	r2, [r1, #8]
 8007144:	4680      	mov	r8, r0
 8007146:	460c      	mov	r4, r1
 8007148:	b932      	cbnz	r2, 8007158 <_scanf_chars+0x1c>
 800714a:	698a      	ldr	r2, [r1, #24]
 800714c:	2a00      	cmp	r2, #0
 800714e:	bf0c      	ite	eq
 8007150:	2201      	moveq	r2, #1
 8007152:	f04f 32ff 	movne.w	r2, #4294967295
 8007156:	608a      	str	r2, [r1, #8]
 8007158:	2700      	movs	r7, #0
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80071ec <_scanf_chars+0xb0>
 8007160:	06d1      	lsls	r1, r2, #27
 8007162:	bf5f      	itttt	pl
 8007164:	681a      	ldrpl	r2, [r3, #0]
 8007166:	1d11      	addpl	r1, r2, #4
 8007168:	6019      	strpl	r1, [r3, #0]
 800716a:	6816      	ldrpl	r6, [r2, #0]
 800716c:	69a0      	ldr	r0, [r4, #24]
 800716e:	b188      	cbz	r0, 8007194 <_scanf_chars+0x58>
 8007170:	2801      	cmp	r0, #1
 8007172:	d107      	bne.n	8007184 <_scanf_chars+0x48>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	6963      	ldr	r3, [r4, #20]
 800717a:	5c9b      	ldrb	r3, [r3, r2]
 800717c:	b953      	cbnz	r3, 8007194 <_scanf_chars+0x58>
 800717e:	2f00      	cmp	r7, #0
 8007180:	d031      	beq.n	80071e6 <_scanf_chars+0xaa>
 8007182:	e022      	b.n	80071ca <_scanf_chars+0x8e>
 8007184:	2802      	cmp	r0, #2
 8007186:	d120      	bne.n	80071ca <_scanf_chars+0x8e>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007190:	071b      	lsls	r3, r3, #28
 8007192:	d41a      	bmi.n	80071ca <_scanf_chars+0x8e>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	3701      	adds	r7, #1
 8007198:	06da      	lsls	r2, r3, #27
 800719a:	bf5e      	ittt	pl
 800719c:	682b      	ldrpl	r3, [r5, #0]
 800719e:	781b      	ldrbpl	r3, [r3, #0]
 80071a0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80071a4:	682a      	ldr	r2, [r5, #0]
 80071a6:	686b      	ldr	r3, [r5, #4]
 80071a8:	3201      	adds	r2, #1
 80071aa:	602a      	str	r2, [r5, #0]
 80071ac:	68a2      	ldr	r2, [r4, #8]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	3a01      	subs	r2, #1
 80071b2:	606b      	str	r3, [r5, #4]
 80071b4:	60a2      	str	r2, [r4, #8]
 80071b6:	b142      	cbz	r2, 80071ca <_scanf_chars+0x8e>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dcd7      	bgt.n	800716c <_scanf_chars+0x30>
 80071bc:	4629      	mov	r1, r5
 80071be:	4640      	mov	r0, r8
 80071c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071c4:	4798      	blx	r3
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d0d0      	beq.n	800716c <_scanf_chars+0x30>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f013 0310 	ands.w	r3, r3, #16
 80071d0:	d105      	bne.n	80071de <_scanf_chars+0xa2>
 80071d2:	68e2      	ldr	r2, [r4, #12]
 80071d4:	3201      	adds	r2, #1
 80071d6:	60e2      	str	r2, [r4, #12]
 80071d8:	69a2      	ldr	r2, [r4, #24]
 80071da:	b102      	cbz	r2, 80071de <_scanf_chars+0xa2>
 80071dc:	7033      	strb	r3, [r6, #0]
 80071de:	2000      	movs	r0, #0
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	443b      	add	r3, r7
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ea:	bf00      	nop
 80071ec:	08007939 	.word	0x08007939

080071f0 <_scanf_i>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	460c      	mov	r4, r1
 80071f6:	4698      	mov	r8, r3
 80071f8:	4b72      	ldr	r3, [pc, #456]	; (80073c4 <_scanf_i+0x1d4>)
 80071fa:	b087      	sub	sp, #28
 80071fc:	4682      	mov	sl, r0
 80071fe:	4616      	mov	r6, r2
 8007200:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007204:	ab03      	add	r3, sp, #12
 8007206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800720a:	4b6f      	ldr	r3, [pc, #444]	; (80073c8 <_scanf_i+0x1d8>)
 800720c:	69a1      	ldr	r1, [r4, #24]
 800720e:	4a6f      	ldr	r2, [pc, #444]	; (80073cc <_scanf_i+0x1dc>)
 8007210:	4627      	mov	r7, r4
 8007212:	2903      	cmp	r1, #3
 8007214:	bf18      	it	ne
 8007216:	461a      	movne	r2, r3
 8007218:	68a3      	ldr	r3, [r4, #8]
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	1e5a      	subs	r2, r3, #1
 800721e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007222:	bf81      	itttt	hi
 8007224:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007228:	eb03 0905 	addhi.w	r9, r3, r5
 800722c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007230:	60a3      	strhi	r3, [r4, #8]
 8007232:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007236:	bf98      	it	ls
 8007238:	f04f 0900 	movls.w	r9, #0
 800723c:	463d      	mov	r5, r7
 800723e:	f04f 0b00 	mov.w	fp, #0
 8007242:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	6831      	ldr	r1, [r6, #0]
 800724a:	ab03      	add	r3, sp, #12
 800724c:	2202      	movs	r2, #2
 800724e:	7809      	ldrb	r1, [r1, #0]
 8007250:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007254:	f000 f95a 	bl	800750c <memchr>
 8007258:	b328      	cbz	r0, 80072a6 <_scanf_i+0xb6>
 800725a:	f1bb 0f01 	cmp.w	fp, #1
 800725e:	d159      	bne.n	8007314 <_scanf_i+0x124>
 8007260:	6862      	ldr	r2, [r4, #4]
 8007262:	b92a      	cbnz	r2, 8007270 <_scanf_i+0x80>
 8007264:	2308      	movs	r3, #8
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	68a2      	ldr	r2, [r4, #8]
 800727a:	1e51      	subs	r1, r2, #1
 800727c:	60a1      	str	r1, [r4, #8]
 800727e:	b192      	cbz	r2, 80072a6 <_scanf_i+0xb6>
 8007280:	6832      	ldr	r2, [r6, #0]
 8007282:	1c51      	adds	r1, r2, #1
 8007284:	6031      	str	r1, [r6, #0]
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	f805 2b01 	strb.w	r2, [r5], #1
 800728c:	6872      	ldr	r2, [r6, #4]
 800728e:	3a01      	subs	r2, #1
 8007290:	2a00      	cmp	r2, #0
 8007292:	6072      	str	r2, [r6, #4]
 8007294:	dc07      	bgt.n	80072a6 <_scanf_i+0xb6>
 8007296:	4631      	mov	r1, r6
 8007298:	4650      	mov	r0, sl
 800729a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800729e:	4790      	blx	r2
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f040 8085 	bne.w	80073b0 <_scanf_i+0x1c0>
 80072a6:	f10b 0b01 	add.w	fp, fp, #1
 80072aa:	f1bb 0f03 	cmp.w	fp, #3
 80072ae:	d1cb      	bne.n	8007248 <_scanf_i+0x58>
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	b90b      	cbnz	r3, 80072b8 <_scanf_i+0xc8>
 80072b4:	230a      	movs	r3, #10
 80072b6:	6063      	str	r3, [r4, #4]
 80072b8:	6863      	ldr	r3, [r4, #4]
 80072ba:	4945      	ldr	r1, [pc, #276]	; (80073d0 <_scanf_i+0x1e0>)
 80072bc:	6960      	ldr	r0, [r4, #20]
 80072be:	1ac9      	subs	r1, r1, r3
 80072c0:	f000 f888 	bl	80073d4 <__sccl>
 80072c4:	f04f 0b00 	mov.w	fp, #0
 80072c8:	68a3      	ldr	r3, [r4, #8]
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d03d      	beq.n	800734c <_scanf_i+0x15c>
 80072d0:	6831      	ldr	r1, [r6, #0]
 80072d2:	6960      	ldr	r0, [r4, #20]
 80072d4:	f891 c000 	ldrb.w	ip, [r1]
 80072d8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80072dc:	2800      	cmp	r0, #0
 80072de:	d035      	beq.n	800734c <_scanf_i+0x15c>
 80072e0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80072e4:	d124      	bne.n	8007330 <_scanf_i+0x140>
 80072e6:	0510      	lsls	r0, r2, #20
 80072e8:	d522      	bpl.n	8007330 <_scanf_i+0x140>
 80072ea:	f10b 0b01 	add.w	fp, fp, #1
 80072ee:	f1b9 0f00 	cmp.w	r9, #0
 80072f2:	d003      	beq.n	80072fc <_scanf_i+0x10c>
 80072f4:	3301      	adds	r3, #1
 80072f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80072fa:	60a3      	str	r3, [r4, #8]
 80072fc:	6873      	ldr	r3, [r6, #4]
 80072fe:	3b01      	subs	r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	6073      	str	r3, [r6, #4]
 8007304:	dd1b      	ble.n	800733e <_scanf_i+0x14e>
 8007306:	6833      	ldr	r3, [r6, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	6033      	str	r3, [r6, #0]
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	3b01      	subs	r3, #1
 8007310:	60a3      	str	r3, [r4, #8]
 8007312:	e7d9      	b.n	80072c8 <_scanf_i+0xd8>
 8007314:	f1bb 0f02 	cmp.w	fp, #2
 8007318:	d1ae      	bne.n	8007278 <_scanf_i+0x88>
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007320:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007324:	d1bf      	bne.n	80072a6 <_scanf_i+0xb6>
 8007326:	2310      	movs	r3, #16
 8007328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800732c:	6063      	str	r3, [r4, #4]
 800732e:	e7a2      	b.n	8007276 <_scanf_i+0x86>
 8007330:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007334:	6022      	str	r2, [r4, #0]
 8007336:	780b      	ldrb	r3, [r1, #0]
 8007338:	f805 3b01 	strb.w	r3, [r5], #1
 800733c:	e7de      	b.n	80072fc <_scanf_i+0x10c>
 800733e:	4631      	mov	r1, r6
 8007340:	4650      	mov	r0, sl
 8007342:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007346:	4798      	blx	r3
 8007348:	2800      	cmp	r0, #0
 800734a:	d0df      	beq.n	800730c <_scanf_i+0x11c>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	05d9      	lsls	r1, r3, #23
 8007350:	d50d      	bpl.n	800736e <_scanf_i+0x17e>
 8007352:	42bd      	cmp	r5, r7
 8007354:	d909      	bls.n	800736a <_scanf_i+0x17a>
 8007356:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800735a:	4632      	mov	r2, r6
 800735c:	4650      	mov	r0, sl
 800735e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007362:	f105 39ff 	add.w	r9, r5, #4294967295
 8007366:	4798      	blx	r3
 8007368:	464d      	mov	r5, r9
 800736a:	42bd      	cmp	r5, r7
 800736c:	d028      	beq.n	80073c0 <_scanf_i+0x1d0>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	f012 0210 	ands.w	r2, r2, #16
 8007374:	d113      	bne.n	800739e <_scanf_i+0x1ae>
 8007376:	702a      	strb	r2, [r5, #0]
 8007378:	4639      	mov	r1, r7
 800737a:	6863      	ldr	r3, [r4, #4]
 800737c:	4650      	mov	r0, sl
 800737e:	9e01      	ldr	r6, [sp, #4]
 8007380:	47b0      	blx	r6
 8007382:	f8d8 3000 	ldr.w	r3, [r8]
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	1d1a      	adds	r2, r3, #4
 800738a:	f8c8 2000 	str.w	r2, [r8]
 800738e:	f011 0f20 	tst.w	r1, #32
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	d00f      	beq.n	80073b6 <_scanf_i+0x1c6>
 8007396:	6018      	str	r0, [r3, #0]
 8007398:	68e3      	ldr	r3, [r4, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60e3      	str	r3, [r4, #12]
 800739e:	2000      	movs	r0, #0
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	1bed      	subs	r5, r5, r7
 80073a4:	445d      	add	r5, fp
 80073a6:	442b      	add	r3, r5
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	b007      	add	sp, #28
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	f04f 0b00 	mov.w	fp, #0
 80073b4:	e7ca      	b.n	800734c <_scanf_i+0x15c>
 80073b6:	07ca      	lsls	r2, r1, #31
 80073b8:	bf4c      	ite	mi
 80073ba:	8018      	strhmi	r0, [r3, #0]
 80073bc:	6018      	strpl	r0, [r3, #0]
 80073be:	e7eb      	b.n	8007398 <_scanf_i+0x1a8>
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7f2      	b.n	80073aa <_scanf_i+0x1ba>
 80073c4:	080078b4 	.word	0x080078b4
 80073c8:	08007789 	.word	0x08007789
 80073cc:	080076a1 	.word	0x080076a1
 80073d0:	0800792d 	.word	0x0800792d

080073d4 <__sccl>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	780b      	ldrb	r3, [r1, #0]
 80073d8:	4604      	mov	r4, r0
 80073da:	2b5e      	cmp	r3, #94	; 0x5e
 80073dc:	bf0b      	itete	eq
 80073de:	784b      	ldrbeq	r3, [r1, #1]
 80073e0:	1c4a      	addne	r2, r1, #1
 80073e2:	1c8a      	addeq	r2, r1, #2
 80073e4:	2100      	movne	r1, #0
 80073e6:	bf08      	it	eq
 80073e8:	2101      	moveq	r1, #1
 80073ea:	3801      	subs	r0, #1
 80073ec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80073f0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80073f4:	42a8      	cmp	r0, r5
 80073f6:	d1fb      	bne.n	80073f0 <__sccl+0x1c>
 80073f8:	b90b      	cbnz	r3, 80073fe <__sccl+0x2a>
 80073fa:	1e50      	subs	r0, r2, #1
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	f081 0101 	eor.w	r1, r1, #1
 8007402:	4610      	mov	r0, r2
 8007404:	54e1      	strb	r1, [r4, r3]
 8007406:	4602      	mov	r2, r0
 8007408:	f812 5b01 	ldrb.w	r5, [r2], #1
 800740c:	2d2d      	cmp	r5, #45	; 0x2d
 800740e:	d005      	beq.n	800741c <__sccl+0x48>
 8007410:	2d5d      	cmp	r5, #93	; 0x5d
 8007412:	d016      	beq.n	8007442 <__sccl+0x6e>
 8007414:	2d00      	cmp	r5, #0
 8007416:	d0f1      	beq.n	80073fc <__sccl+0x28>
 8007418:	462b      	mov	r3, r5
 800741a:	e7f2      	b.n	8007402 <__sccl+0x2e>
 800741c:	7846      	ldrb	r6, [r0, #1]
 800741e:	2e5d      	cmp	r6, #93	; 0x5d
 8007420:	d0fa      	beq.n	8007418 <__sccl+0x44>
 8007422:	42b3      	cmp	r3, r6
 8007424:	dcf8      	bgt.n	8007418 <__sccl+0x44>
 8007426:	461a      	mov	r2, r3
 8007428:	3002      	adds	r0, #2
 800742a:	3201      	adds	r2, #1
 800742c:	4296      	cmp	r6, r2
 800742e:	54a1      	strb	r1, [r4, r2]
 8007430:	dcfb      	bgt.n	800742a <__sccl+0x56>
 8007432:	1af2      	subs	r2, r6, r3
 8007434:	3a01      	subs	r2, #1
 8007436:	42b3      	cmp	r3, r6
 8007438:	bfa8      	it	ge
 800743a:	2200      	movge	r2, #0
 800743c:	1c5d      	adds	r5, r3, #1
 800743e:	18ab      	adds	r3, r5, r2
 8007440:	e7e1      	b.n	8007406 <__sccl+0x32>
 8007442:	4610      	mov	r0, r2
 8007444:	e7da      	b.n	80073fc <__sccl+0x28>

08007446 <__submore>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800744e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007452:	4299      	cmp	r1, r3
 8007454:	d11b      	bne.n	800748e <__submore+0x48>
 8007456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800745a:	f7ff f925 	bl	80066a8 <_malloc_r>
 800745e:	b918      	cbnz	r0, 8007468 <__submore+0x22>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800746c:	63a3      	str	r3, [r4, #56]	; 0x38
 800746e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007472:	6360      	str	r0, [r4, #52]	; 0x34
 8007474:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007478:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800747c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007480:	7043      	strb	r3, [r0, #1]
 8007482:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007486:	7003      	strb	r3, [r0, #0]
 8007488:	6020      	str	r0, [r4, #0]
 800748a:	2000      	movs	r0, #0
 800748c:	e7ea      	b.n	8007464 <__submore+0x1e>
 800748e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007490:	0077      	lsls	r7, r6, #1
 8007492:	463a      	mov	r2, r7
 8007494:	f000 f856 	bl	8007544 <_realloc_r>
 8007498:	4605      	mov	r5, r0
 800749a:	2800      	cmp	r0, #0
 800749c:	d0e0      	beq.n	8007460 <__submore+0x1a>
 800749e:	eb00 0806 	add.w	r8, r0, r6
 80074a2:	4601      	mov	r1, r0
 80074a4:	4632      	mov	r2, r6
 80074a6:	4640      	mov	r0, r8
 80074a8:	f000 f83e 	bl	8007528 <memcpy>
 80074ac:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80074b0:	f8c4 8000 	str.w	r8, [r4]
 80074b4:	e7e9      	b.n	800748a <__submore+0x44>

080074b6 <memmove>:
 80074b6:	4288      	cmp	r0, r1
 80074b8:	b510      	push	{r4, lr}
 80074ba:	eb01 0402 	add.w	r4, r1, r2
 80074be:	d902      	bls.n	80074c6 <memmove+0x10>
 80074c0:	4284      	cmp	r4, r0
 80074c2:	4623      	mov	r3, r4
 80074c4:	d807      	bhi.n	80074d6 <memmove+0x20>
 80074c6:	1e43      	subs	r3, r0, #1
 80074c8:	42a1      	cmp	r1, r4
 80074ca:	d008      	beq.n	80074de <memmove+0x28>
 80074cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074d4:	e7f8      	b.n	80074c8 <memmove+0x12>
 80074d6:	4601      	mov	r1, r0
 80074d8:	4402      	add	r2, r0
 80074da:	428a      	cmp	r2, r1
 80074dc:	d100      	bne.n	80074e0 <memmove+0x2a>
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074e8:	e7f7      	b.n	80074da <memmove+0x24>
	...

080074ec <_sbrk_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	2300      	movs	r3, #0
 80074f0:	4d05      	ldr	r5, [pc, #20]	; (8007508 <_sbrk_r+0x1c>)
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	f7fb f942 	bl	8002780 <_sbrk>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_sbrk_r+0x1a>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_sbrk_r+0x1a>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	200007e4 	.word	0x200007e4

0800750c <memchr>:
 800750c:	4603      	mov	r3, r0
 800750e:	b510      	push	{r4, lr}
 8007510:	b2c9      	uxtb	r1, r1
 8007512:	4402      	add	r2, r0
 8007514:	4293      	cmp	r3, r2
 8007516:	4618      	mov	r0, r3
 8007518:	d101      	bne.n	800751e <memchr+0x12>
 800751a:	2000      	movs	r0, #0
 800751c:	e003      	b.n	8007526 <memchr+0x1a>
 800751e:	7804      	ldrb	r4, [r0, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	428c      	cmp	r4, r1
 8007524:	d1f6      	bne.n	8007514 <memchr+0x8>
 8007526:	bd10      	pop	{r4, pc}

08007528 <memcpy>:
 8007528:	440a      	add	r2, r1
 800752a:	4291      	cmp	r1, r2
 800752c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007530:	d100      	bne.n	8007534 <memcpy+0xc>
 8007532:	4770      	bx	lr
 8007534:	b510      	push	{r4, lr}
 8007536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800753a:	4291      	cmp	r1, r2
 800753c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007540:	d1f9      	bne.n	8007536 <memcpy+0xe>
 8007542:	bd10      	pop	{r4, pc}

08007544 <_realloc_r>:
 8007544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007548:	4680      	mov	r8, r0
 800754a:	4614      	mov	r4, r2
 800754c:	460e      	mov	r6, r1
 800754e:	b921      	cbnz	r1, 800755a <_realloc_r+0x16>
 8007550:	4611      	mov	r1, r2
 8007552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	f7ff b8a7 	b.w	80066a8 <_malloc_r>
 800755a:	b92a      	cbnz	r2, 8007568 <_realloc_r+0x24>
 800755c:	f7ff f83c 	bl	80065d8 <_free_r>
 8007560:	4625      	mov	r5, r4
 8007562:	4628      	mov	r0, r5
 8007564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007568:	f000 f910 	bl	800778c <_malloc_usable_size_r>
 800756c:	4284      	cmp	r4, r0
 800756e:	4607      	mov	r7, r0
 8007570:	d802      	bhi.n	8007578 <_realloc_r+0x34>
 8007572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007576:	d812      	bhi.n	800759e <_realloc_r+0x5a>
 8007578:	4621      	mov	r1, r4
 800757a:	4640      	mov	r0, r8
 800757c:	f7ff f894 	bl	80066a8 <_malloc_r>
 8007580:	4605      	mov	r5, r0
 8007582:	2800      	cmp	r0, #0
 8007584:	d0ed      	beq.n	8007562 <_realloc_r+0x1e>
 8007586:	42bc      	cmp	r4, r7
 8007588:	4622      	mov	r2, r4
 800758a:	4631      	mov	r1, r6
 800758c:	bf28      	it	cs
 800758e:	463a      	movcs	r2, r7
 8007590:	f7ff ffca 	bl	8007528 <memcpy>
 8007594:	4631      	mov	r1, r6
 8007596:	4640      	mov	r0, r8
 8007598:	f7ff f81e 	bl	80065d8 <_free_r>
 800759c:	e7e1      	b.n	8007562 <_realloc_r+0x1e>
 800759e:	4635      	mov	r5, r6
 80075a0:	e7df      	b.n	8007562 <_realloc_r+0x1e>
	...

080075a4 <_strtol_l.constprop.0>:
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075aa:	4686      	mov	lr, r0
 80075ac:	4690      	mov	r8, r2
 80075ae:	d001      	beq.n	80075b4 <_strtol_l.constprop.0+0x10>
 80075b0:	2b24      	cmp	r3, #36	; 0x24
 80075b2:	d906      	bls.n	80075c2 <_strtol_l.constprop.0+0x1e>
 80075b4:	f7fe ffe4 	bl	8006580 <__errno>
 80075b8:	2316      	movs	r3, #22
 80075ba:	6003      	str	r3, [r0, #0]
 80075bc:	2000      	movs	r0, #0
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	460d      	mov	r5, r1
 80075c4:	4835      	ldr	r0, [pc, #212]	; (800769c <_strtol_l.constprop.0+0xf8>)
 80075c6:	462a      	mov	r2, r5
 80075c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075cc:	5d06      	ldrb	r6, [r0, r4]
 80075ce:	f016 0608 	ands.w	r6, r6, #8
 80075d2:	d1f8      	bne.n	80075c6 <_strtol_l.constprop.0+0x22>
 80075d4:	2c2d      	cmp	r4, #45	; 0x2d
 80075d6:	d12e      	bne.n	8007636 <_strtol_l.constprop.0+0x92>
 80075d8:	2601      	movs	r6, #1
 80075da:	782c      	ldrb	r4, [r5, #0]
 80075dc:	1c95      	adds	r5, r2, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d057      	beq.n	8007692 <_strtol_l.constprop.0+0xee>
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d109      	bne.n	80075fa <_strtol_l.constprop.0+0x56>
 80075e6:	2c30      	cmp	r4, #48	; 0x30
 80075e8:	d107      	bne.n	80075fa <_strtol_l.constprop.0+0x56>
 80075ea:	782a      	ldrb	r2, [r5, #0]
 80075ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80075f0:	2a58      	cmp	r2, #88	; 0x58
 80075f2:	d149      	bne.n	8007688 <_strtol_l.constprop.0+0xe4>
 80075f4:	2310      	movs	r3, #16
 80075f6:	786c      	ldrb	r4, [r5, #1]
 80075f8:	3502      	adds	r5, #2
 80075fa:	2200      	movs	r2, #0
 80075fc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007600:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007604:	fbbc f9f3 	udiv	r9, ip, r3
 8007608:	4610      	mov	r0, r2
 800760a:	fb03 ca19 	mls	sl, r3, r9, ip
 800760e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007612:	2f09      	cmp	r7, #9
 8007614:	d814      	bhi.n	8007640 <_strtol_l.constprop.0+0x9c>
 8007616:	463c      	mov	r4, r7
 8007618:	42a3      	cmp	r3, r4
 800761a:	dd20      	ble.n	800765e <_strtol_l.constprop.0+0xba>
 800761c:	1c57      	adds	r7, r2, #1
 800761e:	d007      	beq.n	8007630 <_strtol_l.constprop.0+0x8c>
 8007620:	4581      	cmp	r9, r0
 8007622:	d319      	bcc.n	8007658 <_strtol_l.constprop.0+0xb4>
 8007624:	d101      	bne.n	800762a <_strtol_l.constprop.0+0x86>
 8007626:	45a2      	cmp	sl, r4
 8007628:	db16      	blt.n	8007658 <_strtol_l.constprop.0+0xb4>
 800762a:	2201      	movs	r2, #1
 800762c:	fb00 4003 	mla	r0, r0, r3, r4
 8007630:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007634:	e7eb      	b.n	800760e <_strtol_l.constprop.0+0x6a>
 8007636:	2c2b      	cmp	r4, #43	; 0x2b
 8007638:	bf04      	itt	eq
 800763a:	782c      	ldrbeq	r4, [r5, #0]
 800763c:	1c95      	addeq	r5, r2, #2
 800763e:	e7ce      	b.n	80075de <_strtol_l.constprop.0+0x3a>
 8007640:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007644:	2f19      	cmp	r7, #25
 8007646:	d801      	bhi.n	800764c <_strtol_l.constprop.0+0xa8>
 8007648:	3c37      	subs	r4, #55	; 0x37
 800764a:	e7e5      	b.n	8007618 <_strtol_l.constprop.0+0x74>
 800764c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007650:	2f19      	cmp	r7, #25
 8007652:	d804      	bhi.n	800765e <_strtol_l.constprop.0+0xba>
 8007654:	3c57      	subs	r4, #87	; 0x57
 8007656:	e7df      	b.n	8007618 <_strtol_l.constprop.0+0x74>
 8007658:	f04f 32ff 	mov.w	r2, #4294967295
 800765c:	e7e8      	b.n	8007630 <_strtol_l.constprop.0+0x8c>
 800765e:	1c53      	adds	r3, r2, #1
 8007660:	d108      	bne.n	8007674 <_strtol_l.constprop.0+0xd0>
 8007662:	2322      	movs	r3, #34	; 0x22
 8007664:	4660      	mov	r0, ip
 8007666:	f8ce 3000 	str.w	r3, [lr]
 800766a:	f1b8 0f00 	cmp.w	r8, #0
 800766e:	d0a6      	beq.n	80075be <_strtol_l.constprop.0+0x1a>
 8007670:	1e69      	subs	r1, r5, #1
 8007672:	e006      	b.n	8007682 <_strtol_l.constprop.0+0xde>
 8007674:	b106      	cbz	r6, 8007678 <_strtol_l.constprop.0+0xd4>
 8007676:	4240      	negs	r0, r0
 8007678:	f1b8 0f00 	cmp.w	r8, #0
 800767c:	d09f      	beq.n	80075be <_strtol_l.constprop.0+0x1a>
 800767e:	2a00      	cmp	r2, #0
 8007680:	d1f6      	bne.n	8007670 <_strtol_l.constprop.0+0xcc>
 8007682:	f8c8 1000 	str.w	r1, [r8]
 8007686:	e79a      	b.n	80075be <_strtol_l.constprop.0+0x1a>
 8007688:	2430      	movs	r4, #48	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1b5      	bne.n	80075fa <_strtol_l.constprop.0+0x56>
 800768e:	2308      	movs	r3, #8
 8007690:	e7b3      	b.n	80075fa <_strtol_l.constprop.0+0x56>
 8007692:	2c30      	cmp	r4, #48	; 0x30
 8007694:	d0a9      	beq.n	80075ea <_strtol_l.constprop.0+0x46>
 8007696:	230a      	movs	r3, #10
 8007698:	e7af      	b.n	80075fa <_strtol_l.constprop.0+0x56>
 800769a:	bf00      	nop
 800769c:	08007939 	.word	0x08007939

080076a0 <_strtol_r>:
 80076a0:	f7ff bf80 	b.w	80075a4 <_strtol_l.constprop.0>

080076a4 <_strtoul_l.constprop.0>:
 80076a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076a8:	4686      	mov	lr, r0
 80076aa:	460d      	mov	r5, r1
 80076ac:	4f35      	ldr	r7, [pc, #212]	; (8007784 <_strtoul_l.constprop.0+0xe0>)
 80076ae:	4628      	mov	r0, r5
 80076b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076b4:	5d3e      	ldrb	r6, [r7, r4]
 80076b6:	f016 0608 	ands.w	r6, r6, #8
 80076ba:	d1f8      	bne.n	80076ae <_strtoul_l.constprop.0+0xa>
 80076bc:	2c2d      	cmp	r4, #45	; 0x2d
 80076be:	d130      	bne.n	8007722 <_strtoul_l.constprop.0+0x7e>
 80076c0:	2601      	movs	r6, #1
 80076c2:	782c      	ldrb	r4, [r5, #0]
 80076c4:	1c85      	adds	r5, r0, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d057      	beq.n	800777a <_strtoul_l.constprop.0+0xd6>
 80076ca:	2b10      	cmp	r3, #16
 80076cc:	d109      	bne.n	80076e2 <_strtoul_l.constprop.0+0x3e>
 80076ce:	2c30      	cmp	r4, #48	; 0x30
 80076d0:	d107      	bne.n	80076e2 <_strtoul_l.constprop.0+0x3e>
 80076d2:	7828      	ldrb	r0, [r5, #0]
 80076d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80076d8:	2858      	cmp	r0, #88	; 0x58
 80076da:	d149      	bne.n	8007770 <_strtoul_l.constprop.0+0xcc>
 80076dc:	2310      	movs	r3, #16
 80076de:	786c      	ldrb	r4, [r5, #1]
 80076e0:	3502      	adds	r5, #2
 80076e2:	f04f 38ff 	mov.w	r8, #4294967295
 80076e6:	fbb8 f8f3 	udiv	r8, r8, r3
 80076ea:	2700      	movs	r7, #0
 80076ec:	fb03 f908 	mul.w	r9, r3, r8
 80076f0:	4638      	mov	r0, r7
 80076f2:	ea6f 0909 	mvn.w	r9, r9
 80076f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80076fa:	f1bc 0f09 	cmp.w	ip, #9
 80076fe:	d815      	bhi.n	800772c <_strtoul_l.constprop.0+0x88>
 8007700:	4664      	mov	r4, ip
 8007702:	42a3      	cmp	r3, r4
 8007704:	dd23      	ble.n	800774e <_strtoul_l.constprop.0+0xaa>
 8007706:	f1b7 3fff 	cmp.w	r7, #4294967295
 800770a:	d007      	beq.n	800771c <_strtoul_l.constprop.0+0x78>
 800770c:	4580      	cmp	r8, r0
 800770e:	d31b      	bcc.n	8007748 <_strtoul_l.constprop.0+0xa4>
 8007710:	d101      	bne.n	8007716 <_strtoul_l.constprop.0+0x72>
 8007712:	45a1      	cmp	r9, r4
 8007714:	db18      	blt.n	8007748 <_strtoul_l.constprop.0+0xa4>
 8007716:	2701      	movs	r7, #1
 8007718:	fb00 4003 	mla	r0, r0, r3, r4
 800771c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007720:	e7e9      	b.n	80076f6 <_strtoul_l.constprop.0+0x52>
 8007722:	2c2b      	cmp	r4, #43	; 0x2b
 8007724:	bf04      	itt	eq
 8007726:	782c      	ldrbeq	r4, [r5, #0]
 8007728:	1c85      	addeq	r5, r0, #2
 800772a:	e7cc      	b.n	80076c6 <_strtoul_l.constprop.0+0x22>
 800772c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007730:	f1bc 0f19 	cmp.w	ip, #25
 8007734:	d801      	bhi.n	800773a <_strtoul_l.constprop.0+0x96>
 8007736:	3c37      	subs	r4, #55	; 0x37
 8007738:	e7e3      	b.n	8007702 <_strtoul_l.constprop.0+0x5e>
 800773a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800773e:	f1bc 0f19 	cmp.w	ip, #25
 8007742:	d804      	bhi.n	800774e <_strtoul_l.constprop.0+0xaa>
 8007744:	3c57      	subs	r4, #87	; 0x57
 8007746:	e7dc      	b.n	8007702 <_strtoul_l.constprop.0+0x5e>
 8007748:	f04f 37ff 	mov.w	r7, #4294967295
 800774c:	e7e6      	b.n	800771c <_strtoul_l.constprop.0+0x78>
 800774e:	1c7b      	adds	r3, r7, #1
 8007750:	d106      	bne.n	8007760 <_strtoul_l.constprop.0+0xbc>
 8007752:	2322      	movs	r3, #34	; 0x22
 8007754:	4638      	mov	r0, r7
 8007756:	f8ce 3000 	str.w	r3, [lr]
 800775a:	b932      	cbnz	r2, 800776a <_strtoul_l.constprop.0+0xc6>
 800775c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007760:	b106      	cbz	r6, 8007764 <_strtoul_l.constprop.0+0xc0>
 8007762:	4240      	negs	r0, r0
 8007764:	2a00      	cmp	r2, #0
 8007766:	d0f9      	beq.n	800775c <_strtoul_l.constprop.0+0xb8>
 8007768:	b107      	cbz	r7, 800776c <_strtoul_l.constprop.0+0xc8>
 800776a:	1e69      	subs	r1, r5, #1
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	e7f5      	b.n	800775c <_strtoul_l.constprop.0+0xb8>
 8007770:	2430      	movs	r4, #48	; 0x30
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1b5      	bne.n	80076e2 <_strtoul_l.constprop.0+0x3e>
 8007776:	2308      	movs	r3, #8
 8007778:	e7b3      	b.n	80076e2 <_strtoul_l.constprop.0+0x3e>
 800777a:	2c30      	cmp	r4, #48	; 0x30
 800777c:	d0a9      	beq.n	80076d2 <_strtoul_l.constprop.0+0x2e>
 800777e:	230a      	movs	r3, #10
 8007780:	e7af      	b.n	80076e2 <_strtoul_l.constprop.0+0x3e>
 8007782:	bf00      	nop
 8007784:	08007939 	.word	0x08007939

08007788 <_strtoul_r>:
 8007788:	f7ff bf8c 	b.w	80076a4 <_strtoul_l.constprop.0>

0800778c <_malloc_usable_size_r>:
 800778c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007790:	1f18      	subs	r0, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfbc      	itt	lt
 8007796:	580b      	ldrlt	r3, [r1, r0]
 8007798:	18c0      	addlt	r0, r0, r3
 800779a:	4770      	bx	lr

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr
